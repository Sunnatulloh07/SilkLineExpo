<%- include('../partials/header', { title: (t('favorites.pageTitle') || 'My Favorites') + ' - SLEX' }) %>
<%- include('../partials/navigation', { 
  cartItemsCount: cartItemsCount, 
  activeOrdersCount: activeOrdersCount, 
  unreadMessagesCount: unreadMessagesCount,
  favoritesCount: favoritesCount 
}) %>

<!-- Professional Favorites Page -->
<main class="favorites-page">
  <div class="container container-two">
    <div class="row">
      <div class="col-lg-3">
        <!-- Buyer Sidebar -->
        <%- include('./partials/buyer-sidebar', { currentPage: 'favorites' }) %>
      </div>
      
      <div class="col-lg-9">
        <div class="favorites-container">
          <!-- Page Header -->
          <div class="page-header">
            <div class="header-content">
              <div class="title-section">
                <h1 class="page-title">
                  <i class="las la-heart"></i>
                  <%= t('favorites.pageTitle') || 'My Favorites' %>
                </h1>
                <p class="page-description">
                  <%= t('favorites.pageDescription') || 'Manage your favorite products and suppliers' %>
                </p>
              </div>
              <div class="header-actions">
                <button class="btn btn-outline-primary" onclick="clearAllFavorites()">
                  <i class="las la-trash"></i>
                  <%= t('favorites.clearAll') || 'Clear All' %>
                </button>
              </div>
            </div>
          </div>

          <!-- Favorites Content -->
          <div class="favorites-content">
            
            <!-- Tabs Navigation -->
            <div class="favorites-tabs">
              <ul class="nav nav-tabs" id="favoritesTabs" role="tablist">
                <li class="nav-item" role="presentation">
                  <button class="nav-link active" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab">
                    <i class="las la-box"></i>
                    <%= t('favorites.tabs.products') || 'Products' %>
                    <span class="badge bg-primary" id="productsCount">0</span>
                  </button>
                </li>
                <li class="nav-item" role="presentation">
                  <button class="nav-link" id="suppliers-tab" data-bs-toggle="tab" data-bs-target="#suppliers" type="button" role="tab">
                    <i class="las la-building"></i>
                    <%= t('favorites.tabs.suppliers') || 'Suppliers' %>
                    <span class="badge bg-primary" id="suppliersCount">0</span>
                  </button>
                </li>
              </ul>
            </div>

            <!-- Tab Content -->
            <div class="tab-content" id="favoritesTabContent">
              
              <!-- Products Tab -->
              <div class="tab-pane fade show active" id="products" role="tabpanel">
                <div class="favorites-section">
                  <div class="section-header">
                    <h3 class="section-title">
                      <i class="las la-box"></i>
                      <%= t('favorites.sections.favoriteProducts') || 'Favorite Products' %>
                    </h3>
                    <div class="section-actions">
                      <div class="search-box">
                        <input type="text" class="form-control" id="productSearch" placeholder="<%= t('favorites.search.products') || 'Search products...' %>">
                        <i class="las la-search"></i>
                      </div>
                      <select class="form-select" id="productSort">
                        <option value="recent"><%= t('favorites.sort.recent') || 'Sort by Recent' %></option>
                        <option value="name"><%= t('favorites.sort.name') || 'Sort by Name' %></option>
                        <option value="price"><%= t('favorites.sort.price') || 'Sort by Price' %></option>
                      </select>
                    </div>
                  </div>
                  
                  <div class="products-grid" id="productsGrid">
                    <!-- Products will be loaded here -->
                  </div>
                  
                  <!-- Empty State -->
                  <div class="empty-state" id="productsEmptyState" style="display: none;">
                    <div class="empty-icon">
                      <i class="las la-heart-broken"></i>
                    </div>
                    <h4 class="empty-title"><%= t('favorites.emptyStates.noProducts') || 'No Favorite Products' %></h4>
                    <p class="empty-description">
                      <%= t('favorites.emptyStates.noProductsDesc') || 'You haven\'t added any products to your favorites yet.' %>
                    </p>
                    <a href="/all-product" class="btn btn-primary">
                      <i class="las la-search"></i>
                      <%= t('favorites.browse.products') || 'Browse Products' %>
                    </a>
                  </div>
                </div>
              </div>

              <!-- Suppliers Tab -->
              <div class="tab-pane fade" id="suppliers" role="tabpanel">
                <div class="favorites-section">
                  <div class="section-header">
                    <h3 class="section-title">
                      <i class="las la-building"></i>
                      <%= t('favorites.sections.favoriteSuppliers') || 'Favorite Suppliers' %>
                    </h3>
                    <div class="section-actions">
                      <div class="search-box">
                        <input type="text" class="form-control" id="supplierSearch" placeholder="<%= t('favorites.search.suppliers') || 'Search suppliers...' %>">
                        <i class="las la-search"></i>
                      </div>
                      <select class="form-select" id="supplierSort">
                        <option value="recent"><%= t('favorites.sort.recent') || 'Sort by Recent' %></option>
                        <option value="name"><%= t('favorites.sort.name') || 'Sort by Name' %></option>
                        <option value="rating"><%= t('favorites.sort.rating') || 'Sort by Rating' %></option>
                      </select>
                    </div>
                  </div>
                  
                  <div class="suppliers-grid" id="suppliersGrid">
                    <!-- Suppliers will be loaded here -->
                  </div>
                  
                  <!-- Empty State -->
                  <div class="empty-state" id="suppliersEmptyState" style="display: none;">
                    <div class="empty-icon">
                      <i class="las la-building"></i>
                    </div>
                    <h4 class="empty-title"><%= t('favorites.emptyStates.noSuppliers') || 'No Favorite Suppliers' %></h4>
                    <p class="empty-description">
                      <%= t('favorites.emptyStates.noSuppliersDesc') || 'You haven\'t added any suppliers to your favorites yet.' %>
                    </p>
                    <a href="/suppliers" class="btn btn-primary">
                      <i class="las la-search"></i>
                      <%= t('favorites.browse.suppliers') || 'Browse Suppliers' %>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Professional CSS -->
<style>
/* ========== BASE STYLES ========== */
.favorites-page {
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  min-height: 100vh;
  padding: 2rem 0;
  overflow-x: hidden;
}

.favorites-container {
  max-width: 100%;
  overflow-x: hidden;
}

/* ========== BREADCRUMB ========== */
.favorites-breadcrumb {
  background: rgba(255, 255, 255, 0.9);
  border-radius: 12px;
  padding: 1rem 1.5rem;
  margin-bottom: 1.5rem;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.3);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.06);
}

.breadcrumb {
  margin: 0;
  background: none;
  padding: 0;
}

.breadcrumb-item {
  color: #6c757d;
  font-weight: 500;
}

.breadcrumb-item a {
  color: hsl(var(--main));
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  transition: all 0.3s ease;
}

.breadcrumb-item a:hover {
  color: hsl(var(--main-d-100));
  transform: translateX(2px);
}

.breadcrumb-item.active {
  color: var(--bs-gray-800);
  font-weight: 600;
}

/* ========== PAGE HEADER ========== */
.page-header {
  background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
  border-radius: 20px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 255, 255, 0.5);
  backdrop-filter: blur(10px);
  margin-bottom: 2rem;
  overflow: hidden;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 2rem;
}

.title-section {
  flex: 1;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin: 0 0 0.5rem 0;
  font-size: 2rem;
  font-weight: 800;
  color: var(--bs-gray-900);
}

.page-title i {
  color: hsl(var(--main));
  font-size: 2.2rem;
}

.page-description {
  margin: 0;
  color: #6c757d;
  font-size: 1.1rem;
  font-weight: 500;
}

.header-actions {
  display: flex;
  gap: 1rem;
}

/* ========== FAVORITES TABS ========== */
.favorites-tabs {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
  margin-bottom: 2rem;
  overflow: hidden;
}

.nav-tabs {
  border: none;
  background: linear-gradient(135deg, rgba(hsl(var(--main-rgb)), 0.05) 0%, rgba(hsl(var(--main-rgb)), 0.02) 100%);
  padding: 0.5rem;
  gap: 0.5rem;
}

.nav-tabs .nav-link {
  border: none;
  background: transparent;
  color: #6c757d;
  font-weight: 600;
  padding: 1rem 1.5rem;
  border-radius: 12px;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  transition: all 0.3s ease;
  position: relative;
}

.nav-tabs .nav-link:hover {
  background: rgba(hsl(var(--main-rgb)), 0.1);
  color: hsl(var(--main));
  transform: translateY(-2px);
}


.nav-tabs .nav-link i {
  font-size: 1.2rem;
}

.badge {
  background: rgba(255, 255, 255, 0.2);
  font-size: 0.75rem;
  padding: 0.25rem 0.5rem;
  border-radius: 10px;
}

/* ========== TAB CONTENT ========== */
.tab-content {
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
  overflow: hidden;
}

.tab-pane {
  padding: 2rem;
}

/* ========== SECTION HEADER ========== */
.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  flex-wrap: wrap;
  gap: 1rem;
}

.section-title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin: 0;
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--bs-gray-800);
}

.section-title i {
  color: hsl(var(--main));
  font-size: 1.6rem;
}

.section-actions {
  display: flex;
  gap: 1rem;
  align-items: center;
  flex-wrap: wrap;
}

/* ========== SEARCH BOX ========== */
.search-box {
  position: relative;
  min-width: 250px;
}

.search-box input {
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 2px solid #e9ecef;
  border-radius: 10px;
  font-size: 0.95rem;
  transition: all 0.3s ease;
}

.search-box input:focus {
  border-color: hsl(var(--main));
  box-shadow: 0 0 0 3px rgba(hsl(var(--main-rgb)), 0.1);
}

.search-box i {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #6c757d;
  font-size: 1rem;
}

/* ========== FORM SELECTS ========== */
.form-select {
  padding: 0.75rem 1rem;
  border: 2px solid #e9ecef;
  border-radius: 10px;
  font-size: 0.95rem;
  min-width: 180px;
  transition: all 0.3s ease;
}

[data-theme="light"] .form-select,
[data-theme="light"] .form-select option {
    color: hsl(var(--static-white));
    background-color: var(--dark-black-three) !important;
    border-color: var(--dark-black-three) !important;
}

.form-select:focus {
  border-color: hsl(var(--main));
  box-shadow: 0 0 0 3px rgba(hsl(var(--main-rgb)), 0.1);
}

/* ========== PRODUCTS GRID ========== */
.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.product-card {
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 16px;
  overflow: hidden;
  transition: all 0.3s ease;
  position: relative;
}

.product-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);
  border-color: hsl(var(--main));
}

.product-image-container {
  width: 100%;
  height: 200px;
  background: #f8f9fa;
  position: relative;
  overflow: hidden;
}

.product-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
  opacity: 0;
}

.product-image.image-loaded {
  opacity: 1;
}

.product-image:hover {
  transform: scale(1.05);
}

/* No Image Placeholder */
.no-image-placeholder {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background: linear-gradient(45deg, #f8f9fa 25%, transparent 25%), 
              linear-gradient(-45deg, #f8f9fa 25%, transparent 25%), 
              linear-gradient(45deg, transparent 75%, #f8f9fa 75%), 
              linear-gradient(-45deg, transparent 75%, #f8f9fa 75%);
  background-size: 20px 20px;
  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
  color: #6c757d;
  text-align: center;
}

.no-image-placeholder i {
  font-size: 3rem;
  margin-bottom: 0.5rem;
  opacity: 0.5;
}

.no-image-placeholder span {
  font-size: 0.9rem;
  font-weight: 500;
  opacity: 0.7;
}

.product-info {
  padding: 1.5rem;
}

.product-title {
  font-size: 1.1rem;
  font-weight: 700;
  color: var(--bs-gray-800);
  margin: 0 0 0.5rem 0;
  line-height: 1.4;
}

.product-manufacturer {
  color: #6c757d;
  font-size: 0.9rem;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.product-manufacturer i {
  color: hsl(var(--main));
  font-size: 0.8rem;
}

.product-price {
  font-size: 1.3rem;
  font-weight: 800;
  color: hsl(var(--main));
  margin-bottom: 1rem;
}

.product-actions {
  display: flex;
  gap: 0.75rem;
}

.product-actions .btn {
  flex: 1;
  padding: 0.75rem;
  border-radius: 8px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.remove-favorite {
  position: absolute;
  top: 1rem;
  right: 1rem;
  width: 36px;
  height: 36px;
  border-radius: 50%;
  background: rgba(220, 53, 69, 0.9);
  color: white;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  z-index: 10;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
}

.remove-favorite:hover {
  background: #dc3545;
  transform: scale(1.1);
}

/* ========== SUPPLIERS GRID ========== */
.suppliers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.supplier-card {
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 16px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  position: relative;
}

.supplier-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.12);
  border-color: hsl(var(--main));
}

.supplier-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.supplier-logo {
  width: 60px;
  height: 60px;
  border-radius: 12px;
  background: #f8f9fa;
  display: flex;
  align-items: center;
  justify-content: center;
  color: hsl(var(--main));
  font-size: 1.5rem;
  border: 2px solid #e9ecef;
}

.supplier-info {
  flex: 1;
}

.supplier-name {
  font-size: 1.2rem;
  font-weight: 700;
  color: var(--bs-gray-800);
  margin: 0 0 0.25rem 0;
}

.supplier-country {
  color: #6c757d;
  font-size: 0.9rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.supplier-rating {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.rating-stars {
  color: #ffc107;
  font-size: 1rem;
}

.rating-text {
  color: #6c757d;
  font-size: 0.9rem;
}

.supplier-actions {
  display: flex;
  gap: 0.75rem;
}

.supplier-actions .btn {
  flex: 1;
  padding: 0.75rem;
  border-radius: 8px;
  font-weight: 600;
}

/* ========== EMPTY STATE ========== */
.empty-state {
  text-align: center;
  padding: 4rem 2rem;
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  border-radius: 16px;
  border: 2px dashed #dee2e6;
}

.empty-icon {
  font-size: 4rem;
  color: #6c757d;
  margin-bottom: 1.5rem;
}

.empty-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--bs-gray-600);
  margin: 0 0 1rem 0;
}

.empty-description {
  font-size: 1.1rem;
  color: #6c757d;
  margin: 0 0 2rem 0;
  line-height: 1.6;
}

/* ========== RESPONSIVE DESIGN ========== */
@media (max-width: 1200px) {
  .header-content {
    flex-direction: column;
    gap: 1.5rem;
    text-align: center;
  }
  
  .section-header {
    flex-direction: column;
    align-items: stretch;
  }
  
  .section-actions {
    justify-content: center;
  }
}

@media (max-width: 768px) {
  .favorites-page {
    padding: 1rem 0;
  }
  
  .page-header {
    margin-bottom: 1.5rem;
  }
  
  .header-content {
    padding: 1.5rem;
  }
  
  .page-title {
    font-size: 1.5rem;
  }
  
  .tab-pane {
    padding: 1.5rem;
  }
  
  .products-grid,
  .suppliers-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  .search-box {
    min-width: 100%;
  }
  
  .section-actions {
    flex-direction: column;
    width: 100%;
  }
}

/* ========== DARK MODE SUPPORT ========== */
[data-theme="light"] {
  .favorites-page {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
  }

  .favorites-breadcrumb,
  .page-header,
  .favorites-tabs,
  .tab-content {
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    border-color: #16213e;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .page-title,
  .section-title {
    color: #ffffff;
  }

  .page-description,
  .breadcrumb-item {
    color: rgba(255, 255, 255, 0.8);
  }

  .nav-tabs {
    background: linear-gradient(135deg, rgba(96, 165, 250, 0.1) 0%, rgba(96, 165, 250, 0.05) 100%);
  }

  .nav-tabs .nav-link {
    color: rgba(255, 255, 255, 0.8);
  }

  .nav-tabs .nav-link:hover {
    background: rgba(96, 165, 250, 0.15);
    color: #60a5fa;
  }

  .nav-tabs .nav-link.active {
    background: #60a5fa;
    color: #1a1a2e;
  }

  .product-card,
  .supplier-card {
    background: #16213e;
    border-color: #0f1419;
    color: rgba(255, 255, 255, 0.9);
  }

  .product-title,
  .supplier-name {
    color: #ffffff;
  }

  .product-manufacturer,
  .supplier-country,
  .rating-text {
    color: rgba(255, 255, 255, 0.7);
  }

  .empty-state {
    background: linear-gradient(135deg, #16213e 0%, #0f1419 100%);
    border-color: #16213e;
  }

  .empty-title {
    color: rgba(255, 255, 255, 0.8);
  }

  .empty-description {
    color: rgba(255, 255, 255, 0.6);
  }
}

/* ========== TOAST NOTIFICATIONS ========== */
.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 10000;
  display: flex;
  flex-direction: column;
  gap: 10px;
  max-width: 400px;
}

.toast-notification {
  background: white;
  border-radius: 12px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
  border: 1px solid #e9ecef;
  padding: 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
  transform: translateX(100%);
  opacity: 0;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.toast-notification.show {
  transform: translateX(0);
  opacity: 1;
}

.toast-notification::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 4px;
  height: 100%;
  background: #6c757d;
}

.toast-notification.toast-success::before {
  background: #28a745;
}

.toast-notification.toast-error::before {
  background: #dc3545;
}

.toast-notification.toast-info::before {
  background: #17a2b8;
}

.toast-content {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  flex: 1;
}

.toast-content i {
  font-size: 1.25rem;
  color: #6c757d;
}

.toast-success .toast-content i {
  color: #28a745;
}

.toast-error .toast-content i {
  color: #dc3545;
}

.toast-info .toast-content i {
  color: #17a2b8;
}

.toast-content span {
  font-size: 0.9rem;
  font-weight: 500;
  color: #495057;
  line-height: 1.4;
}

.toast-close {
  background: none;
  border: none;
  padding: 0.25rem;
  border-radius: 4px;
  color: #6c757d;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 24px;
  height: 24px;
}

.toast-close:hover {
  background: rgba(0, 0, 0, 0.05);
  color: #495057;
}

.toast-close i {
  font-size: 0.875rem;
}

/* Mobile responsiveness for toasts */
@media (max-width: 768px) {
  .toast-container {
    left: 10px;
    right: 10px;
    max-width: none;
  }
  
  .toast-notification {
    padding: 0.875rem;
  }
  
  .toast-content span {
    font-size: 0.85rem;
  }
}

/* ========== LOADING STATES ========== */
.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn.btn-success {
  background-color: #28a745;
  border-color: #28a745;
  color: white;
}

.btn.btn-success:hover {
  background-color: #218838;
  border-color: #1e7e34;
}

/* Cart count animation */
#cartItemCount {
  transition: transform 0.2s ease;
}

/* Add More button styling */
.btn.btn-outline-secondary {
  border-color: #6c757d;
  color: #6c757d;
}

.btn.btn-outline-secondary:hover {
  background-color: #6c757d;
  border-color: #6c757d;
  color: white;
}

.btn.already-in-cart {
  position: relative;
}

.btn.already-in-cart::after {
  content: '✓';
  position: absolute;
  top: -5px;
  right: -5px;
  background: #28a745;
  color: white;
  border-radius: 50%;
  width: 16px;
  height: 16px;
  font-size: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

/* Spinner animation */
.la-spinner.la-spin {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

<!-- Professional JavaScript -->
<script>
// Global variables
let currentProducts = [];
let currentSuppliers = [];
let currentTab = 'products';

// Initialize page
document.addEventListener('DOMContentLoaded', function() {
  
  // Load initial data
  loadFavorites();
  
  // Initialize event listeners
  initializeEventListeners();
  
  // Initialize search functionality
  initializeSearch();
});

// Initialize event listeners
function initializeEventListeners() {
  // Tab switching
  document.querySelectorAll('[data-bs-toggle="tab"]').forEach(tab => {
    tab.addEventListener('click', function(e) {
      const target = e.target.getAttribute('data-bs-target');
      if (target === '#products') {
        currentTab = 'products';
        loadProducts();
      } else if (target === '#suppliers') {
        currentTab = 'suppliers';
        loadSuppliers();
      }
    });
  });
  
  // Sort functionality
  document.getElementById('productSort').addEventListener('change', function() {
    sortProducts(this.value);
  });
  
  document.getElementById('supplierSort').addEventListener('change', function() {
    sortSuppliers(this.value);
  });
}

// Initialize search functionality
function initializeSearch() {
  // Product search
  const productSearch = document.getElementById('productSearch');
  if (productSearch) {
    productSearch.addEventListener('input', debounce(function() {
      searchProducts(this.value);
    }, 300));
  }
  
  // Supplier search
  const supplierSearch = document.getElementById('supplierSearch');
  if (supplierSearch) {
    supplierSearch.addEventListener('input', debounce(function() {
      searchSuppliers(this.value);
    }, 300));
  }
}

// Load favorites data
async function loadFavorites() {
  try {
    showLoading();
    
    // Get favorites from the page data
    const favorites = JSON.parse('<%- JSON.stringify(favorites || []) %>');
    const suppliers = JSON.parse('<%- JSON.stringify([]) %>'); // Will be implemented later
    
    currentProducts = favorites || [];
    currentSuppliers = suppliers || [];
    
    // Update counts
    updateCounts();
    
    // Load current tab
    if (currentTab === 'products') {
      loadProducts();
    } else {
      loadSuppliers();
    }
    
  } catch (error) {
    console.error('Error loading favorites:', error);
    showNotification('Failed to load favorites: ' + error.message, 'error');
  } finally {
    hideLoading();
  }
}

// Load products
function loadProducts() {
  const productsGrid = document.getElementById('productsGrid');
  const emptyState = document.getElementById('productsEmptyState');
  
  if (!productsGrid || !emptyState) return;
  
  if (currentProducts.length === 0) {
    productsGrid.style.display = 'none';
    emptyState.style.display = 'block';
    return;
  }
  
  productsGrid.style.display = 'grid';
  emptyState.style.display = 'none';
  
  productsGrid.innerHTML = currentProducts.map(product => {
    // Smart image URL handling
    const productData = product.productId || product;
    const imageArray = productData.images || [];
    
    // Find primary image or use first available
    const primaryImage = imageArray.find(img => img && (img.isPrimary || img.primary)) || imageArray[0];
    
    // Extract proper image URL with multiple fallbacks
    let imageUrl = '/assets/images/placeholder-product.svg';
    if (primaryImage) {
      if (typeof primaryImage === 'string') {
        imageUrl = primaryImage;
      } else if (primaryImage.url) {
        imageUrl = primaryImage.url;
      } else if (primaryImage.src) {
        imageUrl = primaryImage.src;
      }
    }
    
    // Clean the URL (remove any undefined/null parts)
    if (imageUrl && imageUrl !== '/assets/images/placeholder-product.svg') {
      imageUrl = imageUrl.replace(/\/undefined|\/null/g, '');
      // Add protocol if missing for external URLs
      if (imageUrl.startsWith('//')) {
        imageUrl = 'https:' + imageUrl;
      }
    }
    
    const productName = productData.name || productData.title || '<%= t("favorites.labels.unknownProduct") || "Unknown Product" %>';
    const manufacturerName = (product.manufacturerId?.companyName || productData.manufacturer?.companyName || '<%= t("favorites.labels.unknownManufacturer") || "Unknown Manufacturer" %>');
    const productPrice = productData.pricing?.basePrice || productData.pricing?.unitPrice || productData.price || 0;
    const productId = productData._id || product._id;
    
    return `
      <div class="product-card" data-product-id="${productId}">
        <button class="remove-favorite" onclick="removeFromFavorites('${productId}')" title="<%= t('favorites.actions.removeFromFavorites') || 'Remove from favorites' %>">
        <i class="las la-times"></i>
      </button>
      
        <div class="product-image-container">
          <img src="${imageUrl}" 
               alt="${productName}" 
           class="product-image"
               onerror="handleFavoriteImageError(this)"
               onload="handleFavoriteImageSuccess(this)"
               data-product-id="${productId}">
        </div>
      
      <div class="product-info">
          <h4 class="product-title">${productName}</h4>
        
        <div class="product-manufacturer">
          <i class="las la-building"></i>
            <span>${manufacturerName}</span>
        </div>
        
        <div class="product-price">
            $${productPrice.toFixed(2)}
        </div>
        
        <div class="product-actions">
            <a href="/product-details?id=${productId}" class="btn btn-primary">
            <i class="las la-eye"></i>
            <%= t('favorites.actions.viewProduct') || 'View Product' %>
          </a>
            <button class="btn btn-outline-primary" onclick="addToCart('${productId}')">
            <i class="las la-shopping-cart"></i>
            <%= t('favorites.actions.addToCart') || 'Add to Cart' %>
          </button>
        </div>
      </div>
    </div>
    `;
  }).join('');
}

// Load suppliers
function loadSuppliers() {
  const suppliersGrid = document.getElementById('suppliersGrid');
  const emptyState = document.getElementById('suppliersEmptyState');
  
  if (!suppliersGrid || !emptyState) return;
  
  if (currentSuppliers.length === 0) {
    suppliersGrid.style.display = 'none';
    emptyState.style.display = 'block';
    return;
  }
  
  suppliersGrid.style.display = 'grid';
  emptyState.style.display = 'none';
  
  suppliersGrid.innerHTML = currentSuppliers.map(supplier => `
    <div class="supplier-card" data-supplier-id="${supplier.supplierId?._id || supplier._id}">
      <button class="remove-favorite" onclick="removeSupplierFromFavorites('${supplier.supplierId?._id || supplier._id}')" title="<%= t('favorites.actions.removeSupplierFromFavorites') || 'Remove from favorites' %>">
        <i class="las la-times"></i>
      </button>
      
      <div class="supplier-header">
        <div class="supplier-logo">
          <i class="las la-building"></i>
        </div>
        
        <div class="supplier-info">
          <h4 class="supplier-name">${supplier.supplierId?.companyName || supplier.companyName || '<%= t("favorites.labels.unknownSupplier") || "Unknown Supplier" %>'}</h4>
          <div class="supplier-country">
            <i class="las la-map-marker-alt"></i>
            <span>${supplier.supplierId?.country || supplier.country || '<%= t("favorites.labels.unknownCountry") || "Unknown Country" %>'}</span>
          </div>
        </div>
      </div>
      
      <div class="supplier-rating">
        <div class="rating-stars">
          ${generateStars(supplier.supplierId?.averageRating || supplier.averageRating || 0)}
        </div>
        <span class="rating-text">${(supplier.supplierId?.averageRating || supplier.averageRating || 0).toFixed(1)} (${supplier.supplierId?.totalReviews || supplier.totalReviews || 0} <%= t('favorites.labels.reviews') || 'reviews' %>)</span>
      </div>
      
      <div class="supplier-actions">
        <a href="/supplier-details?id=${supplier.supplierId?._id || supplier._id}" class="btn btn-primary">
          <i class="las la-eye"></i>
          <%= t('favorites.actions.viewSupplier') || 'View Supplier' %>
        </a>
        <button class="btn btn-outline-primary" onclick="contactSupplier('${supplier.supplierId?._id || supplier._id}')">
          <i class="las la-comments"></i>
          <%= t('favorites.actions.contact') || 'Contact' %>
        </button>
      </div>
    </div>
  `).join('');
}

// Generate star rating
function generateStars(rating) {
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 !== 0;
  const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
  
  let stars = '';
  
  // Full stars
  for (let i = 0; i < fullStars; i++) {
    stars += '<i class="las la-star"></i>';
  }
  
  // Half star
  if (hasHalfStar) {
    stars += '<i class="las la-star-half-alt"></i>';
  }
  
  // Empty stars
  for (let i = 0; i < emptyStars; i++) {
    stars += '<i class="las la-star-o"></i>';
  }
  
  return stars;
}

// Update counts
function updateCounts() {
  const productsCount = document.getElementById('productsCount');
  const suppliersCount = document.getElementById('suppliersCount');
  
  if (productsCount) {
    productsCount.textContent = currentProducts.length;
  }
  
  if (suppliersCount) {
    suppliersCount.textContent = currentSuppliers.length;
  }
}

// Search products
function searchProducts(query) {
  if (!query.trim()) {
    loadProducts();
    return;
  }
  
  const filtered = currentProducts.filter(product => {
    const productName = product.productId?.name || product.name || '';
    const manufacturerName = product.manufacturerId?.companyName || '';
    return productName.toLowerCase().includes(query.toLowerCase()) ||
           manufacturerName.toLowerCase().includes(query.toLowerCase());
  });
  
  displayFilteredProducts(filtered);
}

// Search suppliers
function searchSuppliers(query) {
  if (!query.trim()) {
    loadSuppliers();
    return;
  }
  
  const filtered = currentSuppliers.filter(supplier => {
    const companyName = supplier.supplierId?.companyName || supplier.companyName || '';
    const country = supplier.supplierId?.country || supplier.country || '';
    return companyName.toLowerCase().includes(query.toLowerCase()) ||
           country.toLowerCase().includes(query.toLowerCase());
  });
  
  displayFilteredSuppliers(filtered);
}

// Display filtered products
function displayFilteredProducts(products) {
  const productsGrid = document.getElementById('productsGrid');
  const emptyState = document.getElementById('productsEmptyState');
  
  if (!productsGrid || !emptyState) return;
  
  if (products.length === 0) {
    productsGrid.style.display = 'none';
    emptyState.style.display = 'block';
    emptyState.querySelector('.empty-title').textContent = '<%= t("favorites.emptyStates.noProductsFound") || "No products found" %>';
    emptyState.querySelector('.empty-description').textContent = '<%= t("favorites.emptyStates.noProductsFoundDesc") || "Try adjusting your search terms." %>';
    return;
  }
  
  productsGrid.style.display = 'grid';
  emptyState.style.display = 'none';
  
  // Reuse loadProducts logic but with filtered data
  const originalProducts = currentProducts;
  currentProducts = products;
  loadProducts();
  currentProducts = originalProducts;
}

// Display filtered suppliers
function displayFilteredSuppliers(suppliers) {
  const suppliersGrid = document.getElementById('suppliersGrid');
  const emptyState = document.getElementById('suppliersEmptyState');
  
  if (!suppliersGrid || !emptyState) return;
  
  if (suppliers.length === 0) {
    suppliersGrid.style.display = 'none';
    emptyState.style.display = 'block';
    emptyState.querySelector('.empty-title').textContent = '<%= t("favorites.emptyStates.noSuppliersFound") || "No suppliers found" %>';
    emptyState.querySelector('.empty-description').textContent = '<%= t("favorites.emptyStates.noSuppliersFoundDesc") || "Try adjusting your search terms." %>';
    return;
  }
  
  suppliersGrid.style.display = 'grid';
  emptyState.style.display = 'none';
  
  // Reuse loadSuppliers logic but with filtered data
  const originalSuppliers = currentSuppliers;
  currentSuppliers = suppliers;
  loadSuppliers();
  currentSuppliers = originalSuppliers;
}

// Sort products
function sortProducts(sortBy) {
  const sorted = [...currentProducts];
  
  switch (sortBy) {
    case 'name':
      sorted.sort((a, b) => {
        const nameA = a.productId?.name || a.name || '';
        const nameB = b.productId?.name || b.name || '';
        return nameA.localeCompare(nameB);
      });
      break;
    case 'price':
      sorted.sort((a, b) => {
        const priceA = a.productId?.pricing?.unitPrice || a.pricing?.unitPrice || 0;
        const priceB = b.productId?.pricing?.unitPrice || b.pricing?.unitPrice || 0;
        return priceA - priceB;
      });
      break;
    case 'recent':
    default:
      sorted.sort((a, b) => new Date(b.addedAt || 0) - new Date(a.addedAt || 0));
      break;
  }
  
  const originalProducts = currentProducts;
  currentProducts = sorted;
  loadProducts();
  currentProducts = originalProducts;
}

// Sort suppliers
function sortSuppliers(sortBy) {
  const sorted = [...currentSuppliers];
  
  switch (sortBy) {
    case 'name':
      sorted.sort((a, b) => {
        const nameA = a.supplierId?.companyName || a.companyName || '';
        const nameB = b.supplierId?.companyName || b.companyName || '';
        return nameA.localeCompare(nameB);
      });
      break;
    case 'rating':
      sorted.sort((a, b) => {
        const ratingA = a.supplierId?.averageRating || a.averageRating || 0;
        const ratingB = b.supplierId?.averageRating || b.averageRating || 0;
        return ratingB - ratingA;
      });
      break;
    case 'recent':
    default:
      sorted.sort((a, b) => new Date(b.addedAt || 0) - new Date(a.addedAt || 0));
      break;
  }
  
  const originalSuppliers = currentSuppliers;
  currentSuppliers = sorted;
  loadSuppliers();
  currentSuppliers = originalSuppliers;
}

// Remove from favorites
async function removeFromFavorites(productId) {
  if (!confirm('<%= t("favorites.confirmations.removeProduct") || "Are you sure you want to remove this product from favorites?" %>')) {
    return;
  }
  
  try {
    showLoading();
    
    const response = await fetch('/buyer/api/remove-from-favorites', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({ productId })
    });
    
    if (!response.ok) {
      throw new Error('Failed to remove from favorites');
    }
    
    const data = await response.json();
    
    if (data.success) {
      // Remove from local array
      currentProducts = currentProducts.filter(p => 
        (p.productId?._id || p._id) !== productId
      );
      
      // Update display
      loadProducts();
      updateCounts();
      
      showNotification('<%= t("favorites.notifications.productRemoved") || "Product removed from favorites" %>', 'success');
    } else {
      throw new Error(data.message || '<%= t("favorites.notifications.failedToRemove") || "Failed to remove from favorites" %>');
    }
    
  } catch (error) {
    console.error('Error removing from favorites:', error);
    showNotification('<%= t("favorites.notifications.failedToRemove") || "Failed to remove from favorites" %>: ' + error.message, 'error');
  } finally {
    hideLoading();
  }
}

// Remove supplier from favorites
async function removeSupplierFromFavorites(supplierId) {
  if (!confirm('<%= t("favorites.confirmations.removeSupplier") || "Are you sure you want to remove this supplier from favorites?" %>')) {
    return;
  }
  
  try {
    showLoading();
    
    const response = await fetch('/buyer/api/remove-supplier-from-favorites', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({ supplierId })
    });
    
    if (!response.ok) {
      throw new Error('Failed to remove supplier from favorites');
    }
    
    const data = await response.json();
    
    if (data.success) {
      // Remove from local array
      currentSuppliers = currentSuppliers.filter(s => 
        (s.supplierId?._id || s._id) !== supplierId
      );
      
      // Update display
      loadSuppliers();
      updateCounts();
      
      showNotification('<%= t("favorites.notifications.supplierRemoved") || "Supplier removed from favorites" %>', 'success');
    } else {
      throw new Error(data.message || '<%= t("favorites.notifications.failedToRemoveSupplier") || "Failed to remove supplier from favorites" %>');
    }
    
  } catch (error) {
    console.error('Error removing supplier from favorites:', error);
    showNotification('<%= t("favorites.notifications.failedToRemoveSupplier") || "Failed to remove supplier from favorites" %>: ' + error.message, 'error');
  } finally {
    hideLoading();
  }
}

// Clear all favorites
async function clearAllFavorites() {
  if (!confirm('<%= t("favorites.confirmations.clearAll") || "Are you sure you want to clear all favorites? This action cannot be undone." %>')) {
    return;
  }
  
  try {
    showLoading();
    
    // Make API call to clear all favorites
    const response = await fetch('/buyer/api/favorites/clear-all', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    
    if (!response.ok) {
      throw new Error('Failed to clear favorites');
    }
    
    const data = await response.json();
    
    if (data.success) {
    // Clear local arrays
    currentProducts = [];
    currentSuppliers = [];
    
    // Update display
    loadProducts();
    loadSuppliers();
    updateCounts();
    
    showNotification('<%= t("favorites.notifications.allCleared") || "All favorites cleared" %>', 'success');
    } else {
      throw new Error(data.message || '<%= t("favorites.notifications.failedToClear") || "Failed to clear favorites" %>');
    }
    
  } catch (error) {
    console.error('Error clearing favorites:', error);
    showNotification('<%= t("favorites.notifications.failedToClear") || "Failed to clear favorites" %>: ' + error.message, 'error');
  } finally {
    hideLoading();
  }
}

// Navigation functions
function viewProduct(productId) {
  window.open(`/products/${productId}`, '_blank');
}

async function addToCart(productId) {
  // Find the add to cart button (could be primary or secondary after first add)
  const button = document.querySelector(`[data-product-id="${productId}"] .btn-outline-primary`) ||
                document.querySelector(`[data-product-id="${productId}"] .btn-outline-secondary`);
  
  // Check if product is already being added to prevent double-clicks
  if (button && button.disabled) {
    return; // Already processing
  }
  
  try {
    // Find the product data from current products
    const productData = currentProducts.find(p => (p.productId?._id || p._id) === productId);
    if (!productData) {
      showNotification('<%= t("favorites.notifications.productNotFound") || "Product not found" %>', 'error');
      return;
    }
    
    // Extract necessary data
    const product = productData.productId || productData;
    const manufacturerId = productData.manufacturerId?._id || product.manufacturer?._id;
    const unitPrice = product.pricing?.basePrice || product.pricing?.unitPrice || product.price || 0;
    
    if (!manufacturerId) {
      showNotification('<%= t("favorites.notifications.manufacturerNotFound") || "Manufacturer information not found" %>', 'error');
      return;
    }
    
    // Immediately disable button and show loading state
    if (button) {
      button.disabled = true;
      button.innerHTML = '<i class="las la-spinner la-spin"></i> Adding...';
    }
    
    // Make API call to add to cart
    const response = await fetch('/buyer/api/cart/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        productId: productId,
        manufacturerId: manufacturerId,
        quantity: 1, // Default quantity
        unitPrice: unitPrice,
        selectedSpecs: {}, // Empty specs for now
        notes: '' // Empty notes
      })
    });
    
    if (!response.ok) {
      throw new Error('Failed to add product to cart');
    }
    
    const data = await response.json();
    
    if (data.success) {
      // Check if this is a repeat add (button already has already-in-cart class)
      const isRepeatAdd = button && button.classList.contains('already-in-cart');
      
      // Show appropriate notification
      if (isRepeatAdd) {
        showNotification('<%= t("favorites.notifications.quantityIncreased") || "Quantity increased in cart!" %>', 'success');
      } else {
        showNotification('<%= t("favorites.notifications.addedToCart") || "Product added to cart successfully!" %>', 'success');
      }
      
      // Update cart count in header
      updateCartCount();
      
      // Update button to show success and then change to "Add More"
      if (button) {
        button.innerHTML = '<i class="las la-check"></i> Added!';
        button.classList.remove('btn-outline-primary', 'btn-outline-secondary');
        button.classList.add('btn-success');
        
        // After 2 seconds, change to "Add More" state
        setTimeout(() => {
          button.innerHTML = '<i class="las la-plus"></i> Add More';
          button.classList.remove('btn-success');
          button.classList.add('btn-outline-secondary');
          button.disabled = false;
          
          // Add special class to track that it's been added
          button.classList.add('already-in-cart');
          
          // Update the click handler to show different message
          button.setAttribute('title', 'Add another quantity to cart');
        }, 2000);
      }
      
    } else {
      throw new Error(data.message || '<%= t("favorites.notifications.failedToAddToCart") || "Failed to add product to cart" %>');
    }
    
  } catch (error) {
    console.error('Error adding to cart:', error);
    showNotification('<%= t("favorites.notifications.failedToAddToCart") || "Failed to add product to cart" %>: ' + error.message, 'error');
    
    // Reset button on error
    if (button) {
      button.innerHTML = '<i class="las la-shopping-cart"></i> <%= t("favorites.actions.addToCart") || "Add to Cart" %>';
      button.disabled = false;
    }
  }
}

function viewSupplier(supplierId) {
  window.open(`/suppliers/${supplierId}`, '_blank');
}

function contactSupplier(supplierId) {
  window.open(`/buyer/messages?supplier=${supplierId}`, '_blank');
}

// Utility functions
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function showLoading() {
  // Show loading overlay or spinner
  const loadingElement = document.getElementById('loadingOverlay');
  if (loadingElement) {
    loadingElement.style.display = 'flex';
  } else {
  }
}

function hideLoading() {
  // Hide loading overlay or spinner
  const loadingElement = document.getElementById('loadingOverlay');
  if (loadingElement) {
    loadingElement.style.display = 'none';
  } else {
  }
}

function showNotification(message, type = 'info') {
  // Create a modern toast notification
  const toast = document.createElement('div');
  toast.className = `toast-notification toast-${type}`;
  toast.innerHTML = `
    <div class="toast-content">
      <i class="las ${type === 'success' ? 'la-check-circle' : type === 'error' ? 'la-exclamation-circle' : 'la-info-circle'}"></i>
      <span>${message}</span>
    </div>
    <button class="toast-close" onclick="this.parentElement.remove()">
      <i class="las la-times"></i>
    </button>
  `;
  
  // Add to page
  let toastContainer = document.getElementById('toastContainer');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toastContainer';
    toastContainer.className = 'toast-container';
    document.body.appendChild(toastContainer);
  }
  
  toastContainer.appendChild(toast);
  
  // Auto remove after 5 seconds
  setTimeout(() => {
    if (toast.parentElement) {
      toast.remove();
    }
  }, 5000);
  
  // Animate in
  setTimeout(() => {
    toast.classList.add('show');
  }, 100);
}

// Update cart count in header
function updateCartCount() {
  // Try to update cart count in navigation
  const cartCountElement = document.getElementById('cartItemCount') || 
                          document.querySelector('.cart-count') ||
                          document.querySelector('[data-cart-count]');
  
  if (cartCountElement) {
    // For now, just add visual feedback that something was added
    // Add bounce animation
    cartCountElement.style.transform = 'scale(1.2)';
    cartCountElement.style.color = '#28a745';
    
    setTimeout(() => {
      cartCountElement.style.transform = 'scale(1)';
      cartCountElement.style.color = '';
    }, 300);
    
    // Optional: Try to fetch actual count if API becomes available
    // This is a graceful fallback that won't break if API doesn't exist
    fetch('/buyer/api/cart')
      .then(response => response.json())
      .then(data => {
        if (data.success && data.cart && data.cart.items) {
          const count = data.cart.items.length;
          cartCountElement.textContent = count > 0 ? `(${count})` : '';
        }
      })
      .catch(error => {
        // Silently fail - this is just an enhancement
      });
  }
}

// Advanced Image Error Handler for Favorites
const FavoriteImageHandler = {
  failedImages: new Set(),
  retryCount: new Map(),
  maxRetries: 2,
  retryDelay: 1000,
  
  fallbackImages: [
    '/assets/images/placeholder-product.svg',
    '/assets/images/no-image.svg',
    '/images/placeholder-product.png',
    '/assets/images/default-product.png'
  ],
  
  handleError(img) {
    const originalSrc = img.dataset.originalSrc || img.src;
    const currentRetryCount = this.retryCount.get(originalSrc) || 0;
    
    
    // Store original src for tracking
    if (!img.dataset.originalSrc) {
      img.dataset.originalSrc = originalSrc;
    }
    
    // Check if we've already marked this as permanently failed
    if (this.failedImages.has(originalSrc)) {
      this.showFinalFallback(img);
      return;
    }
    
    // Check retry limit
    if (currentRetryCount >= this.maxRetries) {
      this.failedImages.add(originalSrc);
      this.tryFallbackImage(img, 0);
      return;
    }
    
    // Increment retry count and retry
    this.retryCount.set(originalSrc, currentRetryCount + 1);
    
    setTimeout(() => {
      img.src = originalSrc + '?retry=' + Date.now();
    }, this.retryDelay);
  },
  
  tryFallbackImage(img, fallbackIndex = 0) {
    if (fallbackIndex >= this.fallbackImages.length) {
      this.showFinalFallback(img);
      return;
    }
    
    const fallbackSrc = this.fallbackImages[fallbackIndex];
    
    // Create a test image to check if fallback works
    const testImg = new Image();
    testImg.onload = () => {
      img.src = fallbackSrc;
      img.dataset.fallbackUsed = 'true';
    };
    testImg.onerror = () => {
      this.tryFallbackImage(img, fallbackIndex + 1);
    };
    testImg.src = fallbackSrc;
  },
  
  showFinalFallback(img) {
    // Show a CSS-only fallback with product info
    const container = img.closest('.product-image-container') || img.parentElement;
    if (container) {
      container.innerHTML = `
        <div class="no-image-placeholder">
          <i class="las la-image"></i>
          <span>No Image</span>
        </div>
      `;
    }
  },
  
  handleSuccess(img) {
    const originalSrc = img.dataset.originalSrc || img.src;
    
    // Remove from failed list if it was there
    this.failedImages.delete(originalSrc);
    this.retryCount.delete(originalSrc);
    
    // Add success class for CSS animations
    img.classList.add('image-loaded');
  }
};

// Global functions for image handling
function handleFavoriteImageError(img) {
  FavoriteImageHandler.handleError(img);
}

function handleFavoriteImageSuccess(img) {
  FavoriteImageHandler.handleSuccess(img);
}
</script>

<%- include('../partials/footer') %>
