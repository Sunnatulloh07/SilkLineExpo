<%- include('../partials/header', { title: t('buyer.settings.title') + ' - SLEX', lng: lng, user: user }) %>
<%- include('../partials/navigation', { 
  cartItemsCount: cartItemsCount || 0, 
  activeOrdersCount: activeOrdersCount || 0, 
  unreadMessagesCount: unreadMessagesCount || 0,
  favoritesCount: favoritesCount || 0 
}) %>

<!-- Buyer Settings Page - Professional B2B Style -->
<main class="main-wrapper buyer-settings-wrapper position-relative z-index-1">
  
  <!-- Background Elements -->
  <img src="/assets/images/gradients/breadcrumb-gradient-bg.png" alt="" class="bg--gradient">
  <img src="/assets/images/shapes/element-moon3.png" alt="" class="element one">
  <img src="/assets/images/shapes/element-moon1.png" alt="" class="element three">

  <div class="container container-two">
    <div class="row">
      <div class="col-lg-3">
        <!-- Buyer Sidebar -->
        <%- include('./partials/buyer-sidebar', { 
          currentPage: 'settings', 
          user: user, 
          cartItemsCount: cartItemsCount || 0, 
          activeOrdersCount: activeOrdersCount || 0, 
          unreadMessagesCount: unreadMessagesCount || 0 
        }) %>
      </div>
      
      <div class="col-lg-9">
        <!-- Settings Header -->
        <div class="buyer-settings-header section-bg animate-fade-in">
          <div class="settings-header-content">
            <div class="settings-icon">
              <i class="las la-cog text-main"></i>
            </div>
            <div class="settings-info">
              <h2 class="settings-title text-heading">
                <%= t('buyer.settings.title') || 'Account Settings' %>
              </h2>
              <p class="settings-subtitle text-gray-600">
                <%= t('buyer.settings.subtitle') || 'Manage your account preferences and security settings' %>
              </p>
            </div>
          </div>
        </div>

        <!-- Success/Error Messages -->
        <% if (typeof success !== 'undefined' && success && success.length > 0) { %>
          <div class="alert-message success-message section-bg animate-fade-in">
            <div class="alert-content flx-align gap-2">
              <i class="las la-check-circle text-success"></i>
              <span class="text-heading"><%= success[0] %></span>
            </div>
          </div>
        <% } %>
        
        <% if (typeof error !== 'undefined' && error && error.length > 0) { %>
          <div class="alert-message error-message section-bg animate-fade-in">
            <div class="alert-content flx-align gap-2">
              <i class="las la-exclamation-triangle text-danger"></i>
              <span class="text-heading"><%= error[0] %></span>
            </div>
          </div>
        <% } %>

        <!-- Settings Navigation Tabs -->
        <div class="settings-tabs section-bg animate-fade-in">
          <div class="tabs-nav">
            <button class="tab-btn active" data-tab="profile">
              <i class="las la-user text-main"></i>
              <%= t('buyer.settings.tabs.profile') || 'Profile' %>
            </button>
            <button class="tab-btn" data-tab="account">
              <i class="las la-id-card text-main"></i>
              <%= t('buyer.settings.tabs.account') || 'Account' %>
            </button>
            <button class="tab-btn" data-tab="security">
              <i class="las la-shield-alt text-main"></i>
              <%= t('buyer.settings.tabs.security') || 'Security' %>
            </button>
            <button class="tab-btn" data-tab="notifications">
              <i class="las la-bell text-main"></i>
              <%= t('buyer.settings.tabs.notifications') || 'Notifications' %>
            </button>
            <button class="tab-btn" data-tab="preferences">
              <i class="las la-paint-brush text-main"></i>
              <%= t('buyer.settings.tabs.preferences') || 'Preferences' %>
            </button>
          </div>
        </div>

        <!-- Settings Content Sections -->
        
        <!-- Profile Settings -->
        <div id="profile-section" class="settings-section active section-bg animate-fade-in">
          <form id="profile-form" action="/buyer/api/settings/profile" method="POST" enctype="multipart/form-data">
            <div class="settings-card">
              <div class="card-header">
                <h3 class="card-title text-heading flx-align gap-2">
                  <i class="las la-building text-main"></i>
                  <%= t('buyer.settings.profile.title') || 'Company Information' %>
                </h3>
                <p class="card-description text-gray-600">
                  <%= t('buyer.settings.profile.description') || 'Update your company details and contact information' %>
                </p>
              </div>
              
              <div class="card-body">
                <div class="form-grid">
                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.companyName') || 'Company Name' %> *
                    </label>
                    <input type="text" name="companyName" class="form-control" 
                           value="<%= currentUser.companyName || '' %>" 
                           placeholder="<%= t('buyer.settings.profile.companyNamePlaceholder') || 'Enter your company name' %>" required>
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.contactPerson') || 'Contact Person' %>
                    </label>
                    <input type="text" name="contactPerson" class="form-control" 
                           value="<%= currentUser.contactPerson || '' %>" 
                           placeholder="<%= t('buyer.settings.profile.contactPersonPlaceholder') || 'Primary contact person' %>">
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.email') || 'Email Address' %> *
                    </label>
                    <input type="email" name="email" class="form-control" 
                           value="<%= currentUser.email || '' %>" 
                           placeholder="<%= t('buyer.settings.profile.emailPlaceholder') || 'your@email.com' %>" required>
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.phone') || 'Phone Number' %>
                    </label>
                    <input type="tel" name="phone" class="form-control" 
                           value="<%= currentUser.phone || '' %>" 
                           placeholder="<%= t('buyer.settings.profile.phonePlaceholder') || '+998 90 123 45 67' %>">
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.country') || 'Country' %>
                    </label>
                    <select name="country" class="form-control">
                      <option value=""><%= t('buyer.settings.profile.selectCountry') || 'Select Country' %></option>
                      <option value="UZ" <%= currentUser.country === 'Uzbekistan' ? 'selected' : '' %>>🇺🇿 Uzbekistan</option>
                      <option value="US" <%= currentUser.country === 'United States' ? 'selected' : '' %>>🇺🇸 United States</option>
                      <option value="RU" <%= currentUser.country === 'Russia' ? 'selected' : '' %>>🇷🇺 Russia</option>
                      <option value="TR" <%= currentUser.country === 'Turkey' ? 'selected' : '' %>>🇹🇷 Turkey</option>
                      <option value="CN" <%= currentUser.country === 'China' ? 'selected' : '' %>>🇨🇳 China</option>
                      <option value="KZ" <%= currentUser.country === 'Kazakhstan' ? 'selected' : '' %>>🇰🇿 Kazakhstan</option>
                      <option value="KG" <%= currentUser.country === 'Kyrgyzstan' ? 'selected' : '' %>>🇰🇬 Kyrgyzstan</option>
                      <option value="TJ" <%= currentUser.country === 'Tajikistan' ? 'selected' : '' %>>🇹🇯 Tajikistan</option>
                      <option value="TM" <%= currentUser.country === 'Turkmenistan' ? 'selected' : '' %>>🇹🇲 Turkmenistan</option>
                      <option value="AF" <%= currentUser.country === 'Afghanistan' ? 'selected' : '' %>>🇦🇫 Afghanistan</option>
                      <option value="IR" <%= currentUser.country === 'Iran' ? 'selected' : '' %>>🇮🇷 Iran</option>
                      <option value="PK" <%= currentUser.country === 'Pakistan' ? 'selected' : '' %>>🇵🇰 Pakistan</option>
                      <option value="IN" <%= currentUser.country === 'India' ? 'selected' : '' %>>🇮🇳 India</option>
                      <option value="MN" <%= currentUser.country === 'Mongolia' ? 'selected' : '' %>>🇲🇳 Mongolia</option>
                      <option value="AZ" <%= currentUser.country === 'Azerbaijan' ? 'selected' : '' %>>🇦🇿 Azerbaijan</option>
                      <option value="GE" <%= currentUser.country === 'Georgia' ? 'selected' : '' %>>🇬🇪 Georgia</option>
                      <option value="AM" <%= currentUser.country === 'Armenia' ? 'selected' : '' %>>🇦🇲 Armenia</option>
                      <option value="GB" <%= currentUser.country === 'United Kingdom' ? 'selected' : '' %>>🇬🇧 United Kingdom</option>
                      <option value="DE" <%= currentUser.country === 'Germany' ? 'selected' : '' %>>🇩🇪 Germany</option>
                      <option value="FR" <%= currentUser.country === 'France' ? 'selected' : '' %>>🇫🇷 France</option>
                      <option value="IT" <%= currentUser.country === 'Italy' ? 'selected' : '' %>>🇮🇹 Italy</option>
                      <option value="ES" <%= currentUser.country === 'Spain' ? 'selected' : '' %>>🇪🇸 Spain</option>
                      <option value="NL" <%= currentUser.country === 'Netherlands' ? 'selected' : '' %>>🇳🇱 Netherlands</option>
                      <option value="BE" <%= currentUser.country === 'Belgium' ? 'selected' : '' %>>🇧🇪 Belgium</option>
                      <option value="CH" <%= currentUser.country === 'Switzerland' ? 'selected' : '' %>>🇨🇭 Switzerland</option>
                      <option value="AT" <%= currentUser.country === 'Austria' ? 'selected' : '' %>>🇦🇹 Austria</option>
                      <option value="SE" <%= currentUser.country === 'Sweden' ? 'selected' : '' %>>🇸🇪 Sweden</option>
                      <option value="NO" <%= currentUser.country === 'Norway' ? 'selected' : '' %>>🇳🇴 Norway</option>
                      <option value="DK" <%= currentUser.country === 'Denmark' ? 'selected' : '' %>>🇩🇰 Denmark</option>
                      <option value="FI" <%= currentUser.country === 'Finland' ? 'selected' : '' %>>🇫🇮 Finland</option>
                      <option value="PL" <%= currentUser.country === 'Poland' ? 'selected' : '' %>>🇵🇱 Poland</option>
                      <option value="CZ" <%= currentUser.country === 'Czech Republic' ? 'selected' : '' %>>🇨🇿 Czech Republic</option>
                      <option value="HU" <%= currentUser.country === 'Hungary' ? 'selected' : '' %>>🇭🇺 Hungary</option>
                      <option value="RO" <%= currentUser.country === 'Romania' ? 'selected' : '' %>>🇷🇴 Romania</option>
                      <option value="BG" <%= currentUser.country === 'Bulgaria' ? 'selected' : '' %>>🇧🇬 Bulgaria</option>
                      <option value="GR" <%= currentUser.country === 'Greece' ? 'selected' : '' %>>🇬🇷 Greece</option>
                      <option value="PT" <%= currentUser.country === 'Portugal' ? 'selected' : '' %>>🇵🇹 Portugal</option>
                      <option value="IE" <%= currentUser.country === 'Ireland' ? 'selected' : '' %>>🇮🇪 Ireland</option>
                      <option value="CA" <%= currentUser.country === 'Canada' ? 'selected' : '' %>>🇨🇦 Canada</option>
                      <option value="AU" <%= currentUser.country === 'Australia' ? 'selected' : '' %>>🇦🇺 Australia</option>
                      <option value="JP" <%= currentUser.country === 'Japan' ? 'selected' : '' %>>🇯🇵 Japan</option>
                      <option value="KR" <%= currentUser.country === 'South Korea' ? 'selected' : '' %>>🇰🇷 South Korea</option>
                      <option value="SG" <%= currentUser.country === 'Singapore' ? 'selected' : '' %>>🇸🇬 Singapore</option>
                      <option value="MY" <%= currentUser.country === 'Malaysia' ? 'selected' : '' %>>🇲🇾 Malaysia</option>
                      <option value="TH" <%= currentUser.country === 'Thailand' ? 'selected' : '' %>>🇹🇭 Thailand</option>
                      <option value="VN" <%= currentUser.country === 'Vietnam' ? 'selected' : '' %>>🇻🇳 Vietnam</option>
                      <option value="PH" <%= currentUser.country === 'Philippines' ? 'selected' : '' %>>🇵🇭 Philippines</option>
                      <option value="ID" <%= currentUser.country === 'Indonesia' ? 'selected' : '' %>>🇮🇩 Indonesia</option>
                      <option value="BR" <%= currentUser.country === 'Brazil' ? 'selected' : '' %>>🇧🇷 Brazil</option>
                      <option value="AR" <%= currentUser.country === 'Argentina' ? 'selected' : '' %>>🇦🇷 Argentina</option>
                      <option value="CL" <%= currentUser.country === 'Chile' ? 'selected' : '' %>>🇨🇱 Chile</option>
                      <option value="MX" <%= currentUser.country === 'Mexico' ? 'selected' : '' %>>🇲🇽 Mexico</option>
                      <option value="CO" <%= currentUser.country === 'Colombia' ? 'selected' : '' %>>🇨🇴 Colombia</option>
                      <option value="PE" <%= currentUser.country === 'Peru' ? 'selected' : '' %>>🇵🇪 Peru</option>
                      <option value="VE" <%= currentUser.country === 'Venezuela' ? 'selected' : '' %>>🇻🇪 Venezuela</option>
                      <option value="ZA" <%= currentUser.country === 'South Africa' ? 'selected' : '' %>>🇿🇦 South Africa</option>
                      <option value="EG" <%= currentUser.country === 'Egypt' ? 'selected' : '' %>>🇪🇬 Egypt</option>
                      <option value="MA" <%= currentUser.country === 'Morocco' ? 'selected' : '' %>>🇲🇦 Morocco</option>
                      <option value="NG" <%= currentUser.country === 'Nigeria' ? 'selected' : '' %>>🇳🇬 Nigeria</option>
                      <option value="KE" <%= currentUser.country === 'Kenya' ? 'selected' : '' %>>🇰🇪 Kenya</option>
                      <option value="GH" <%= currentUser.country === 'Ghana' ? 'selected' : '' %>>🇬🇭 Ghana</option>
                      <option value="ET" <%= currentUser.country === 'Ethiopia' ? 'selected' : '' %>>🇪🇹 Ethiopia</option>
                      <option value="UG" <%= currentUser.country === 'Uganda' ? 'selected' : '' %>>🇺🇬 Uganda</option>
                      <option value="TZ" <%= currentUser.country === 'Tanzania' ? 'selected' : '' %>>🇹🇿 Tanzania</option>
                      <option value="DZ" <%= currentUser.country === 'Algeria' ? 'selected' : '' %>>🇩🇿 Algeria</option>
                      <option value="TN" <%= currentUser.country === 'Tunisia' ? 'selected' : '' %>>🇹🇳 Tunisia</option>
                      <option value="LY" <%= currentUser.country === 'Libya' ? 'selected' : '' %>>🇱🇾 Libya</option>
                      <option value="SD" <%= currentUser.country === 'Sudan' ? 'selected' : '' %>>🇸🇩 Sudan</option>
                      <option value="SO" <%= currentUser.country === 'Somalia' ? 'selected' : '' %>>🇸🇴 Somalia</option>
                      <option value="DJ" <%= currentUser.country === 'Djibouti' ? 'selected' : '' %>>🇩🇯 Djibouti</option>
                      <option value="ER" <%= currentUser.country === 'Eritrea' ? 'selected' : '' %>>🇪🇷 Eritrea</option>
                      <option value="YE" <%= currentUser.country === 'Yemen' ? 'selected' : '' %>>🇾🇪 Yemen</option>
                      <option value="OM" <%= currentUser.country === 'Oman' ? 'selected' : '' %>>🇴🇲 Oman</option>
                      <option value="AE" <%= currentUser.country === 'UAE' ? 'selected' : '' %>>🇦🇪 UAE</option>
                      <option value="QA" <%= currentUser.country === 'Qatar' ? 'selected' : '' %>>🇶🇦 Qatar</option>
                      <option value="KW" <%= currentUser.country === 'Kuwait' ? 'selected' : '' %>>🇰🇼 Kuwait</option>
                      <option value="BH" <%= currentUser.country === 'Bahrain' ? 'selected' : '' %>>🇧🇭 Bahrain</option>
                      <option value="SA" <%= currentUser.country === 'Saudi Arabia' ? 'selected' : '' %>>🇸🇦 Saudi Arabia</option>
                      <option value="JO" <%= currentUser.country === 'Jordan' ? 'selected' : '' %>>🇯🇴 Jordan</option>
                      <option value="LB" <%= currentUser.country === 'Lebanon' ? 'selected' : '' %>>🇱🇧 Lebanon</option>
                      <option value="SY" <%= currentUser.country === 'Syria' ? 'selected' : '' %>>🇸🇾 Syria</option>
                      <option value="IQ" <%= currentUser.country === 'Iraq' ? 'selected' : '' %>>🇮🇶 Iraq</option>
                      <option value="IL" <%= currentUser.country === 'Israel' ? 'selected' : '' %>>🇮🇱 Israel</option>
                      <option value="PS" <%= currentUser.country === 'Palestine' ? 'selected' : '' %>>🇵🇸 Palestine</option>
                      <option value="CY" <%= currentUser.country === 'Cyprus' ? 'selected' : '' %>>🇨🇾 Cyprus</option>
                      <option value="MT" <%= currentUser.country === 'Malta' ? 'selected' : '' %>>🇲🇹 Malta</option>
                    </select>
                  </div>

                  <div class="form-group full-width">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.profile.address') || 'Business Address' %>
                    </label>
                    <textarea name="address" class="form-control" rows="3" 
                              placeholder="<%= t('buyer.settings.profile.addressPlaceholder') || 'Enter your full business address' %>"><%= currentUser.address || '' %></textarea>
                  </div>
                </div>
              </div>
              
              <div class="card-footer">
                <button type="submit" class="btn btn-main pill">
                  <span class="icon-left icon">
                    <i class="las la-save"></i>
                  </span>
                  <%= t('buyer.settings.save') || 'Save Changes' %>
                </button>
              </div>
            </div>
          </form>
        </div>

        <!-- Account Settings -->
        <div id="account-section" class="settings-section section-bg">
          <div class="settings-card">
            <div class="card-header">
              <h3 class="card-title text-heading flx-align gap-2">
                <i class="las la-globe text-main"></i>
                <%= t('buyer.settings.account.title') || 'Regional Settings' %>
              </h3>
              <p class="card-description text-gray-600">
                <%= t('buyer.settings.account.description') || 'Configure your language, timezone and regional preferences' %>
              </p>
            </div>
            
            <div class="card-body">
              <div class="form-grid">
                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.account.language') || 'Language' %>
                  </label>
                  <select id="language-select" class="form-control">
                    <option value="uz" <%= lng === 'uz' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.uzbek') || '🇺🇿 O\'zbekcha' %></option>
                    <option value="en" <%= lng === 'en' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.english') || '🇺🇸 English' %></option>
                    <option value="ru" <%= lng === 'ru' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.russian') || '🇷🇺 Русский' %></option>
                    <option value="tr" <%= lng === 'tr' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.turkish') || '🇹🇷 Türkçe' %></option>
                    <option value="fa" <%= lng === 'fa' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.persian') || '🇮🇷 فارسی' %></option>
                    <option value="zh" <%= lng === 'zh' ? 'selected' : '' %>><%= t('buyer.settings.preferences.languages.chinese') || '🇨🇳 中文' %></option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.account.timezone') || 'Timezone' %>
                  </label>
                  <select name="timezone" class="form-control">
                    <option value="Asia/Tashkent" selected><%= t('buyer.settings.preferences.timezones.tashkent') || 'Asia/Tashkent (UTC+5)' %></option>
                    <option value="UTC"><%= t('buyer.settings.preferences.timezones.utc') || 'UTC (UTC+0)' %></option>
                    <option value="America/New_York"><%= t('buyer.settings.preferences.timezones.newyork') || 'America/New_York (UTC-5)' %></option>
                    <option value="Europe/London"><%= t('buyer.settings.preferences.timezones.london') || 'Europe/London (UTC+0)' %></option>
                    <option value="Asia/Shanghai"><%= t('buyer.settings.preferences.timezones.shanghai') || 'Asia/Shanghai (UTC+8)' %></option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.currency') || 'Preferred Currency' %>
                  </label>
                  <select name="currency" class="form-control">
                    <option value="UZS" selected><%= t('buyer.settings.preferences.currencies.uzs') || 'UZS - Uzbek Som' %></option>
                    <option value="USD"><%= t('buyer.settings.preferences.currencies.usd') || 'USD - US Dollar' %></option>
                    <option value="EUR"><%= t('buyer.settings.preferences.currencies.eur') || 'EUR - Euro' %></option>
                    <option value="RUB"><%= t('buyer.settings.preferences.currencies.rub') || 'RUB - Russian Ruble' %></option>
                    <option value="CNY"><%= t('buyer.settings.preferences.currencies.cny') || 'CNY - Chinese Yuan' %></option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Security Settings -->
        <div id="security-section" class="settings-section section-bg">
          <form id="password-form" action="/buyer/api/settings/password" method="POST">
            <div class="settings-card">
              <div class="card-header">
                <h3 class="card-title text-heading flx-align gap-2">
                  <i class="las la-key text-main"></i>
                  <%= t('buyer.settings.security.password') || 'Change Password' %>
                </h3>
                <p class="card-description text-gray-600">
                  <%= t('buyer.settings.security.passwordDescription') || 'Update your password to keep your account secure' %>
                </p>
              </div>
              
              <div class="card-body">
                <div class="security-notice">
                  <div class="notice-content flx-align gap-2">
                    <i class="las la-info-circle text-info"></i>
                    <span class="text-gray-600">
                      <%= t('buyer.settings.security.passwordHint') || 'Your password should be at least 6 characters long and include a mix of letters and numbers.' %>
                    </span>
                  </div>
                </div>

                <div class="form-grid">
                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.security.currentPassword') || 'Current Password' %>
                    </label>
                    <div class="password-input-wrapper">
                      <input type="password" name="currentPassword" id="currentPassword" class="form-control" 
                             placeholder="<%= t('buyer.settings.security.currentPasswordPlaceholder') || 'Enter your current password' %>" required>
                      <button type="button" class="password-toggle-btn" data-target="currentPassword">
                        <i class="las la-eye"></i>
                      </button>
                    </div>
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.security.newPassword') || 'New Password' %>
                    </label>
                    <div class="password-input-wrapper">
                      <input type="password" name="newPassword" id="newPassword" class="form-control" 
                             placeholder="<%= t('buyer.settings.security.newPasswordPlaceholder') || 'Enter new password' %>" required>
                      <button type="button" class="password-toggle-btn" data-target="newPassword">
                        <i class="las la-eye"></i>
                      </button>
                      <button type="button" class="password-generate-btn" data-target="newPassword">
                        <i class="las la-magic"></i>
                      </button>
                    </div>
                    <div class="password-strength-meter">
                      <div class="strength-bar">
                        <div class="strength-fill" id="newPasswordStrength"></div>
                      </div>
                      <span class="strength-text" id="newPasswordStrengthText"><%= t('buyer.settings.security.passwordStrength') || 'Password strength' %></span>
                    </div>
                    <div class="password-requirements" id="newPasswordRequirements">
                      <div class="requirement" data-requirement="length">
                        <i class="las la-circle"></i>
                        <span><%= t('buyer.settings.security.requirementLength') || 'At least 8 characters' %></span>
                      </div>
                      <div class="requirement" data-requirement="uppercase">
                        <i class="las la-circle"></i>
                        <span><%= t('buyer.settings.security.requirementUppercase') || 'One uppercase letter' %></span>
                      </div>
                      <div class="requirement" data-requirement="lowercase">
                        <i class="las la-circle"></i>
                        <span><%= t('buyer.settings.security.requirementLowercase') || 'One lowercase letter' %></span>
                      </div>
                      <div class="requirement" data-requirement="number">
                        <i class="las la-circle"></i>
                        <span><%= t('buyer.settings.security.requirementNumber') || 'One number' %></span>
                      </div>
                      <div class="requirement" data-requirement="special">
                        <i class="las la-circle"></i>
                        <span><%= t('buyer.settings.security.requirementSpecial') || 'One special character' %></span>
                      </div>
                    </div>
                  </div>

                  <div class="form-group">
                    <label class="form-label text-heading">
                      <%= t('buyer.settings.security.confirmPassword') || 'Confirm New Password' %>
                    </label>
                    <div class="password-input-wrapper">
                      <input type="password" name="confirmPassword" id="confirmPassword" class="form-control" 
                             placeholder="<%= t('buyer.settings.security.confirmPasswordPlaceholder') || 'Confirm your new password' %>" required>
                      <button type="button" class="password-toggle-btn" data-target="confirmPassword">
                        <i class="las la-eye"></i>
                      </button>
                    </div>
                    <div class="password-match-indicator" id="passwordMatchIndicator">
                      <i class="las la-circle"></i>
                      <span><%= t('buyer.settings.security.passwordsMustMatch') || 'Passwords must match' %></span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="card-footer">
                <button type="submit" class="btn btn-main pill">
                  <span class="icon-left icon">
                    <i class="las la-shield-alt"></i>
                  </span>
                  <%= t('buyer.settings.security.updatePassword') || 'Update Password' %>
                </button>
              </div>
            </div>
          </form>
        </div>

        <!-- Notification Settings -->
        <div id="notifications-section" class="settings-section section-bg">
          <div class="settings-card">
            <div class="card-header">
              <h3 class="card-title text-heading flx-align gap-2">
                <i class="las la-envelope text-main"></i>
                <%= t('buyer.settings.notifications.title') || 'Email Notifications' %>
              </h3>
              <p class="card-description text-gray-600">
                <%= t('buyer.settings.notifications.description') || 'Choose how and when you want to receive notifications' %>
              </p>
            </div>
            
            <div class="card-body">
              <div class="notification-settings">
                <div class="notification-item">
                  <div class="notification-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.notifications.email') || 'Email Notifications' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.notifications.emailDescription') || 'Receive notifications about your order status and delivery updates' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="emailNotifications" data-setting="emailNotifications" <%= (currentUser.emailNotifications === true || currentUser.emailNotifications === 'true') ? 'checked' : '' %>>
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                <div class="notification-item">
                  <div class="notification-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.notifications.orderUpdates') || 'Order Updates' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.notifications.orderUpdatesDescription') || 'Get notified about order status changes, shipping updates, and deliveries' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="orderUpdates" data-setting="orderUpdates" <%= (currentUser.orderUpdates === true || currentUser.orderUpdates === 'true') ? 'checked' : '' %>>
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                <div class="notification-item">
                  <div class="notification-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.notifications.marketing') || 'Marketing Communications' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.notifications.marketingDescription') || 'Receive promotional offers, new product announcements, and market insights' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="marketingEmails" data-setting="marketingEmails" <%= (currentUser.marketingEmails === true || currentUser.marketingEmails === 'true') ? 'checked' : '' %>>
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                <div class="notification-item">
                  <div class="notification-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.notifications.priceAlerts') || 'Price Alerts' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.notifications.priceAlertsDescription') || 'Get notified when product prices change or special discounts are available' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="priceAlerts" data-setting="priceAlerts" <%= (currentUser.priceAlerts === true || currentUser.priceAlerts === 'true') ? 'checked' : '' %>>
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                <div class="notification-item">
                  <div class="notification-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.notifications.weeklyDigest') || 'Weekly Digest' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.notifications.weeklyDigestDescription') || 'Receive a weekly summary of new products, market trends, and platform updates' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="weeklyDigest" data-setting="weeklyDigest" <%= (currentUser.weeklyDigest === true || currentUser.weeklyDigest === 'true') ? 'checked' : '' %>>
                    <span class="toggle-slider"></span>
                  </label>
                </div>
              </div>
            </div>
            
            <div class="card-footer">
              <div class="notification-status">
                <span class="status-text" id="notification-status"></span>
              </div>
            </div>
          </div>
        </div>

        <!-- Preferences Settings -->
        <div id="preferences-section" class="settings-section section-bg">
          <form id="preferences-form" action="/buyer/api/settings/preferences" method="POST">
            <div class="settings-card">
            <div class="card-header">
              <h3 class="card-title text-heading flx-align gap-2">
                <i class="las la-palette text-main"></i>
                <%= t('buyer.settings.preferences.title') || 'Display Preferences' %>
              </h3>
              <p class="card-description text-gray-600">
                <%= t('buyer.settings.preferences.description') || 'Customize your viewing experience and interface preferences' %>
              </p>
            </div>
            
            <div class="card-body">
              <div class="preference-settings">
                <div class="preference-item">
                  <div class="preference-info">
                    <h4 class="text-heading">
                      <%= t('buyer.settings.preferences.darkMode') || 'Dark Mode' %>
                    </h4>
                    <p class="text-gray-600">
                      <%= t('buyer.settings.preferences.darkModeDescription') || 'Switch to a darker theme that\'s easier on your eyes' %>
                    </p>
                  </div>
                  <label class="toggle-switch">
                    <input type="checkbox" id="dark-mode-toggle">
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                                  <div class="preference-item">
                    <div class="preference-info">
                      <h4 class="text-heading">
                        <%= t('buyer.settings.preferences.compactView') || 'Compact View' %>
                      </h4>
                      <p class="text-gray-600">
                        <%= t('buyer.settings.preferences.compactViewDescription') || 'Show more content by reducing spacing and padding' %>
                      </p>
                    </div>
                  <label class="toggle-switch">
                    <input type="checkbox" name="compactView">
                    <span class="toggle-slider"></span>
                  </label>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.language') || 'Language' %>
                  </label>
                  <select name="language" class="form-control">
                    <option value="uz" <%= (user.preferredLanguage === 'uz') ? 'selected' : '' %>>O'zbekcha</option>
                    <option value="en" <%= (user.preferredLanguage === 'en') ? 'selected' : '' %>>English</option>
                    <option value="ru" <%= (user.preferredLanguage === 'ru') ? 'selected' : '' %>>Русский</option>
                    <option value="zh" <%= (user.preferredLanguage === 'zh') ? 'selected' : '' %>>中文</option>
                    <option value="tr" <%= (user.preferredLanguage === 'tr') ? 'selected' : '' %>>Türkçe</option>
                    <option value="fa" <%= (user.preferredLanguage === 'fa') ? 'selected' : '' %>>فارسی</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.theme') || 'Theme' %>
                  </label>
                  <select name="theme" class="form-control">
                    <option value="light" <%= (!user.preferences?.theme || user.preferences?.theme === 'light') ? 'selected' : '' %>>Light Mode</option>
                    <option value="dark" <%= (user.preferences?.theme === 'dark') ? 'selected' : '' %>>Dark Mode</option>
                    <option value="system" <%= (user.preferences?.theme === 'system') ? 'selected' : '' %>>Follow System</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.timezone') || 'Timezone' %>
                  </label>
                  <select name="timezone" class="form-control">
                    <option value="Asia/Tashkent" <%= (!user.preferences?.timezone || user.preferences?.timezone === 'Asia/Tashkent') ? 'selected' : '' %>>Asia/Tashkent (UTC+5)</option>
                    <option value="Asia/Dubai" <%= (user.preferences?.timezone === 'Asia/Dubai') ? 'selected' : '' %>>Asia/Dubai (UTC+4)</option>
                    <option value="Europe/Moscow" <%= (user.preferences?.timezone === 'Europe/Moscow') ? 'selected' : '' %>>Europe/Moscow (UTC+3)</option>
                    <option value="UTC" <%= (user.preferences?.timezone === 'UTC') ? 'selected' : '' %>>UTC (GMT+0)</option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.currency') || 'Currency' %>
                  </label>
                  <select name="currency" class="form-control">
                                    <option value="USD" <%= (user.preferences?.currency === 'USD') ? 'selected' : '' %>><%= t('buyer.settings.preferences.currencies.usd') || 'USD - US Dollar' %></option>
                <option value="UZS" <%= (user.preferences?.currency === 'UZS') ? 'selected' : '' %>><%= t('buyer.settings.preferences.currencies.uzs') || 'UZS - O\'zbek so\'mi' %></option>
                <option value="EUR" <%= (user.preferences?.currency === 'EUR') ? 'selected' : '' %>><%= t('buyer.settings.preferences.currencies.eur') || 'EUR - Euro' %></option>
                <option value="RUB" <%= (user.preferences?.currency === 'RUB') ? 'selected' : '' %>><%= t('buyer.settings.preferences.currencies.rub') || 'RUB - Russian Ruble' %></option>
                  </select>
                </div>

                <div class="form-group">
                  <label class="form-label text-heading">
                    <%= t('buyer.settings.preferences.itemsPerPage') || 'Items per Page' %>
                  </label>
                  <select name="itemsPerPage" class="form-control">
                    <option value="10" <%= (user.preferences?.itemsPerPage === 10) ? 'selected' : '' %>>10 items</option>
                    <option value="20" <%= (!user.preferences?.itemsPerPage || user.preferences?.itemsPerPage === 20) ? 'selected' : '' %>>20 items</option>
                    <option value="50" <%= (user.preferences?.itemsPerPage === 50) ? 'selected' : '' %>>50 items</option>
                    <option value="100" <%= (user.preferences?.itemsPerPage === 100) ? 'selected' : '' %>>100 items</option>
                  </select>
                </div>
              </div>

              <div class="form-actions">
                <button type="submit" class="btn btn-main">
                  <i class="las la-save"></i>
                  <%= t('buyer.settings.preferences.savePreferences') || 'Save Preferences' %>
                </button>
              </div>
            </div>
          </div>
          </form>
        </div>

      </div>
    </div>
  </div>
</main>

<style>
/* ================================
   BUYER SETTINGS PAGE STYLES
   ================================ */

/* Settings Wrapper */
.buyer-settings-wrapper {
     padding: var(--section-padding, 40px) 0 80px;
    min-height: calc(100vh - 200px);
    background: hsl(var(--body-bg));
    position: relative;
    z-index: 1;
}

/* Settings Header */
.buyer-settings-header {
  background: hsl(var(--static-white));
  border: 1px solid hsl(var(--border-color));
  border-radius: var(--border-radius-md, 12px);
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: var(--box-shadow);
  transition: all 0.3s ease;
}

.settings-header-content {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.settings-icon {
  width: 80px;
  height: 80px;
  background: linear-gradient(135deg, hsl(var(--main)), hsl(var(--main-two)));
  border-radius: var(--border-radius-md, 12px);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.settings-icon i {
  font-size: 2.5rem;
  color: hsl(var(--static-white));
}

.settings-info h2 {
  margin: 0 0 0.5rem 0;
  font-family: var(--heading-font);
  font-size: 1.75rem;
  font-weight: 600;
}

.settings-info p {
  margin: 0;
  font-size: 1rem;
}

/* Alert Messages */
.alert-message {
  background: hsl(var(--static-white));
  border: 1px solid hsl(var(--border-color));
  border-radius: var(--border-radius-md, 12px);
  padding: 1rem 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: var(--box-shadow);
}

.alert-message.success-message {
  border-left: 4px solid hsl(var(--success));
}

.alert-message.error-message {
  border-left: 4px solid hsl(var(--danger));
}

.alert-content {
  font-size: 0.95rem;
  font-weight: 500;
}

/* Settings Tabs */
.settings-tabs {
  background: hsl(var(--static-white));
  border: 1px solid hsl(var(--border-color));
  border-radius: var(--border-radius-md, 12px);
  padding: 0;
  margin-bottom: 2rem;
  box-shadow: var(--box-shadow);
  overflow: hidden;
}

.tabs-nav {
  display: flex;
  gap: 0;
  overflow-x: auto;
}

.tab-btn {
  padding: 1rem 1.5rem;
  background: transparent;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 500;
  color: hsl(var(--body-color));
  white-space: nowrap;
  border-bottom: 3px solid transparent;
  font-size: 0.9rem;
}

.tab-btn:hover {
  color: hsl(var(--main));
}

.tab-btn.active {
  color: hsl(var(--main));
  border-bottom-color: hsl(var(--main));
}

.tab-btn i {
  font-size: 1.1rem;
}

/* Settings Sections */
.settings-section {
  display: none;
  animation: fadeInUp 0.4s ease;
}

.settings-section.active {
  display: block;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Settings Cards */
.settings-card {
  background: var(--static-white) !important;
  border: 1px solid hsl(var(--border-color)) !important;
  border-radius: var(--border-radius-md, 12px);
  box-shadow: var(--box-shadow);
  overflow: hidden;
  transition: all 0.3s ease;
}

.settings-card:hover {
  border-color: hsl(var(--main));
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

.card-header {
  padding: 2rem 2rem 1rem;
  border-bottom: 1px solid hsl(var(--border-color));
}

.card-title {
  margin: 0 0 0.5rem 0;
  font-family: var(--heading-font);
  font-size: 1.25rem;
  font-weight: 600;
}

.card-description {
  margin: 0;
  font-size: 0.9rem;
  line-height: 1.5;
}

.card-body {
  padding: 2rem;
}

.card-footer {
  padding: 1.5rem 2rem;
  border-top: 1px solid hsl(var(--border-color));
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
}

/* Form Styles */
.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: 1.5rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.form-group.full-width {
  grid-column: 1 / -1;
}

.form-label {
  font-weight: 600;
  font-size: 0.9rem;
  color: hsl(var(--heading-color));
  margin-bottom: 0.5rem;
}

.form-control {
  padding: 0.75rem 1rem;
  border: 1px solid hsl(var(--border-color));
  border-radius: var(--border-radius-sm, 8px);
  font-size: 0.95rem;
  background: hsl(var(--static-white));
  color: hsl(var(--heading-color));
  transition: all 0.3s ease;
  font-family: var(--body-font);
}

.form-control:focus {
  outline: none;
  border-color: hsl(var(--main));
  box-shadow: 0 0 0 3px hsla(var(--main), 0.1);
}

.form-control::placeholder {
  color: hsl(var(--gray-three));
}

/* Security Notice */
.security-notice {
  background: hsl(var(--info-light));
  border: 1px solid hsl(var(--info));
  border-radius: var(--border-radius-sm, 8px);
  padding: 1rem;
  margin-bottom: 1.5rem;
}

.notice-content {
  font-size: 0.9rem;
}

/* Notification Settings */
.notification-settings,
.preference-settings {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.notification-item,
.preference-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border: 1px solid hsl(var(--border-color));
  border-radius: var(--border-radius-sm, 8px);
  border-color: hsl(var(--main));
  background: hsl(var(--static-white));
  transition: all 0.3s ease;
}


.notification-info h4,
.preference-info h4 {
  margin: 0 0 0.25rem 0;
  font-size: 1rem;
  font-weight: 600;
}

.notification-info p,
.preference-info p {
  margin: 0;
  font-size: 0.85rem;
  line-height: 1.4;
}

/* Professional Toggle Switch */
.toggle-switch {
  position: relative;
  width: 50px;
  height: 26px;
  background: #e5e7eb !important;
  border-radius: 13px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  flex-shrink: 0;
  border: 2px solid transparent !important;
}

.toggle-switch:hover {
  background: #d1d5db;
}

.toggle-switch input {
  opacity: 0;
  width: 0;
  height: 0;
  position: absolute;
}

.toggle-slider {
  position: absolute;
  top: 2px;
  left: 2px;
  width: 18px;
  height: 18px;
  background: #ffffff;
  border-radius: 50%;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  z-index: 2;
}

/* Checked State - Blue Background */
.toggle-switch input:checked + .toggle-slider {
  transform: translateX(24px);
  background: #ffffff;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

/* Professional Checked State - High Specificity */
.toggle-switch input:checked ~ .toggle-switch,
.toggle-switch.toggle-active,
.toggle-switch input:checked + .toggle-slider ~ .toggle-switch {
  background: #3b82f6 !important;
  border-color: #3b82f6 !important;
}

/* Alternative: Direct checked state with higher specificity */
.toggle-switch input:checked ~ .toggle-switch {
  background: #3b82f6 !important;
  border-color: #3b82f6 !important;
}

/* Dark mode support */
[data-theme='dark'] .toggle-switch {
  background: #4b5563;
}

[data-theme='dark'] .toggle-switch:hover {
  background: #6b7280;
}

[data-theme='dark'] .toggle-switch input:checked ~ .toggle-switch,
[data-theme='dark'] .toggle-switch:has(input:checked) {
  background: #3b82f6 !important;
}

[data-theme='dark'] .toggle-slider {
  background: #f9fafb;
}

[data-theme='dark'] .toggle-switch input:checked + .toggle-slider {
  background: #ffffff;
}

/* Professional Toggle Switch Active State */
.toggle-switch.active,
.toggle-switch.toggle-active {
  background: #3b82f6 !important;
  border-color: #3b82f6 !important;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.toggle-switch.active:hover,
.toggle-switch.toggle-active:hover {
  background: #2563eb !important;
  border-color: #2563eb !important;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2);
}

/* Force blue background for checked state */
.toggle-switch input:checked ~ .toggle-switch,
.toggle-switch input:checked + .toggle-slider ~ .toggle-switch {
  background: #3b82f6 !important;
  border-color: #3b82f6 !important;
}

/* Smooth transitions for all states */
.toggle-switch,
.toggle-slider {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Focus states for accessibility */
.toggle-switch input:focus + .toggle-slider {
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

/* Disabled state */
.toggle-switch input:disabled + .toggle-slider {
  opacity: 0.5;
  cursor: not-allowed;
}

.toggle-switch input:disabled ~ .toggle-switch {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Loading state */
.toggle-switch.loading {
  position: relative;
  pointer-events: none;
}

.toggle-switch.loading::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 16px;
  height: 16px;
  margin: -8px 0 0 -8px;
  border: 2px solid transparent;
  border-top: 2px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  z-index: 10;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.toggle-switch.loading .toggle-slider {
  opacity: 0.3;
}

/* Notification Status Styling */
.notification-status {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 40px;
  padding: 8px 16px;
}

.status-text {
  font-size: 14px;
  font-weight: 500;
  transition: all 0.3s ease;
  opacity: 0;
}

.status-text.loading {
  opacity: 1;
  color: #3b82f6;
}

.status-text.success {
  opacity: 1;
  color: #10b981;
}

.status-text.error {
  opacity: 1;
  color: #ef4444;
}

.status-text.info {
  opacity: 1;
  color: #6b7280;
}

/* Header Z-Index Fix for Settings */
.header {
  z-index: 99 !important;
}

.header.fixed-header {
  z-index: 99 !important;
  box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}

.user-dropdown {
  z-index: 100 !important;
}

.lang-dropdown {
  z-index: 100 !important;
}

[data-theme="dark"] {
  .btn-main {
    background-color: white !important;
    border: 2px solid hsl(var(--main)) !important;
    color: hsl(var(--main)) !important;
    z-index: 1;
}
}

/* Dark Mode Support - Professional Implementation */
[data-theme="light"] {
  /* Main wrapper background */
  .buyer-settings-wrapper {
    background: var(--dark-black-one) !important;
  }
}

[data-theme="light"] .buyer-settings-wrapper {
  /* Main containers */
  .buyer-settings-header,
  .settings-tabs,
  .settings-card,
  .alert-message {
    background: var(--dark-black-three) !important;
    border-color: var(--dark-black-five) !important;
  }

  /* Settings Sections - Content Areas */
  .settings-section {
    background: transparent !important;
  }

  .section-bg {
    background: transparent !important;
  }

  /* Settings Header */
  .settings-header-content h2,
  .settings-title {
    color: hsl(var(--static-white)) !important;
  }

  .settings-subtitle {
    color: hsl(var(--gray-four)) !important;
  }

  /* Tab Navigation */
  .tab-btn {
    color: hsl(var(--gray-four)) !important;
  }

  .tab-btn:hover,
  .tab-btn.active {
    color: hsl(var(--main)) !important;
  }

  /* Card Components */
  .card-header {
    border-color: var(--dark-black-five) !important;
  }

  .card-footer {
    background: var(--dark-black-two) !important;
    border-color: var(--dark-black-five) !important;
  }

  .card-title {
    color: hsl(var(--static-white)) !important;
  }

  .card-description {
    color: hsl(var(--gray-four)) !important;
  }

  /* Form Elements */
  .form-label {
    color: hsl(var(--static-white)) !important;
  }

  .form-control {
    background: var(--dark-black-two) !important;
    border-color: var(--dark-black-five) !important;
    color: hsl(var(--static-white)) !important;
  }

  .form-control:focus {
    border-color: hsl(var(--main)) !important;
    box-shadow: 0 0 0 3px hsla(var(--main), 0.2) !important;
  }

  .form-control::placeholder {
    color: hsl(var(--gray-three)) !important;
  }

  /* Select Dropdown */
  .form-control option {
    background: var(--dark-black-three) !important;
    color: hsl(var(--static-white)) !important;
  }

  /* Text Elements */
  .text-heading {
    color: hsl(var(--static-white)) !important;
  }

  .text-gray-600 {
    color: hsl(var(--gray-four)) !important;
  }

  /* Notification & Preference Items */
  .notification-item,
  .preference-item {
    background: var(--dark-black-two) !important;
    border-color: var(--dark-black-five) !important;
  }

  .notification-item:hover,
  .preference-item:hover {
    border-color: hsl(var(--main)) !important;
  }

  .notification-info h4,
  .preference-info h4 {
    color: hsl(var(--static-white)) !important;
  }

  .notification-info p,
  .preference-info p {
    color: hsl(var(--gray-four)) !important;
  }

  /* Form Groups in settings sections */
  .form-group {
    margin-bottom: 1.5rem !important;
  }

  .form-grid {
    display: grid !important;
    gap: 1.5rem !important;
  }

  /* Security Notice */
  .security-notice {
    background: var(--dark-black-two) !important;
    border-color: hsl(var(--info)) !important;
  }

  .notice-content span {
    color: hsl(var(--gray-four)) !important;
  }

  /* Toggle Switch */
  .toggle-switch {
    background: var(--dark-black-five) !important;
  }

  .toggle-switch input:checked ~ .toggle-switch,
  .toggle-switch:has(input:checked) {
    background: hsl(var(--main)) !important;
  }

  /* Alert Messages */
  .alert-content span {
    color: hsl(var(--static-white)) !important;
  }

  .alert-message.success-message {
    background: rgba(34, 197, 94, 0.15) !important;
    border-left-color: hsl(var(--success)) !important;
  }

  .alert-message.error-message {
    background: rgba(239, 68, 68, 0.15) !important;
    border-left-color: hsl(var(--danger)) !important;
  }

  /* Buttons */
  .btn:not(.btn-main) {
    background: var(--dark-black-five) !important;
    border-color: var(--dark-black-five) !important;
    color: hsl(var(--static-white)) !important;
  }

  .btn:not(.btn-main):hover {
    background: hsl(var(--main)) !important;
    border-color: hsl(var(--main)) !important;
  }

  /* Additional Text Elements */
  .settings-section h1,
  .settings-section h2,
  .settings-section h3,
  .settings-section h4,
  .settings-section h5,
  .settings-section h6 {
    color: hsl(var(--static-white)) !important;
  }

  .settings-section p,
  .settings-section span:not(.icon):not(.badge):not(.toggle-slider) {
    color: hsl(var(--gray-four)) !important;
  }

  /* Icons in settings */
  .settings-section .text-info {
    color: hsl(var(--info)) !important;
  }

  .settings-section .text-main {
    color: hsl(var(--main)) !important;
  }

  /* Toggle Switch Enhanced */
  .toggle-switch {
    background: var(--dark-black-five) !important;
    border: 1px solid var(--dark-black-five) !important;
  }


  /* Error and success messages */
  .alert-message .alert-content {
    color: hsl(var(--static-white)) !important;
  }
}

/* Responsive Design */
@media (max-width: 991px) {
  .buyer-settings-wrapper {
    padding: 80px 0;
  }

  .settings-header-content {
    flex-direction: column;
    text-align: center;
    gap: 1rem;
  }

  .settings-icon {
    width: 60px;
    height: 60px;
  }

  .settings-icon i {
    font-size: 1.8rem;
  }

  .settings-info h2 {
    font-size: 1.5rem;
  }

  .tabs-nav {
    flex-wrap: wrap;
  }

  .tab-btn {
    flex: 1;
    min-width: 120px;
    padding: 0.75rem 1rem;
    font-size: 0.85rem;
  }

  .form-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .card-header,
  .card-body {
    padding: 1.5rem;
  }

  .card-footer {
    padding: 1rem 1.5rem;
    flex-direction: column;
  }

  .card-footer .btn {
    width: 100%;
    justify-content: center;
  }

  .notification-item,
  .preference-item {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .notification-info,
  .preference-info {
    width: 100%;
  }
}

@media (max-width: 575px) {
  .buyer-settings-wrapper {
    padding: 60px 0;
  }

  .settings-tabs {
    margin: 0 -15px 2rem;
    border-radius: 0;
  }

  .tab-btn {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .tab-btn i {
    display: none;
  }
}
</style>

<!-- Settings JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize toggle switches immediately on page load
    function initializeToggleSwitches() {
        const toggleSwitches = document.querySelectorAll('.toggle-switch input[type="checkbox"]');
        
        toggleSwitches.forEach(toggle => {
            const toggleSwitch = toggle.closest('.toggle-switch');
            const settingName = toggle.getAttribute('data-setting');
            
            // Only process notification settings (ignore preferences toggles)
            if (settingName) {
                
                if (toggle.checked) {
                    toggleSwitch.style.setProperty('background', '#3b82f6', 'important');
                    toggleSwitch.style.setProperty('border-color', '#3b82f6', 'important');
                    toggleSwitch.classList.add('toggle-active');
                    toggleSwitch.classList.add('active');
                }
            } else {
                console.log(`⚠️ Toggle without data-setting: ${toggle.name || 'unnamed'}`);
            }
        });
    }
    
    // Initialize immediately
    initializeToggleSwitches();
    
    // Tab Navigation
    const tabBtns = document.querySelectorAll('.tab-btn');
    const sections = document.querySelectorAll('.settings-section');

    tabBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const tabId = this.dataset.tab;

            // Update tab buttons
            tabBtns.forEach(tab => tab.classList.remove('active'));
            this.classList.add('active');

            // Update sections
            sections.forEach(section => section.classList.remove('active'));
            document.getElementById(tabId + '-section').classList.add('active');

            // Update URL hash
            window.location.hash = tabId;
        });
    });

    // Handle initial hash
    if (window.location.hash) {
        const hash = window.location.hash.substring(1);
        const tabBtn = document.querySelector(`[data-tab="${hash}"]`);
        if (tabBtn) {
            tabBtn.click();
        }
    }

    // Language Change
    const languageSelect = document.getElementById('language-select');
    if (languageSelect) {
        languageSelect.addEventListener('change', function() {
            const newLang = this.value;
            const currentUrl = window.location.pathname;
            window.location.href = `/language/${newLang}?redirect=${encodeURIComponent(currentUrl)}`;
        });
    }

    // Dark Mode Toggle
    const darkModeToggle = document.getElementById('dark-mode-toggle');
    if (darkModeToggle) {
        // Set initial state
        const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
        darkModeToggle.checked = isDark;

        darkModeToggle.addEventListener('change', function() {
            const newTheme = this.checked ? 'dark' : 'light';
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        });
    }

    // REMOVED: Old form submission handler - replaced with professional handler below

    // Show Alert Function
    function showAlert(type, message) {
        const existingAlert = document.querySelector('.alert-message');
        if (existingAlert) {
            existingAlert.remove();
        }

        const alert = document.createElement('div');
        alert.className = `alert-message ${type}-message section-bg animate-fade-in`;
        alert.innerHTML = `
            <div class="alert-content flx-align gap-2">
                <i class="las la-${type === 'success' ? 'check' : 'exclamation'}-circle text-${type === 'success' ? 'success' : 'danger'}"></i>
                <span class="text-heading">${message}</span>
            </div>
        `;

        const content = document.querySelector('.col-lg-9');
        const firstSection = content.querySelector('.settings-tabs');
        content.insertBefore(alert, firstSection);

        setTimeout(() => alert.remove(), 5000);
    }

    // Professional Toggle Switch Handling
    const toggleSwitches = document.querySelectorAll('.toggle-switch input[type="checkbox"]');
    
    // Function to update toggle switch appearance
    function updateToggleSwitch(toggle, isChecked) {
        const toggleSwitch = toggle.closest('.toggle-switch');
        
        if (isChecked) {
            toggleSwitch.style.setProperty('background', '#3b82f6', 'important');
            toggleSwitch.style.setProperty('border-color', '#3b82f6', 'important');
            toggleSwitch.classList.add('toggle-active');
            toggleSwitch.classList.add('active');
        } else {
            toggleSwitch.style.removeProperty('background');
            toggleSwitch.style.removeProperty('border-color');
            toggleSwitch.classList.remove('toggle-active');
            toggleSwitch.classList.remove('active');
        }
    }
    
    // Professional Notification Settings Handler
    let notificationUpdateTimeout;
    const notificationStatus = document.getElementById('notification-status');
    
    function updateNotificationStatus(message, type = 'info') {
        if (notificationStatus) {
            notificationStatus.textContent = message;
            notificationStatus.className = `status-text ${type}`;
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                notificationStatus.textContent = '';
                notificationStatus.className = 'status-text';
            }, 3000);
        }
    }
    
    async function updateNotificationSetting(settingName, isEnabled) {
        const toggle = document.querySelector(`[data-setting="${settingName}"]`);
        const toggleSwitch = toggle?.closest('.toggle-switch');
        
        try {
            // Disable toggle during API call
            if (toggle) {
                toggle.disabled = true;
                toggleSwitch?.classList.add('loading');
            }
            
            updateNotificationStatus('Saving...', 'loading');
            
            // Get authentication token
            const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');
            
            const response = await fetch('/buyer/api/settings/notifications', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'Authorization': token ? `Bearer ${token}` : '',
                    'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || ''
                },
                credentials: 'include',
                body: JSON.stringify({
                    [settingName]: isEnabled
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                updateNotificationStatus('✅ Setting updated successfully', 'success');
                
                // Update user data in localStorage if provided
                if (result.data && result.data.user) {
                    const currentUserData = JSON.parse(localStorage.getItem('userData') || '{}');
                    const updatedUserData = { ...currentUserData, ...result.data.user };
                    localStorage.setItem('userData', JSON.stringify(updatedUserData));
                }
            } else {
                throw new Error(result.message || 'Failed to update setting');
            }
        } catch (error) {
           let errorMessage = '❌ Network error';
            if (error.message.includes('401')) {
                errorMessage = '❌ Session expired. Please login again.';
                setTimeout(() => {
                    window.location.href = '/auth/login';
                }, 2000);
            } else if (error.message.includes('403')) {
                errorMessage = '❌ Access denied';
            } else if (error.message.includes('500')) {
                errorMessage = '❌ Server error. Please try again.';
            }
            
            updateNotificationStatus(errorMessage, 'error');
            
            // Revert the toggle
            if (toggle) {
                toggle.checked = !isEnabled;
                updateToggleSwitch(toggle, toggle.checked);
            }
        } finally {
            // Re-enable toggle after API call
            if (toggle) {
                toggle.disabled = false;
                toggleSwitch?.classList.remove('loading');
            }
        }
    }
    
    toggleSwitches.forEach(toggle => {
        // Set initial state immediately
        updateToggleSwitch(toggle, toggle.checked);
        
        toggle.addEventListener('change', function() {
            const toggleSwitch = this.closest('.toggle-switch');
            const settingName = this.getAttribute('data-setting');
            const isEnabled = this.checked;
            
            // Validate setting name
            if (!settingName) {
               
                updateNotificationStatus('❌ Configuration error', 'error');
                return;
            }
            
            // Update appearance
            updateToggleSwitch(this, isEnabled);
            
            // Add visual feedback
            toggleSwitch.style.transform = 'scale(1.05)';
            setTimeout(() => {
                toggleSwitch.style.transform = 'scale(1)';
            }, 150);
            
            // Debounce API calls
            clearTimeout(notificationUpdateTimeout);
            notificationUpdateTimeout = setTimeout(() => {
                updateNotificationSetting(settingName, isEnabled);
            }, 500);
        });
    });
    
    // Professional error handling for network issues
    window.addEventListener('online', function() {
        updateNotificationStatus('✅ Connection restored', 'success');
    });
    
    window.addEventListener('offline', function() {
        updateNotificationStatus('❌ No internet connection', 'error');
    });
});
</script>

<!-- Buyer Token Manager -->
<script src="/js/buyer/buyer-token-manager.js"></script>

<!-- Settings Token Management -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize buyer token management for settings page
    if (window.buyerTokenManager) {
        // Setup token event listeners
        buyerTokenManager.on('token-refreshed', (data) => {
          
            // Also save updated user data if available
            if (data.data && data.data.user && data.data.user.companyType === 'distributor') {
                buyerTokenManager.saveUserDataToStorage(data.data.user);
            }
        });

        buyerTokenManager.on('auth-error', (data) => {
            
            if (data.reason === 'refresh-failed') {
                showAlert('error', 'Your session has expired. Please login again.');
                setTimeout(() => {
                    window.location.href = '/auth/login';
                }, 2000);
            }
        });

        // Enhanced API calls with token management
        const originalFetch = window.fetch;
        window.fetch = async function(url, options = {}) {
            // Check token status before API calls
            const tokenStatus = buyerTokenManager.getStatus();
            
            if (!tokenStatus.hasTokens) {
                
                window.location.href = '/auth/login';
                return;
            }

            // If token is about to expire, refresh first
            if (tokenStatus.expiresIn < 5 * 60 * 1000) { // 5 minutes
                await buyerTokenManager.forceRefresh();
            }

            // Proceed with original fetch
            return originalFetch(url, {
                ...options,
                credentials: 'include' // Always include cookies
            });
        };
        
        // Manually save current user data to localStorage on settings page load
        const settingsUserData = {
          id: "<%= user._id %>",
          name: "<%= user.companyName || user.name %>",
          email: "<%= user.email %>",
          role: "<%= user.role %>",
          userType: "user", // Company admins are userType 'user'
          companyType: "<%= user.companyType %>",
          companyName: "<%= user.companyName %>",
          phone: "<%= user.phone %>",
          country: "<%= user.country %>"
        };
        
        // Save to localStorage only for distributors
        if (settingsUserData.companyType === 'distributor') {
          try {
            localStorage.setItem('slex_buyer_user_data', JSON.stringify(settingsUserData));
            } catch (error) {
          }
        } else {
        }
    }

    // ===== PROFESSIONAL FORM SUBMISSION HANDLERS =====
    
    // Profile form submission
    const profileForm = document.getElementById('profile-form');
    if (profileForm) {
        profileForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await submitForm(this, 'Profile updated successfully');
        });
    }

    // Password form submission
    const passwordForm = document.getElementById('password-form');
    if (passwordForm) {
        passwordForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await submitForm(this, 'Password updated successfully');
        });
    }

    // Notifications form submission
    const notificationsForm = document.getElementById('notifications-form');
    if (notificationsForm) {
        notificationsForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await submitForm(this, 'Notification settings updated successfully');
        });
    }

    // Preferences form submission
    const preferencesForm = document.getElementById('preferences-form');
    if (preferencesForm) {
        preferencesForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            await submitForm(this, 'Preferences updated successfully');
        });
    }

    /**
     * Professional form submission function
     */
    async function submitForm(form, successMessage) {
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalBtnContent = submitBtn.innerHTML;

        try {
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="las la-spinner la-spin"></i> Saving...';

            // Submit form via fetch with debugging - USING JSON INSTEAD OF FORMDATA
            const formData = new FormData(form);
            const jsonData = {};
            
            // Convert FormData to JSON with country mapping
            for (let [key, value] of formData.entries()) {
                if (key === 'country') {
                    // Map country codes to full names
                    const countryMap = {
                        'UZ': 'Uzbekistan',
                        'KZ': 'Kazakhstan',
                        'CN': 'China',
                        'TJ': 'Tajikistan',
                        'TM': 'Turkmenistan',
                        'AF': 'Afghanistan',
                        'KG': 'Kyrgyzstan',
                        'TR': 'Turkey',
                        'RU': 'Russia',
                        'IR': 'Iran',
                        'PK': 'Pakistan',
                        'IN': 'India',
                        'MN': 'Mongolia',
                        'AZ': 'Azerbaijan',
                        'GE': 'Georgia',
                        'AM': 'Armenia',
                        'US': 'United States',
                        'GB': 'United Kingdom',
                        'DE': 'Germany',
                        'FR': 'France',
                        'IT': 'Italy',
                        'ES': 'Spain',
                        'NL': 'Netherlands',
                        'BE': 'Belgium',
                        'CH': 'Switzerland',
                        'AT': 'Austria',
                        'SE': 'Sweden',
                        'NO': 'Norway',
                        'DK': 'Denmark',
                        'FI': 'Finland',
                        'PL': 'Poland',
                        'CZ': 'Czech Republic',
                        'HU': 'Hungary',
                        'RO': 'Romania',
                        'BG': 'Bulgaria',
                        'GR': 'Greece',
                        'PT': 'Portugal',
                        'IE': 'Ireland',
                        'CA': 'Canada',
                        'AU': 'Australia',
                        'JP': 'Japan',
                        'KR': 'South Korea',
                        'SG': 'Singapore',
                        'MY': 'Malaysia',
                        'TH': 'Thailand',
                        'VN': 'Vietnam',
                        'PH': 'Philippines',
                        'ID': 'Indonesia',
                        'BR': 'Brazil',
                        'AR': 'Argentina',
                        'CL': 'Chile',
                        'MX': 'Mexico',
                        'CO': 'Colombia',
                        'PE': 'Peru',
                        'VE': 'Venezuela',
                        'ZA': 'South Africa',
                        'EG': 'Egypt',
                        'MA': 'Morocco',
                        'NG': 'Nigeria',
                        'KE': 'Kenya',
                        'GH': 'Ghana',
                        'ET': 'Ethiopia',
                        'UG': 'Uganda',
                        'TZ': 'Tanzania',
                        'DZ': 'Algeria',
                        'TN': 'Tunisia',
                        'LY': 'Libya',
                        'SD': 'Sudan',
                        'SO': 'Somalia',
                        'DJ': 'Djibouti',
                        'ER': 'Eritrea',
                        'YE': 'Yemen',
                        'OM': 'Oman',
                        'AE': 'UAE',
                        'QA': 'Qatar',
                        'KW': 'Kuwait',
                        'BH': 'Bahrain',
                        'SA': 'Saudi Arabia',
                        'JO': 'Jordan',
                        'LB': 'Lebanon',
                        'SY': 'Syria',
                        'IQ': 'Iraq',
                        'IL': 'Israel',
                        'PS': 'Palestine',
                        'CY': 'Cyprus',
                        'MT': 'Malta'
                    };
                    jsonData[key] = countryMap[value] || value;
                } else {
                    jsonData[key] = value;
                }
            }
            
            
            
            const response = await fetch(form.action, {
                method: 'POST',
                body: JSON.stringify(jsonData),
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const data = await response.json();

            if (data.success) {
                showAlert('success', data.message || successMessage);
                
                // Special handling for password form - clear it
                if (form.id === 'password-form') {
                    form.reset();
                }
                
                // Special handling for preferences - reload if language changed
                if (form.id === 'preferences-form') {
                    const langSelect = form.querySelector('select[name="language"]');
                    if (langSelect && langSelect.value !== '<%= user.preferredLanguage || "uz" %>') {
                        showAlert('info', 'Language changed. Refreshing page...');
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                        return;
                    }
                }
            } else {
                showAlert('error', data.message || 'Failed to save changes');
            }

        } catch (error) {
            
            showAlert('error', 'An error occurred while saving changes');
        } finally {
            // Reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnContent;
        }
    }

    /**
     * Password Security Features
     */
    class PasswordSecurityManager {
        constructor() {
            this.initializePasswordFeatures();
        }

        initializePasswordFeatures() {
            // Password toggle functionality
            document.querySelectorAll('.password-toggle-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetId = btn.getAttribute('data-target');
                    const input = document.getElementById(targetId);
                    const icon = btn.querySelector('i');
                    
                    if (input.type === 'password') {
                        input.type = 'text';
                        icon.className = 'las la-eye-slash';
                        btn.classList.add('active');
                    } else {
                        input.type = 'password';
                        icon.className = 'las la-eye';
                        btn.classList.remove('active');
                    }
                });
            });

            // Password generator functionality
            document.querySelectorAll('.password-generate-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetId = btn.getAttribute('data-target');
                    const input = document.getElementById(targetId);
                    const generatedPassword = this.generateStrongPassword();
                    input.value = generatedPassword;
                    input.type = 'text';
                    
                    // Update toggle button
                    const toggleBtn = document.querySelector(`[data-target="${targetId}"].password-toggle-btn`);
                    if (toggleBtn) {
                        toggleBtn.classList.add('active');
                        toggleBtn.querySelector('i').className = 'las la-eye-slash';
                    }
                    
                    // Trigger validation
                    this.validatePassword(generatedPassword);
                    this.checkPasswordMatch();
                    
                    // Show success message
                    showAlert('success', '<%= t("buyer.settings.security.passwordGenerated") || "Strong password generated!" %>');
                });
            });

            // Password validation
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');
            
            if (newPasswordInput) {
                newPasswordInput.addEventListener('input', (e) => {
                    this.validatePassword(e.target.value);
                    this.checkPasswordMatch();
                });
            }
            
            if (confirmPasswordInput) {
                confirmPasswordInput.addEventListener('input', () => {
                    this.checkPasswordMatch();
                });
            }
        }

        generateStrongPassword() {
            const length = 16;
            const charset = {
                lowercase: 'abcdefghijklmnopqrstuvwxyz',
                uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                numbers: '0123456789',
                symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?'
            };
            
            let password = '';
            
            // Ensure at least one character from each category
            password += this.getRandomChar(charset.lowercase);
            password += this.getRandomChar(charset.uppercase);
            password += this.getRandomChar(charset.numbers);
            password += this.getRandomChar(charset.symbols);
            
            // Fill the rest randomly
            const allChars = charset.lowercase + charset.uppercase + charset.numbers + charset.symbols;
            for (let i = 4; i < length; i++) {
                password += this.getRandomChar(allChars);
            }
            
            // Shuffle the password
            return this.shuffleString(password);
        }

        getRandomChar(str) {
            return str.charAt(Math.floor(Math.random() * str.length));
        }

        shuffleString(str) {
            const arr = str.split('');
            for (let i = arr.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [arr[i], arr[j]] = [arr[j], arr[i]];
            }
            return arr.join('');
        }

        validatePassword(password) {
            const requirements = {
                length: password.length >= 8,
                uppercase: /[A-Z]/.test(password),
                lowercase: /[a-z]/.test(password),
                number: /\d/.test(password),
                special: /[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)
            };

            // Update requirement indicators
            Object.keys(requirements).forEach(req => {
                const element = document.querySelector(`[data-requirement="${req}"]`);
                if (element) {
                    if (requirements[req]) {
                        element.classList.add('valid');
                    } else {
                        element.classList.remove('valid');
                    }
                }
            });

            // Calculate strength
            const validCount = Object.values(requirements).filter(Boolean).length;
            const strengthFill = document.getElementById('newPasswordStrength');
            const strengthText = document.getElementById('newPasswordStrengthText');
            
            if (strengthFill && strengthText) {
                strengthFill.className = 'strength-fill';
                
                if (validCount <= 2) {
                    strengthFill.classList.add('weak');
                    strengthText.textContent = '<%= t("buyer.settings.security.strengthWeak") || "Weak" %>';
                } else if (validCount === 3) {
                    strengthFill.classList.add('fair');
                    strengthText.textContent = '<%= t("buyer.settings.security.strengthFair") || "Fair" %>';
                } else if (validCount === 4) {
                    strengthFill.classList.add('good');
                    strengthText.textContent = '<%= t("buyer.settings.security.strengthGood") || "Good" %>';
                } else {
                    strengthFill.classList.add('strong');
                    strengthText.textContent = '<%= t("buyer.settings.security.strengthStrong") || "Strong" %>';
                }
            }
        }

        checkPasswordMatch() {
            const newPassword = document.getElementById('newPassword')?.value || '';
            const confirmPassword = document.getElementById('confirmPassword')?.value || '';
            const indicator = document.getElementById('passwordMatchIndicator');
            
            if (indicator) {
                if (confirmPassword === '') {
                    indicator.className = 'password-match-indicator';
                    indicator.innerHTML = '<i class="las la-circle"></i><span><%= t("buyer.settings.security.passwordsMustMatch") || "Passwords must match" %></span>';
                } else if (newPassword === confirmPassword) {
                    indicator.className = 'password-match-indicator valid';
                    indicator.innerHTML = '<i class="las la-check-circle"></i><span><%= t("buyer.settings.security.passwordsMatch") || "Passwords match" %></span>';
                } else {
                    indicator.className = 'password-match-indicator invalid';
                    indicator.innerHTML = '<i class="las la-times-circle"></i><span><%= t("buyer.settings.security.passwordsDoNotMatch") || "Passwords do not match" %></span>';
                }
            }
        }
    }

    // Initialize password security features
    new PasswordSecurityManager();

    /**
     * Professional alert system for settings page
     */
    function showAlert(type, message) {
        // Remove existing alerts
        const existingAlerts = document.querySelectorAll('.settings-alert');
        existingAlerts.forEach(alert => alert.remove());

        // Create alert element
        const alert = document.createElement('div');
        alert.className = `settings-alert settings-alert--${type}`;
        alert.innerHTML = `
            <div class="alert-content">
                <i class="las ${type === 'success' ? 'la-check-circle' : type === 'error' ? 'la-exclamation-circle' : 'la-info-circle'}"></i>
                <span>${message}</span>
            </div>
            <button class="alert-close" onclick="this.parentElement.remove()">
                <i class="las la-times"></i>
            </button>
        `;

        // Alert styles
        alert.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            z-index: 10000;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-family: var(--body-font);
            font-size: 0.9rem;
            max-width: 400px;
            animation: slideInRight 0.3s ease-out;
        `;

        document.body.appendChild(alert);

        // Auto remove after 5 seconds
        setTimeout(() => {
            if (alert.parentElement) {
                alert.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => alert.remove(), 300);
            }
        }, 5000);
    }

    // Add CSS animations for alerts if not already present
    if (!document.getElementById('settings-alert-styles')) {
        const style = document.createElement('style');
        style.id = 'settings-alert-styles';
        style.textContent = `
            @keyframes slideInRight {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOutRight {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
            .alert-close {
                background: none;
                border: none;
                color: inherit;
                cursor: pointer;
                padding: 0;
                margin-left: 0.5rem;
                opacity: 0.8;
            }
            .alert-close:hover {
                opacity: 1;
            }
            
            /* Password Security Features */
            .password-input-wrapper {
              position: relative;
              display: flex;
              align-items: center;
            }
            
            .password-input-wrapper .form-control {
              padding-right: 80px;
            }
            
            .password-toggle-btn,
            .password-generate-btn {
              position: absolute;
              right: 8px;
              top: 50%;
              transform: translateY(-50%);
              background: none;
              border: none;
              color: #6c757d;
              cursor: pointer;
              padding: 8px;
              border-radius: 4px;
              transition: all 0.3s ease;
              z-index: 2;
            }
            
            .password-generate-btn {
              right: 40px;
            }
            
            .password-toggle-btn:hover,
            .password-generate-btn:hover {
              background-color: #f8f9fa;
              color: #495057;
            }
            
            .password-toggle-btn.active {
              color: #007bff;
            }
            
            .password-strength-meter {
              margin-top: 8px;
              display: flex;
              align-items: center;
              gap: 12px;
            }
            
            .strength-bar {
              flex: 1;
              height: 4px;
              background-color: #e9ecef;
              border-radius: 2px;
              overflow: hidden;
            }
            
            .strength-fill {
              height: 100%;
              width: 0%;
              transition: all 0.3s ease;
              border-radius: 2px;
            }
            
            .strength-fill.weak { width: 25%; background-color: #dc3545; }
            .strength-fill.fair { width: 50%; background-color: #ffc107; }
            .strength-fill.good { width: 75%; background-color: #17a2b8; }
            .strength-fill.strong { width: 100%; background-color: #28a745; }
            
            .strength-text {
              font-size: 12px;
              color: #6c757d;
              min-width: 80px;
            }
            
            .password-requirements {
              margin-top: 12px;
              display: grid;
              grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
              gap: 8px;
            }
            
            .requirement {
              display: flex;
              align-items: center;
              gap: 8px;
              font-size: 12px;
              color: #6c757d;
            }
            
            .requirement i {
              font-size: 8px;
              transition: all 0.3s ease;
            }
            
            .requirement.valid i {
              color: #28a745;
            }
            
            .requirement.valid i::before {
              content: "\\f00c";
            }
            
            .password-match-indicator {
              margin-top: 8px;
              display: flex;
              align-items: center;
              gap: 8px;
              font-size: 12px;
              color: #6c757d;
            }
            
            .password-match-indicator i {
              font-size: 8px;
              transition: all 0.3s ease;
            }
            
            .password-match-indicator.valid i {
              color: #28a745;
            }
            
            .password-match-indicator.valid i::before {
              content: "\\f00c";
            }
            
            .password-match-indicator.invalid i {
              color: #dc3545;
            }
            
            .password-match-indicator.invalid i::before {
              content: "\\f00d";
            }
            
            /* Dark mode support */
            [data-theme='light'] .password-toggle-btn,
            [data-theme='light'] .password-generate-btn {
              color: #adb5bd;
            }
            
            [data-theme='light'] .password-toggle-btn:hover,
            [data-theme='light'] .password-generate-btn:hover {
              background-color: #495057;
              color: #f8f9fa;
            }
            
            [data-theme='dark'] .strength-bar {
              background-color: #495057;
            }
            
            [data-theme='light'] .strength-text,
            [data-theme='light'] .requirement,
            [data-theme='light'] .password-match-indicator {
              color: #adb5bd;
            }
        `;
        document.head.appendChild(style);
    }
});
</script>

<%- include('../partials/footer') %>
