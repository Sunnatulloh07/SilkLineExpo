<%- include('../partials/header', { title: 'Biznes Xabarlari - Professional B2B Aloqa', lng: lng || 'uz', user: user }) %>
<%- include('../partials/navigation') %>

<!-- Professional B2B Messages CSS -->
<link rel="stylesheet" href="/css/form-validation.css">
<link rel="stylesheet" href="/css/toast-notifications.css">

<style>
/* ===============================================
   PROFESSIONAL B2B MESSAGES - BUYER PROFILE STYLE
   =============================================== */

/* ===============================================
   SLEX DESIGN SYSTEM INTEGRATION - EXACT PROFILE MATCH
   =============================================== */

/* Profile page classes uchun moslashuv */
.section-bg {
  background: hsl(var(--section-bg));
  padding: 0.5rem;
  border-radius: 20px;
  border: 1px solid hsl(var(--border-color));
  box-shadow: var(--box-shadow);
  height: 135vh;
}

.text-heading {
  color: hsl(var(--heading-color));
}

.text-main {
  color: #ffffff !important;
}

.bg-main {
  background: hsl(var(--main));
}

.hover-bg-main:hover {
  background: hsla(var(--main), 0.1);
}

/* Professional B2B Chat Header Styles */
.b2b-business-header {
  margin-bottom: 0;
}

.b2b-header-breadcrumb {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 20px;
}

.b2b-breadcrumb-item {
  display: flex;
  align-items: center;
  gap: 6px;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 14px;
  color: hsl(var(--body-color));
  text-decoration: none;
  border: 1px solid hsl(var(--border-color));
  transition: all 0.3s ease;
}

.b2b-breadcrumb-item:hover {
  color: hsl(var(--main));
  border-color: hsl(var(--main));
}

.b2b-breadcrumb-separator {
  color: hsl(var(--body-color));
  opacity: 0.5;
}

.b2b-header-main {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 24px;
}

.b2b-business-info {
  display: flex;
  align-items: center;
  gap: 16px;
}

/* Telegram-style conversation hover effects */
.conversation-item {
  transition: all 0.3s ease;
}

.conversation-item:hover {
  background: hsl(var(--main-l-50)) !important;
}

.conversation-item.active {
  background: hsl(var(--main-l-100)) !important;
  border-left: 3px solid #ff6a00;
}

[data-theme="dark"] .conversation-item.active {
  background: hsl(var(--main-l-50)) !important;
}

.conversation-item.current-manufacturer {
  background: linear-gradient(135deg, hsl(var(--main-l-100)) 0%, hsl(var(--main-l-50)) 100%) !important;
  border-color: hsl(var(--main)) !important;
  border-width: 2px !important;
  box-shadow: 0 4px 12px hsla(var(--main), 0.2) !important;
}

 .current-badge {
   background: hsl(var(--main));
   color: white;
   font-size: 10px;
   padding: 2px 6px;
   border-radius: 8px;
   margin-left: 8px;
   font-weight: 600;
   text-transform: uppercase;
   letter-spacing: 0.5px;
   flex-shrink: 0;
   white-space: nowrap;
 }

/* Quick action button hover effects */
.quick-action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 24px hsla(var(--main), 0.25);
}

.quick-action-btn:hover:not(:first-child) {
  border-color: hsl(var(--main));
  background: hsl(var(--main-l-50));
}

/* Telegram-style attachment menu hover effects */
.telegram-menu-item:hover {
  background: hsl(var(--section-bg)) !important;
  transform: translateX(4px);
}

.telegram-attachment-btn:hover {
  border-color: hsl(var(--main)) !important;
  color: hsl(var(--main)) !important;
  transform: scale(1.05);
}

 /* Telegram Chat Layout Styles */
 .telegram-chat-layout {
   display: grid;
   grid-template-columns: 320px 1fr;
   gap: 0;
   min-height: 600px;
   border-radius: 16px;
   overflow: hidden;
   height: 100%;
 }

 /* Responsive sidebar width */
 @media (max-width: 1200px) {
   .telegram-chat-layout {
     grid-template-columns: 300px 1fr;
   }
 }

 @media (max-width: 768px) {
   .telegram-chat-layout {
     grid-template-columns: 280px 1fr;
   }
 }

 .conversations-sidebar {
   background: hsl(var(--section-bg));
   border-right: 1px solid hsl(var(--border-color));
   display: flex;
   flex-direction: column;
   overflow: hidden;
   width: 100%;
 }

 .sidebar-header {
   padding: 20px;
   border-bottom: 1px solid hsl(var(--border-color));
 }

 .sidebar-search {
   padding: 16px;
   border-bottom: 1px solid hsl(var(--border-color));
 }

 .search-wrapper {
   position: relative;
 }

 .search-wrapper .fa-search {
   position: absolute;
   left: 12px;
   top: 50%;
   transform: translateY(-50%);
   color: hsl(var(--body-color));
   opacity: 0.5;
 }

 .search-input {
   width: 100%;
   padding: 10px 16px 10px 40px;
   border: 1px solid hsl(var(--border-color));
   border-radius: 12px;
   background: hsl(var(--white));
   color: hsl(var(--body-color));
   font-size: 14px;
   opacity: 0.7;
 }

 .conversations-list {
   flex: 1;
   overflow-y: auto;
   overflow-x: hidden;
   width: 100%;
   padding-right: 4px;
 }

.conversation-item {
   padding: 16px 20px;
   border-bottom: 1px solid hsl(var(--border-color));
   cursor: pointer;
   transition: all 0.3s ease;
   width: 100%;
   box-sizing: border-box;
   overflow: hidden;
 }

 .conversation-content {
   display: flex;
   align-items: flex-start;
   gap: 12px;
   width: 100%;
   min-width: 0;
 }

 .conversation-avatar {
  position: relative;
}

 .conversation-avatar img {
   width: 48px;
   height: 48px;
   border-radius: 12px;
  object-fit: cover;
}

 .conversation-status {
   width: 12px;
   height: 12px;
   border: 2px solid white;
  border-radius: 50%;
   position: absolute;
   bottom: -2px;
   right: -2px;
 }

 .conversation-status.online {
   background: #22c55e;
 }

 .conversation-status.away {
   background: #f59e0b;
 }

 .conversation-status.offline {
   background: #6b7280;
}

/* Logo Placeholder Styles */
.logo-placeholder {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  background: hsl(var(--border-color));
  display: flex;
  align-items: center;
  justify-content: center;
  color: hsl(var(--body-color));
  opacity: 0.6;
}

.logo-placeholder i {
  font-size: 18px;
}

.conversation-info {
  flex: 1;
  min-width: 0;
}

.conversation-details {
  flex: 1;
  min-width: 0;
  overflow: hidden;
}

 .conversation-header {
   display: flex;
   justify-content: space-between;
   align-items: center;
   margin-bottom: 4px;
   min-width: 0;
 }

 .conversation-name {
   margin: 0;
   font-size: 14px;
   font-weight: 600;
   white-space: nowrap;
   overflow: hidden;
   text-overflow: ellipsis;
   flex: 1;
   min-width: 0;
   margin-right: 8px;
 }

 .conversation-time {
   font-size: 12px;
   font-weight: 500;
   flex-shrink: 0;
   white-space: nowrap;
 }

 .conversation-time.active {
   color: hsl(var(--main));
 }

 .conversation-time.inactive {
   color: hsl(var(--body-color));
 }

 .conversation-preview {
   margin: 0;
   font-size: 13px;
   color: hsl(var(--body-color));
   white-space: nowrap;
   overflow: hidden;
   text-overflow: ellipsis;
   min-width: 0;
   flex: 1;
 }

 .conversation-footer {
   display: flex;
   justify-content: space-between;
   align-items: center;
   margin-top: 4px;
 }

 .conversation-meta {
   display: flex;
   justify-content: space-between;
   align-items: center;
   margin-top: 4px;
   min-width: 0;
   flex: 1;
 }

 .order-info {
   font-size: 11px;
   color: hsl(var(--body-color));
   opacity: 0.7;
   white-space: nowrap;
   overflow: hidden;
   text-overflow: ellipsis;
   flex: 1;
   min-width: 0;
   margin-right: 8px;
 }

 .status-badge {
   font-size: 10px;
   padding: 2px 6px;
   border-radius: 8px;
   font-weight: 500;
   flex-shrink: 0;
   white-space: nowrap;
 }

 .conversation-last-msg {
   font-size: 11px;
   color: hsl(var(--body-color));
   opacity: 0.7;
 }

 .conversation-unread {
   background: hsl(var(--main));
   color: white;
   border-radius: 10px;
   padding: 2px 6px;
   font-size: 11px;
   font-weight: 500;
 }

 .last-message-unread-badge {
   background: hsl(var(--main));
   color: white;
   border-radius: 10px;
   padding: 2px 6px;
   font-size: 11px;
   font-weight: 500;
   margin-left: 8px;
   flex-shrink: 0;
 }

  /* Chat Main Area */
 .chat-main-area {
   background: hsl(var(--section-bg));
  display: flex;
  flex-direction: column;
 }

 .chat-header-enhanced {
   padding: 20px 24px;
   border-bottom: 1px solid hsl(var(--border-color));
   background: hsl(var(--section-bg));
 }

 .chat-header-content {
   display: flex;
  align-items: center;
   justify-content: space-between;
 }

 .chat-header-left {
   display: flex;
   align-items: center;
   gap: 16px;
 }

 .chat-header-avatar {
   position: relative;
 }

 .chat-header-avatar img {
   width: 48px;
   height: 48px;
   border-radius: 12px;
   object-fit: cover;
 }

 .chat-header-status {
   width: 12px;
   height: 12px;
   background: #22c55e;
   border: 2px solid white;
   border-radius: 50%;
   position: absolute;
   bottom: -2px;
   right: -2px;
 }

 .chat-header-title {
   margin: 0 0 4px 0;
   font-size: 18px;
  font-weight: 600;
 }

 .chat-header-meta {
   display: flex;
   align-items: center;
   gap: 16px;
   font-size: 13px;
   color: hsl(var(--body-color));
 }

 .chat-subtitle {
   font-size: 14px;
   color: hsl(var(--body-color));
   opacity: 0.8;
 }

 .chat-header-meta span {
   display: flex;
   align-items: center;
   gap: 4px;
}

.online-indicator {
   width: 6px;
   height: 6px;
   background: #22c55e;
   border-radius: 50%;
 }

 .chat-header-actions {
   display: flex;
   gap: 8px;
 }

 .chat-action-btn {
   padding: 8px 12px;
   border: 1px solid hsl(var(--border-color));
   background: hsl(var(--white));
   border-radius: 8px;
   cursor: pointer;
   display: flex;
   align-items: center;
   gap: 6px;
   color: hsl(var(--body-color));
   font-size: 13px;
 }

  /* Messages Container - Enterprise Telegram Style */
 .messages-container {
  flex: 1;
   padding: 0;
   overflow-y: auto;
   display: flex;
   flex-direction: column;
   background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
   position: relative;
 }

 .messages-container::before {
   content: '';
   position: absolute;
   top: 0;
   left: 0;
   right: 0;
   height: 1px;
   background: linear-gradient(90deg, transparent 0%, rgba(0, 0, 0, 0.05) 50%, transparent 100%);
   z-index: 1;
 }

 /* Dark mode support for messages container */
 [data-theme="light"] .messages-container {
   background: #1e293b;
 }

 .welcome-state {
   text-align: center;
   max-width: 500px;
   padding: 40px 20px;
   position: absolute;
   top: 50%;
   left: 50%;
   transform: translate(-50%, -50%);
   width: 100%;
   backdrop-filter: blur(10px);
   border-radius: 20px;
   box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
   border: 1px solid rgba(255, 255, 255, 0.2);
 }

/* Production-Ready Enterprise-Grade Telegram-Style Professional Chat */
.telegram-chat-container {
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  min-height: 100%;
  position: relative;
  overflow: hidden;
}

.telegram-chat-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent 0%, rgba(0, 0, 0, 0.05) 50%, transparent 100%);
  z-index: 1;
}

.telegram-chat-container::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 1px;
  background: linear-gradient(90deg, transparent 0%, rgba(0, 0, 0, 0.03) 50%, transparent 100%);
  z-index: 1;
}

.telegram-date-separator {
  text-align: center;
  margin: 24px 0 16px 0;
  position: relative;
  z-index: 2;
}

.telegram-date-separator::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 24px;
  right: 24px;
  height: 1px;
  background: linear-gradient(90deg, transparent 0%, rgba(0, 0, 0, 0.08) 50%, transparent 100%);
}

.telegram-date-separator span {
  background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
  padding: 8px 16px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: 600;
  color: #475569;
  position: relative;
  z-index: 2;
  border: 1px solid rgba(0, 0, 0, 0.06);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.telegram-date-separator span:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  border-color: rgba(0, 0, 0, 0.1);
}

.telegram-message {
  display: flex;
  gap: 12px;
  margin-bottom: 12px;
  padding: 0 20px;
  position: relative;
  animation: messageSlideIn 0.3s ease-out;
}

@keyframes messageSlideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.telegram-message.own {
  flex-direction: row-reverse;
}

.telegram-message-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  flex-shrink: 0;
  overflow: hidden;
  border: 2px solid rgba(255, 255, 255, 0.8);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
}

.telegram-message-avatar::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 50%;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 100%);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.telegram-message-avatar:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
}

.telegram-message-avatar:hover::before {
  opacity: 1;
}

.telegram-message-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.3s ease;
}

.telegram-message-content {
  max-width: 70%;
  position: relative;
  transition: all 0.3s ease;
}

.telegram-message-bubble {
  background: linear-gradient(135deg, #ffffff 0%, #fafbfc 100%);
  border-radius: 20px;
  padding: 12px 16px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
  position: relative;
  word-wrap: break-word;
  border: 1px solid rgba(0, 0, 0, 0.04);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

.telegram-message-bubble:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
  border-color: rgba(0, 0, 0, 0.08);
}

.telegram-message.own .telegram-message-bubble {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  color: white;
  border-color: rgba(59, 130, 246, 0.2);
  box-shadow: 0 4px 16px rgba(59, 130, 246, 0.3);
}

.telegram-message.own .telegram-message-bubble:hover {
  box-shadow: 0 6px 24px rgba(59, 130, 246, 0.4);
  transform: translateY(-1px) scale(1.01);
}

.telegram-message-bubble::before {
  content: '';
  position: absolute;
  top: 12px;
  width: 0;
  height: 0;
  transition: all 0.3s ease;
}

.telegram-message:not(.own) .telegram-message-bubble::before {
  left: -8px;
  border-top: 8px solid transparent;
  border-bottom: 8px solid transparent;
  border-right: 8px solid #ffffff;
  filter: drop-shadow(-2px 0 4px rgba(0, 0, 0, 0.1));
}

.telegram-message.own .telegram-message-bubble::before {
  right: -8px;
  border-top: 8px solid transparent;
  border-bottom: 8px solid transparent;
  border-left: 8px solid #3b82f6;
  filter: drop-shadow(2px 0 4px rgba(59, 130, 246, 0.3));
}

.telegram-message-text {
  font-size: 14px;
  line-height: 1.5;
  margin: 0;
  font-weight: 400;
  letter-spacing: 0.01em;
}

.telegram-message-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 6px;
  font-size: 11px;
  opacity: 0.8;
  transition: opacity 0.3s ease;
}

.telegram-message-bubble:hover .telegram-message-footer {
  opacity: 1;
}

.telegram-message-time {
  color: inherit;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 4px;
}

.telegram-message-time::before {
  content: '🕐';
  font-size: 10px;
  opacity: 0.7;
}

.telegram-message-status {
  display: flex;
  align-items: center;
  gap: 3px;
  transition: all 0.3s ease;
}

.telegram-message-status i {
  font-size: 11px;
  transition: all 0.3s ease;
}

.telegram-status-read {
  color: #10b981;
  animation: statusPulse 2s infinite;
}

.telegram-status-delivered {
  color: #f59e0b;
}

.telegram-status-sent {
  color: #9ca3af;
}

@keyframes statusPulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.6; }
}

/* Advanced Message Grouping with Smart Spacing */
.telegram-message + .telegram-message {
  margin-top: 4px;
}

.telegram-message + .telegram-message.own {
  margin-top: 4px;
}

.telegram-message + .telegram-message:not(.own) .telegram-message-avatar,
.telegram-message + .telegram-message.own .telegram-message-avatar {
  visibility: hidden;
  opacity: 0;
  transition: all 0.3s ease;
}

.telegram-message + .telegram-message:not(.own) .telegram-message-bubble::before,
.telegram-message + .telegram-message.own .telegram-message-bubble::before {
  display: none;
}

/* Production-Ready Message Typing Indicator */
.telegram-typing-indicator {
  display: flex;
  gap: 4px;
  padding: 12px 20px;
  align-items: center;
  animation: typingSlideIn 0.3s ease-out;
}

@keyframes typingSlideIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.typing-dots {
  display: flex;
  gap: 4px;
  align-items: center;
}

.typing-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #9ca3af;
  animation: typingBounce 1.4s infinite ease-in-out;
  transition: all 0.3s ease;
}

.typing-dot:nth-child(1) { animation-delay: -0.32s; }
.typing-dot:nth-child(2) { animation-delay: -0.16s; }
.typing-dot:nth-child(3) { animation-delay: 0s; }

@keyframes typingBounce {
  0%, 80%, 100% { 
    transform: scale(0.8); 
    opacity: 0.5; 
    background: #9ca3af;
  }
  40% { 
    transform: scale(1); 
    opacity: 1; 
    background: #6b7280;
  }
}

/* Responsive Design */
@media (max-width: 768px) {
  .telegram-message {
    padding: 0 12px;
    gap: 8px;
  }
  
  .telegram-message-content {
    max-width: 80%;
  }
  
  .telegram-date-separator span {
    padding: 6px 12px;
    font-size: 11px;
  }
}

/* Dark Mode Support */
@media (prefers-color-scheme: dark) {
  .telegram-chat-container {
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
  }
  
  .telegram-date-separator span {
    background: linear-gradient(135deg, #334155 0%, #475569 100%);
    color: #e2e8f0;
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  .telegram-message-bubble {
    background: linear-gradient(135deg, #475569 0%, #64748b 100%);
    border-color: rgba(255, 255, 255, 0.1);
  }
 }

  .welcome-icon {
   width: 120px;
   height: 120px;
   background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
   border-radius: 50%;
   display: flex;
   align-items: center;
   justify-content: center;
   margin: 0 auto 32px;
   box-shadow: 0 8px 32px rgba(59, 130, 246, 0.3);
   border: 4px solid rgba(255, 255, 255, 0.2);
   position: relative;
   overflow: hidden;
 }

 .welcome-icon::before {
   content: '';
   position: absolute;
   top: -50%;
   left: -50%;
   width: 200%;
   height: 200%;
   background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%);
   animation: shimmer 3s infinite;
 }

 @keyframes shimmer {
   0% {
     transform: rotate(0deg);
   }
   100% {
     transform: rotate(360deg);
   }
 }

 .welcome-icon i {
   font-size: 48px;
   color: white;
   filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
   z-index: 2;
   position: relative;
 }

[data-theme="light"] .welcome-title {
  -webkit-text-fill-color: #ffffff !important;
}

 .welcome-title {
   margin: 0 0 16px 0;
   font-size: 28px;
   font-weight: 700;
   background: linear-gradient(135deg, #1e293b 0%, #475569 100%);
   -webkit-background-clip: text;
   -webkit-text-fill-color: transparent;
   background-clip: text;
   color: transparent;
 }

 .welcome-description {
   color: #64748b;
   margin-bottom: 32px;
   font-size: 18px;
   line-height: 1.6;
   font-weight: 500;
   opacity: 0.95;
 }

 /* Dark mode support for welcome description */
 [data-theme="dark"] .welcome-description {
   opacity: 0.8;
 }



 .quick-actions-grid {
   display: grid;
   grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
   gap: 16px;
   margin-bottom: 32px;
 }

 .quick-action-btn {
   padding: 20px;
   border: none;
   border-radius: 12px;
   cursor: pointer;
   text-align: left;
   transition: all 0.3s ease;
 }

 .quick-action-btn.primary {
   background: hsl(var(--main));
   /* color: white; */
   box-shadow: 0 4px 12px hsla(var(--main), 0.2);
 }

 .quick-action-btn.secondary {
   background: hsl(var(--white));
   color: hsl(var(--heading-color));
   border: 2px solid hsl(var(--main));
   box-shadow: 0 2px 8px hsla(var(--main), 0.1);
 }

 .quick-action-btn.tertiary {
   background: hsl(var(--white));
   color: hsl(var(--heading-color));
   border: 2px solid hsl(var(--border-color));
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.05);
 }

 /* Dark mode support for quick action buttons */
 [data-theme="dark"] .quick-action-btn.secondary {
   background: hsl(var(--section-bg));
   color: hsl(var(--heading-color));
   border: 2px solid hsl(var(--main));
   box-shadow: 0 2px 8px hsla(var(--main), 0.2);
 }

 [data-theme="dark"] .quick-action-btn.tertiary {
   background: hsl(var(--section-bg));
   color: hsl(var(--heading-color));
   border: 2px solid hsl(var(--border-color));
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.3);
 }

 .quick-action-content {
  display: flex;
  align-items: center;
   gap: 12px;
   margin-bottom: 8px;
}

 .quick-action-icon {
  width: 40px;
  height: 40px;
   border-radius: 8px;
   display: flex;
   align-items: center;
   justify-content: center;
 }

 .quick-action-icon.primary {
   background: rgba(255,255,255,0.2);
 }

 .quick-action-icon.secondary,
 .quick-action-icon.tertiary {
   background: hsl(var(--main-l-100));
 }

 /* Dark mode support for quick action icons */
 [data-theme="dark"] .quick-action-icon.secondary,
 [data-theme="dark"] .quick-action-icon.tertiary {
   background: hsla(var(--main), 0.2);
 }

 .quick-action-icon i {
   font-size: 18px;
 }

 .quick-action-icon.primary i {
   color: white;
 }

 .quick-action-icon.secondary i,
 .quick-action-icon.tertiary i {
   color: hsl(var(--main));
 }

 .quick-action-title {
   margin: 0;
   font-size: 16px;
  font-weight: 600;
 }

 .quick-action-title.primary {
   color: white;
 }

 .quick-action-title.secondary,
 .quick-action-title.tertiary {
   color: hsl(var(--heading-color));
 }

 .quick-action-description {
   margin: 0;
   font-size: 14px;
   line-height: 1.4;
 }

 .quick-action-description.primary {
   color: rgba(255,255,255,0.9);
 }

 .quick-action-description.secondary,
 .quick-action-description.tertiary {
   color: hsl(var(--body-color));
 }

 /* Message Input Area */
 .b2b-message-input-area {
   padding: 16px 24px;
   border-top: 1px solid hsl(var(--border-color));
   background: hsl(var(--white));
   box-shadow: 0 -2px 8px hsla(0, 0%, 0%, 0.05);
 }

 /* Dark mode support for input area */
 [data-theme="dark"] .b2b-message-input-area {
   background: hsl(var(--section-bg));
   box-shadow: 0 -2px 8px hsla(0, 0%, 0%, 0.3);
 }

 .b2b-input-wrapper {
   position: relative;
   display: flex;
   align-items: flex-end;
   gap: 12px;
 }

 .message-input-container {
   flex: 1;
   position: relative;
 }

 .b2b-message-input {
   width: 100%;
   min-height: 44px;
   max-height: 120px;
   padding: 12px 16px;
   border: 1px solid hsl(var(--border-color));
   border-radius: 12px;
   background: hsl(var(--white));
   color: hsl(var(--heading-color));
   font-size: 14px;
   font-family: inherit;
   resize: none;
   line-height: 1.4;
   transition: all 0.3s ease;
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.05);
   overflow: hidden;
 }

 .b2b-message-input:focus {
   outline: none;
   border-color: hsl(var(--main));
   box-shadow: 0 4px 12px hsla(var(--main), 0.15);
   background: hsl(var(--white));
 }

 /* Dark mode support for message input */
 [data-theme="dark"] .b2b-message-input {
   background: hsl(var(--section-bg));
   border-color: hsl(var(--border-color));
   color: hsl(var(--heading-color));
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.3);
 }

 [data-theme="dark"] .b2b-message-input:focus {
   background: hsl(var(--section-bg));
   border-color: hsl(var(--main));
   box-shadow: 0 4px 12px hsla(var(--main), 0.25);
 }

 .input-actions {
   display: flex;
   gap: 8px;
 }

 .telegram-attachment-wrapper {
   position: relative;
 }

  .telegram-attachment-btn {
   width: 44px;
   height: 44px;
   border: 1px solid hsl(var(--border-color));
   background: hsl(var(--white));
   border-radius: 12px;
   display: flex;
   align-items: center;
   justify-content: center;
   cursor: pointer;
   color: hsl(var(--body-color));
   transition: all 0.3s ease;
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.05);
 }

 .telegram-attachment-btn:hover {
   border-color: hsl(var(--main));
   color: hsl(var(--main));
   transform: scale(1.05);
   box-shadow: 0 4px 12px hsla(var(--main), 0.2);
 }

 /* Dark mode support for attachment button */
 [data-theme="dark"] .telegram-attachment-btn {
   background: hsl(var(--section-bg));
   border-color: hsl(var(--border-color));
   box-shadow: 0 2px 8px hsla(0, 0%, 0%, 0.3);
 }

 [data-theme="dark"] .telegram-attachment-btn:hover {
   border-color: hsl(var(--main));
   color: hsl(var(--main));
   box-shadow: 0 4px 12px hsla(var(--main), 0.3);
 }

 .telegram-attachment-menu {
   position: absolute;
   bottom: 100%;
   left: 0;
   background: hsl(var(--white));
   border: 1px solid hsl(var(--border-color));
   border-radius: 12px;
   box-shadow: 0 8px 32px hsla(0, 0%, 0%, 0.15);
   padding: 8px;
   min-width: 160px;
   opacity: 0;
   visibility: hidden;
   transform: translateY(10px);
   transition: all 0.3s ease;
   z-index: 10;
   backdrop-filter: blur(10px);
 }

 .telegram-attachment-menu.show {
   opacity: 1;
   visibility: visible;
   transform: translateY(0);
 }

 /* Dark mode support for attachment menu */
 [data-theme="dark"] .telegram-attachment-menu {
   background: hsl(var(--section-bg));
   border-color: hsl(var(--border-color));
   box-shadow: 0 8px 32px hsla(0, 0%, 0%, 0.5);
 }

  .telegram-menu-item {
   width: 100%;
   padding: 10px 12px;
   border: none;
   background: none;
   border-radius: 8px;
   cursor: pointer;
   display: flex;
   align-items: center;
   gap: 10px;
   font-size: 14px;
   color: hsl(var(--heading-color));
   transition: all 0.2s ease;
 }

 .telegram-menu-item:hover {
   background: hsl(var(--section-bg));
   transform: translateX(4px);
 }

 /* Dark mode support for menu items */
 [data-theme="dark"] .telegram-menu-item:hover {
   background: hsla(var(--main), 0.1);
 }

 .menu-item-icon {
   width: 32px;
   height: 32px;
   border-radius: 8px;
   display: flex;
   align-items: center;
   justify-content: center;
 }

 .menu-item-icon.file {
   background: #3b82f6;
 }

 .menu-item-icon.image {
   background: #10b981;
 }

 .menu-item-icon.emoji {
   background: #f59e0b;
 }

 .menu-item-icon i {
   color: white;
   font-size: 14px;
 }

  .b2b-send-button {
   width: 44px;
   height: 44px;
   background: hsl(var(--main));
   color: white;
   border: none;
   border-radius: 12px;
   display: flex;
   align-items: center;
   justify-content: center;
   cursor: pointer;
   opacity: 0.5;
   transition: all 0.3s ease;
   box-shadow: 0 2px 8px hsla(var(--main), 0.3);
 }

 .b2b-send-button:not(:disabled) {
   opacity: 1;
 }

 .b2b-send-button:not(:disabled):hover {
   transform: scale(1.05);
   box-shadow: 0 4px 16px hsla(var(--main), 0.4);
 }

 /* Dark mode support for send button */
 [data-theme="dark"] .b2b-send-button {
   box-shadow: 0 2px 8px hsla(var(--main), 0.4);
 }

 [data-theme="dark"] .b2b-send-button:not(:disabled):hover {
   box-shadow: 0 4px 16px hsla(var(--main), 0.5);
 }

 .b2b-input-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
   margin-top: 8px;
   padding: 0 4px;
}

 .b2b-char-counter {
  display: flex;
  align-items: center;
   gap: 4px;
   font-size: 11px;
   color: hsl(var(--body-color));
   opacity: 0.7;
 }

 .b2b-input-hints {
   display: flex;
   gap: 12px;
   font-size: 11px;
   color: hsl(var(--body-color));
   opacity: 0.7;
 }

 .hint-kbd {
   background: hsl(var(--section-bg));
   padding: 2px 4px;
   border-radius: 4px;
   font-size: 10px;
   border: 1px solid hsl(var(--border-color));
 }

 /* Dark mode support for hint keyboards */
 [data-theme="dark"] .hint-kbd {
   background: hsla(var(--main), 0.1);
   border-color: hsl(var(--border-color));
   color: hsl(var(--heading-color));
 }

 /* No conversations state */
 .no-conversations {
   text-align: center;
   padding: 40px 20px;
   color: hsl(var(--body-color));
 }

/* No search results state */
.no-search-results {
  text-align: center;
  padding: 40px 20px;
  color: hsl(var(--body-color));
}

.no-search-results-icon {
  width: 80px;
  height: 80px;
  background: hsl(var(--main-l-100));
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 20px;
  font-size: 32px;
  color: hsl(var(--main));
}

.no-search-results h4 {
  margin: 0 0 12px 0;
  color: hsl(var(--heading-color));
  font-size: 18px;
}

.no-search-results p {
  margin: 0 0 20px 0;
  font-size: 14px;
  opacity: 0.8;
}

.clear-search-btn {
  background: hsl(var(--main));
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 14px;
  cursor: pointer;
  transition: background 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.clear-search-btn:hover {
  background: hsl(var(--main-dark));
}

 .no-conversations-icon {
   width: 80px;
   height: 80px;
   background: hsl(var(--main-l-100));
   border-radius: 50%;
   display: flex;
   align-items: center;
   justify-content: center;
   margin: 0 auto 20px;
   font-size: 32px;
   color: hsl(var(--main));
 }

 .no-conversations h4 {
   margin: 0 0 12px 0;
   color: hsl(var(--heading-color));
   font-size: 18px;
 }

 .no-conversations p {
   margin: 0;
   font-size: 14px;
   opacity: 0.8;
 }

 /* Dark mode support for no conversations */
 [data-theme="dark"] .no-conversations-icon {
   background: hsla(var(--main), 0.2);
 }

 /* Empty conversations state */
 .empty-conversations {
   text-align: center;
   padding: 20px;
   color: hsl(var(--body-color));
   opacity: 0.7;
 }

 .empty-icon {
  width: 40px;
  height: 40px;
   background: hsl(var(--main-l-100));
  border-radius: 50%;
   display: flex;
   align-items: center;
   justify-content: center;
   margin: 0 auto 12px;
   font-size: 18px;
   color: hsl(var(--main));
 }

 .empty-conversations p {
   margin: 0;
   font-size: 13px;
 }

/* ===== TELEGRAM STYLE MESSAGE ATTACHMENTS ===== */
.telegram-message-attachments {
  margin-top: 8px;
}

/* Image Attachment */
.telegram-attachment-image {
  position: relative;
  display: inline-block;
  max-width: 200px;
  border-radius: 8px;
  overflow: hidden;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.telegram-attachment-image:hover {
  transform: scale(1.02);
}

.telegram-attachment-image img {
  width: 100%;
  height: auto;
  display: block;
}

.telegram-image-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.telegram-attachment-image:hover .telegram-image-overlay {
  opacity: 1;
}

.telegram-image-overlay i {
  color: white;
  font-size: 18px;
}

/* File Attachment */
.telegram-attachment-file {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px;
  background: var(--telegram-bg-secondary);
  border-radius: 8px;
  border: 1px solid var(--telegram-border);
  max-width: 300px;
}

.telegram-file-icon {
  width: 40px;
  height: 40px;
  background: var(--telegram-primary);
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 16px;
}

.telegram-file-details {
  flex: 1;
  min-width: 0;
}

.telegram-file-details h6 {
  margin: 0 0 4px 0;
  font-size: 14px;
  font-weight: 600;
  color: var(--telegram-text-primary);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.telegram-file-details p {
  margin: 0;
  font-size: 12px;
  color: var(--telegram-text-secondary);
}

.telegram-file-actions {
  display: flex;
  align-items: center;
}

.telegram-file-download {
  width: 32px;
  height: 32px;
  background: var(--telegram-primary);
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  text-decoration: none;
  transition: background 0.2s ease;
}

.telegram-file-download:hover {
  background: var(--telegram-primary-dark);
  color: white;
}

/* Image Expansion */
.telegram-image-expanded {
  max-width: 400px !important;
  transform: scale(1.1);
}

/* ===== IMAGE MODAL STYLES ===== */
.telegram-image-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.9);
  z-index: 9999;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(5px);
}

.telegram-modal-content {
  background: var(--telegram-bg-primary);
  border-radius: 12px;
  max-width: 90vw;
  max-height: 90vh;
  overflow: hidden;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  border: 1px solid var(--telegram-border);
}

.telegram-modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px 20px;
  border-bottom: 1px solid var(--telegram-border);
  background: var(--telegram-bg-secondary);
}

.telegram-modal-header h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: var(--telegram-text-primary);
}

.telegram-modal-close {
  background: none;
  border: none;
  color: var(--telegram-text-secondary);
  font-size: 18px;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.telegram-modal-close:hover {
  background: var(--telegram-bg-secondary);
  color: var(--telegram-text-primary);
}

.telegram-modal-body {
  padding: 20px;
  text-align: center;
  max-height: 70vh;
  overflow: auto;
}

.telegram-modal-body img {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  border-radius: 8px;
}

.telegram-modal-footer {
  padding: 16px 20px;
  border-top: 1px solid var(--telegram-border);
  background: var(--telegram-bg-secondary);
  text-align: center;
}

.telegram-modal-download {
  background: var(--telegram-primary);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: background 0.2s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.telegram-modal-download:hover {
  background: var(--telegram-primary-dark);
}

/* Modal Animation */
.telegram-image-modal {
  animation: modalFadeIn 0.3s ease;
}

@keyframes modalFadeIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* File-only message info */
.telegram-message-info {
  margin-top: 8px;
  text-align: center;
}

.telegram-file-only {
  color: var(--telegram-text-secondary);
  font-size: 12px;
  font-style: italic;
  opacity: 0.8;
 }

 /* Message image and file styles */
 .message-image img {
   max-width: 200px;
   border-radius: 8px;
   cursor: pointer;
 }

 .message-file {
  display: flex;
  align-items: center;
   gap: 12px;
   padding: 8px;
   background: hsl(var(--section-bg));
   border-radius: 8px;
   border: 1px solid hsl(var(--border-color));
 }

 .file-icon {
   width: 40px;
   height: 40px;
   background: hsl(var(--main));
   color: white;
   border-radius: 6px;
  display: flex;
   align-items: center;
   justify-content: center;
}

 .file-info {
  flex: 1;
 }

 .file-name {
   font-weight: 600;
   font-size: 14px;
   color: hsl(var(--heading-color));
 }

 .file-size {
   font-size: 12px;
   color: hsl(var(--body-color));
   opacity: 0.7;
 }

 .file-download {
   color: hsl(var(--main));
   text-decoration: none;
   padding: 8px;
   border-radius: 4px;
   transition: background 0.2s;
 }

 .file-download:hover {
   background: hsl(var(--main-l-100));
 }

 /* Loading and error states */
 .loading-state, .error-state {
   text-align: center;
   padding: 40px 20px;
   color: hsl(var(--body-color));
 }

 .loading-spinner, .error-icon {
   width: 60px;
   height: 60px;
   background: hsl(var(--main-l-100));
   border-radius: 50%;
  display: flex;
   align-items: center;
   justify-content: center;
   margin: 0 auto 20px;
   font-size: 24px;
   color: hsl(var(--main));
 }

 .error-icon {
   background: rgba(239, 68, 68, 0.1);
   color: #ef4444;
 }

 .loading-state p, .error-state h4 {
   margin: 0 0 12px 0;
   color: hsl(var(--heading-color));
 }

 .error-state p {
   margin: 0 0 20px 0;
   font-size: 14px;
   opacity: 0.8;
 }

 .retry-btn {
   background: hsl(var(--main));
   color: white;
   border: none;
   padding: 10px 20px;
   border-radius: 8px;
   cursor: pointer;
   font-size: 14px;
   display: inline-flex;
   align-items: center;
   gap: 8px;
   transition: background 0.2s;
 }

 .retry-btn:hover {
   background: hsl(var(--main-dark));
 }

 /* Toast notifications */
 .toast {
   position: fixed;
   top: 20px;
   right: 20px;
  background: white;
   border: 1px solid hsl(var(--border-color));
   border-radius: 8px;
   box-shadow: 0 4px 12px hsla(0, 0%, 0%, 0.15);
   padding: 16px;
   transform: translateX(400px);
   transition: transform 0.3s ease;
   z-index: 10000;
   max-width: 350px;
 }

 .toast.show {
   transform: translateX(0);
 }

 .toast-content {
   display: flex;
   align-items: center;
   gap: 12px;
 }

 .toast-success {
   border-left: 4px solid #10b981;
 }

 .toast-success i {
   color: #10b981;
 }

  .toast-warning {
    border-left: 4px solid #f59e0b;
  }

  .toast-warning i {
    color: #f59e0b;
  }

 .toast-error {
   border-left: 4px solid #ef4444;
 }

 .toast-error i {
   color: #ef4444;
 }

 /* Dark mode support */
 [data-theme="dark"] .loading-spinner {
   background: hsla(var(--main), 0.2);
 }

 [data-theme="dark"] .toast {
   background: hsl(var(--section-bg));
   border-color: hsl(var(--border-color));
   color: hsl(var(--heading-color));
 }

 /* Responsive design */
 @media (max-width: 768px) {
   .telegram-chat-layout {
     grid-template-columns: 1fr !important;
   }
   
   .conversations-sidebar {
     display: none;
   }
   
   .b2b-header-main {
     flex-direction: column;
     align-items: flex-start;
     gap: 16px;
   }
   
   .b2b-header-actions {
     width: 100%;
  justify-content: flex-start;
   }
 }

/* Messages uchun mo'ljallangan ranglar */
.messages-layout {
  display: grid;
  grid-template-columns: 380px 1fr;
  height: calc(100vh - 160px);
  min-height: 600px;
  gap: 24px;
}

/* Professional sections */
.messages-header {
  padding: 32px;
  background: hsl(var(--main-gradient));
  color: white;
  border-radius: 20px 20px 0 0;
  position: relative;
  overflow: hidden;
}

.messages-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, hsl(var(--main)) 0%, hsl(var(--main-two)) 100%);
}

.manufacturers-panel {
  background: hsl(var(--section-bg));
  border: 1px solid hsl(var(--border-color));
  border-radius: 20px;
  box-shadow: var(--box-shadow);
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.chat-container {
  background: hsl(var(--section-bg));
  border: 1px solid hsl(var(--border-color));
  border-radius: 20px;
  box-shadow: var(--box-shadow);
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* Main Layout - Chat Layout Style */
.b2b-messages-container {
  font-family: var(--font-family);
  background: var(--background-color);
  min-height: calc(100vh - var(--header-height, 64px));
  padding: 20px;
}

.messages-wrapper {
  background: transparent;
  min-height: auto;
  padding: 0;
  font-family: var(--font-family);
}

/* Business Header - Chat Style */
.b2b-business-header {
  background: linear-gradient(135deg, var(--surface-color) 0%, var(--surface-color) 100%);
  border: 1px solid var(--border-color);
  border-radius: 20px;
  padding: 24px 32px;
  margin-bottom: 24px;
  box-shadow: var(--buyer-shadow-lg);
  position: relative;
  overflow: hidden;
}

.b2b-business-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--buyer-gradient);
  border-radius: 20px 20px 0 0;
}

.b2b-header-breadcrumb {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 20px;
  font-size: 14px;
}

.b2b-breadcrumb-item {
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--text-secondary);
  text-decoration: none;
  padding: 8px 16px;
  border-radius: 12px;
  background: var(--background-color);
  border: 1px solid var(--border-light);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-weight: var(--font-weight-medium);
}

.b2b-breadcrumb-item:hover {
  color: var(--buyer-primary);
  background: var(--buyer-card-gradient);
  border-color: var(--buyer-primary);
  transform: translateY(-1px);
  box-shadow: var(--buyer-shadow);
}

.b2b-breadcrumb-item.active-breadcrumb {
  background: var(--buyer-gradient);
  color: white;
  border-color: var(--buyer-primary);
}

.b2b-breadcrumb-separator {
  color: var(--text-muted);
  font-size: 12px;
}

.b2b-header-main {
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 24px;
  align-items: start;
}

.b2b-business-info {
  display: flex;
  gap: 20px;
  align-items: center;
}

.b2b-messages-icon {
  width: 64px;
  height: 64px;
  border-radius: 16px;
  background: var(--buyer-gradient);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 28px;
  box-shadow: var(--buyer-shadow);
}

.b2b-business-details h1 {
  font-size: 32px;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin: 0 0 8px 0;
  line-height: 1.2;
}

.b2b-business-subtitle {
  color: var(--text-secondary);
  font-size: 16px;
  font-weight: var(--font-weight-medium);
  margin: 0;
  line-height: 1.5;
}

.b2b-header-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.b2b-action-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  border-radius: 12px;
  border: none;
  cursor: pointer;
  font-size: 14px;
  font-weight: var(--font-weight-semibold);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  font-family: var(--font-family);
}

.b2b-action-btn.primary {
  background: var(--buyer-gradient);
  color: white;
  box-shadow: var(--buyer-shadow);
}

.b2b-action-btn.primary:hover {
  transform: translateY(-2px);
  box-shadow: var(--buyer-shadow-lg);
}

.b2b-action-btn.secondary {
  background: var(--surface-color);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
}

.b2b-action-btn.secondary:hover {
  border-color: var(--buyer-primary);
  color: var(--buyer-primary);
  background: var(--buyer-card-gradient);
}

.messages-container {
  width: 100%;
  margin: 0;
  background: hsl(var(--white));
  box-shadow: var(--buyer-shadow-lg);
  overflow: hidden;
  border: 1px solid var(--border-light);
  position: relative;
  overflow-y: auto;
}

.messages-container::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--buyer-gradient);
  border-radius: 20px 20px 0 0;
}

.messages-header {
  padding: 24px 32px;
  background: var(--buyer-gradient);
  color: white;
  border-bottom: 1px solid var(--border-color);
  position: relative;
  overflow: hidden;
}

.messages-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #22d3ee 0%, #67e8f9 100%);
}

.header-title {
  font-size: 28px;
  font-weight: var(--font-weight-bold);
  margin: 0;
  display: flex;
  align-items: center;
  gap: 12px;
  letter-spacing: -0.025em;
}

.header-subtitle {
  margin: 8px 0 0 0;
  opacity: 0.95;
  font-size: 16px;
  font-weight: var(--font-weight-medium);
}

/* Messages Layout */
.messages-layout {
  display: grid;
  grid-template-columns: 320px 1fr;
  height: 70vh;
  min-height: 600px;
}

/* Manufacturers Panel - Profile Style */
.manufacturers-panel {
  background: var(--surface-color);
  border-right: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
  position: relative;
}

.manufacturers-panel::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 4px;
  height: 100%;
  background: var(--buyer-gradient);
}

.manufacturers-header {
  padding: 20px 24px;
  border-bottom: 1px solid var(--border-light);
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--buyer-card-gradient);
}

.panel-title {
  font-size: 18px;
  font-weight: var(--font-weight-bold);
  color: var(--text-primary);
  margin: 0;
  display: flex;
  align-items: center;
  gap: 8px;
}

.manufacturers-count {
  background: var(--buyer-primary);
  color: white;
  padding: 4px 10px;
  border-radius: 16px;
  font-size: 12px;
  font-weight: var(--font-weight-semibold);
  margin-left: 8px;
  box-shadow: var(--buyer-shadow-sm);
}

.add-manufacturer-btn {
  background: var(--buyer-gradient);
  color: white;
  border: none;
  padding: 10px 16px;
  border-radius: 12px;
  cursor: pointer;
  font-size: 13px;
  font-weight: var(--font-weight-semibold);
  display: flex;
  align-items: center;
  gap: 6px;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: var(--buyer-shadow);
}

.add-manufacturer-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--buyer-shadow-lg);
}

.manufacturers-search {
  padding: 16px;
  border-bottom: 1px solid var(--border-light);
}

.search-wrapper {
  position: relative;
  margin-bottom: 12px;
}

.search-wrapper i {
  position: absolute;
  left: 12px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-disabled);
}

.search-wrapper input {
  width: 100%;
  padding: 12px 16px 12px 40px;
  border: 1px solid var(--border-color);
  border-radius: 12px;
  font-size: 14px;
  background: var(--surface-color);
  color: var(--text-primary);
  font-family: var(--font-family);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.search-wrapper input:focus {
  outline: none;
  border-color: var(--buyer-primary);
  box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
  background: var(--surface-color);
}

.manufacturers-filters {
  display: flex;
  gap: 8px;
}

.filter-chip {
  padding: 8px 16px;
  border: 1px solid var(--border-color);
  border-radius: 20px;
  background: var(--surface-color);
  color: var(--text-secondary);
  font-size: 13px;
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  display: flex;
  align-items: center;
  gap: 6px;
}

.filter-chip.active {
  background: var(--buyer-gradient);
  color: white;
  border-color: var(--buyer-primary);
  box-shadow: var(--buyer-shadow);
  transform: translateY(-1px);
}

.filter-chip:hover:not(.active) {
  background: var(--buyer-card-gradient);
  border-color: var(--buyer-primary);
  color: var(--buyer-primary);
}

/* Manufacturers List */
.manufacturers-list {
  flex: 1;
  overflow-y: auto;
  padding: 8px 0;
}

.manufacturer-card {
  display: flex;
  gap: 16px;
  padding: 16px 20px;
  cursor: pointer;
  border-bottom: 1px solid var(--border-light);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  background: var(--surface-color);
}

.manufacturer-card:hover {
  background: var(--buyer-card-gradient);
  transform: translateX(4px);
}

.manufacturer-card.active {
  background: var(--buyer-card-gradient);
  border-left: 4px solid var(--buyer-primary);
  padding-left: 16px;
  box-shadow: inset 0 0 0 1px rgba(6, 182, 212, 0.2);
}

.manufacturer-avatar {
  position: relative;
  width: 48px;
  height: 48px;
  flex-shrink: 0;
}

.manufacturer-avatar img {
    width: 100%;
  height: 100%;
  border-radius: 12px;
  object-fit: cover;
  border: 2px solid var(--border-light);
  transition: all 0.3s ease;
}

.manufacturer-card:hover .manufacturer-avatar img {
  border-color: var(--buyer-primary);
}

.status-indicator {
  position: absolute;
  bottom: -2px;
  right: -2px;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  border: 3px solid var(--surface-color);
  box-shadow: var(--buyer-shadow-sm);
}

.status-indicator.online { 
  background: var(--buyer-success); 
  animation: pulse-green 2s infinite;
}
.status-indicator.away { background: var(--buyer-warning); }
.status-indicator.offline { background: var(--text-muted); }

@keyframes pulse-green {
  0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7); }
  70% { box-shadow: 0 0 0 6px rgba(16, 185, 129, 0); }
  100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
}

.verified-badge {
  position: absolute;
  top: -4px;
  right: -4px;
  width: 16px;
  height: 16px;
  background: var(--success);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 8px;
  color: white;
  border: 2px solid var(--bg-primary);
}

.verified-badge.gold {
  background: var(--warning);
}

.manufacturer-info {
  flex: 1;
  min-width: 0;
}

.manufacturer-name {
  font-size: 14px;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0 0 4px 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.manufacturer-meta {
  display: flex;
  gap: 12px;
  font-size: 12px;
  color: var(--text-secondary);
  margin-bottom: 6px;
}

.last-activity {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 11px;
  color: var(--text-disabled);
}

.unread-badge {
  background: var(--error);
  color: white;
  padding: 2px 6px;
  border-radius: 10px;
  font-size: 10px;
  font-weight: 600;
}

/* Chat Container */
.chat-container {
  display: flex;
    flex-direction: column;
  background: var(--bg-primary);
  }
  
  .chat-header {
  padding: 16px 24px;
  background: var(--bg-primary);
  border-bottom: 1px solid var(--border);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-breadcrumb {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: var(--text-secondary);
  margin-bottom: 12px;
}

.breadcrumb-link {
  color: var(--text-secondary);
  text-decoration: none;
  display: flex;
  align-items: center;
  gap: 4px;
}

.breadcrumb-link:hover {
  color: var(--primary);
}

.current-manufacturer {
  color: var(--primary);
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 6px;
}

.manufacturer-info-header {
  display: flex;
  gap: 16px;
  align-items: center;
}

.manufacturer-avatar-large {
  position: relative;
  width: 56px;
  height: 56px;
  flex-shrink: 0;
}

.manufacturer-avatar-large img {
  width: 100%;
  height: 100%;
  border-radius: 12px;
  object-fit: cover;
  border: 3px solid var(--border);
}

.status-pulse {
  position: absolute;
  bottom: -2px;
  right: -2px;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  border: 3px solid var(--bg-primary);
}

.status-pulse.online {
  background: var(--success);
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 rgba(82, 196, 26, 0.7); }
  70% { box-shadow: 0 0 0 10px rgba(82, 196, 26, 0); }
  100% { box-shadow: 0 0 0 0 rgba(82, 196, 26, 0); }
}

.manufacturer-details h2 {
  margin: 0 0 8px 0;
  font-size: 18px;
  color: var(--text-primary);
}

.manufacturer-badges {
  display: flex;
  gap: 8px;
  margin-bottom: 8px;
}

.badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 11px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 4px;
}

.badge.verified {
  background: rgba(82, 196, 26, 0.1);
  color: var(--success);
}

.badge.iso {
  background: rgba(24, 144, 255, 0.1);
  color: var(--primary);
}

.badge.online {
  background: rgba(82, 196, 26, 0.1);
  color: var(--success);
}

.manufacturer-stats {
  display: flex;
  gap: 16px;
  font-size: 12px;
  color: var(--text-secondary);
  }
  
  .chat-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.action-btn {
  padding: 8px 16px;
  border-radius: var(--radius);
  border: none;
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 6px;
  transition: all 0.2s;
}

.action-btn.primary {
  background: var(--primary);
  color: white;
}

.action-btn.primary:hover {
  background: var(--primary-dark);
}

.action-btn.secondary {
  background: var(--bg-secondary);
  color: var(--text-primary);
  border: 1px solid var(--border);
}

.action-btn.secondary:hover {
  border-color: var(--primary);
  color: var(--primary);
}

.action-btn.icon {
  padding: 8px;
  background: none;
  color: var(--text-secondary);
}

.action-btn.icon:hover {
  background: var(--bg-secondary);
  color: var(--primary);
}

/* Messages Area */
.messages-area {
  flex: 1;
  overflow-y: auto;
  padding: 16px 24px;
  background: var(--bg-secondary);
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
    justify-content: center;
  height: 100%;
  text-align: center;
  color: var(--text-secondary);
}

.empty-state i {
  font-size: 48px;
  color: var(--text-disabled);
  margin-bottom: 16px;
}

.empty-state h3 {
  margin: 0 0 8px 0;
  color: var(--text-primary);
}

.empty-state p {
  margin: 0 0 24px 0;
}

.quick-actions {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  max-width: 600px;
}

.quick-action-card {
  padding: 16px;
  background: var(--bg-primary);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  cursor: pointer;
  transition: all 0.2s;
  text-align: left;
}

.quick-action-card:hover {
  border-color: var(--primary);
  box-shadow: var(--shadow);
}

.quick-action-card i {
  font-size: 24px;
  color: var(--primary);
  margin-bottom: 8px;
}

.quick-action-card h4 {
  margin: 0 0 4px 0;
  color: var(--text-primary);
  font-size: 14px;
}

.quick-action-card p {
  margin: 0;
  font-size: 12px;
  color: var(--text-secondary);
}

/* Message Input */
.message-input-area {
  padding: 16px 24px;
  background: var(--bg-primary);
  border-top: 1px solid var(--border);
}

.input-toolbar {
  display: flex;
  gap: 8px;
  margin-bottom: 12px;
}

.toolbar-btn {
  padding: 8px 12px;
  background: var(--bg-secondary);
  border: 1px solid var(--border);
  border-radius: var(--radius);
  cursor: pointer;
  color: var(--text-secondary);
  font-size: 12px;
  display: flex;
  align-items: center;
  gap: 6px;
  transition: all 0.2s;
}

.toolbar-btn:hover {
  border-color: var(--primary);
  color: var(--primary);
}

.message-composer {
  display: flex;
  gap: 12px;
  align-items: flex-end;
}

.message-input {
  flex: 1;
  min-height: 40px;
  max-height: 120px;
  padding: 12px 16px;
  border: 1px solid var(--border);
  border-radius: var(--radius);
  resize: none;
  font-family: inherit;
  font-size: 14px;
  background: var(--bg-primary);
  color: var(--text-primary);
}

.message-input:focus {
  outline: none;
  border-color: var(--primary);
}

.send-btn {
  padding: 12px 20px;
  background: var(--primary);
  color: white;
  border: none;
  border-radius: var(--radius);
  cursor: pointer;
  font-size: 14px;
  display: flex;
  align-items: center;
  gap: 6px;
  transition: all 0.2s;
}

.send-btn:hover {
  background: var(--primary-dark);
}

.send-btn:disabled {
  background: var(--text-disabled);
  cursor: not-allowed;
}

/* ===== ATTACHMENTS PREVIEW CONTAINER ===== */
.attachments-preview-container {
  position: absolute;
  bottom: 100%;
  left: 0;
  right: 0;
  padding: 12px;
  z-index: 10;
  display: none; /* Hidden by default */
}

.attachments-preview-container.has-attachments {
  display: block;
}

/* ===== IMAGE ATTACHMENTS PREVIEW ===== */
.image-attachments-preview {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  align-items: flex-start;
  margin-bottom: 8px;
}

.image-attachment-preview {
  position: relative;
  width: 80px;
  height: 80px;
  border-radius: var(--radius);
  overflow: hidden;
  border: 2px solid hsl(var(--border));
  transition: all 0.2s ease;
  cursor: pointer;
}

.image-attachment-preview:hover {
  transform: scale(1.05);
  border-color: hsl(var(--primary));
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.preview-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: all 0.2s ease;
}

.image-remove-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.2s ease;
}

.image-attachment-preview:hover .image-remove-overlay {
  opacity: 1;
}

.image-remove-btn {
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: hsl(var(--danger));
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
}

.image-remove-btn:hover {
  background: hsl(var(--danger-dark));
  transform: scale(1.1);
}

/* ===== FILE ATTACHMENTS PREVIEW ===== */
.file-attachments-preview {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  align-items: flex-start;
}

/* File preview styling (same as image preview) */
.file-attachment-preview {
  position: relative;
  width: 80px;
  height: 80px;
  border-radius: var(--radius);
  overflow: hidden;
  border: 2px solid hsl(var(--border));
  transition: all 0.2s ease;
  cursor: pointer;
  background: hsl(var(--bg-secondary));
}

.file-attachment-preview:hover {
  transform: scale(1.05);
  border-color: hsl(var(--primary));
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.file-preview-icon {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  color: hsl(var(--text-secondary));
  background: hsl(var(--bg-secondary));
}

.file-remove-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.2s ease;
}

.file-attachment-preview:hover .file-remove-overlay {
  opacity: 1;
}

.file-remove-btn {
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: hsl(var(--danger));
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 14px;
}

.file-remove-btn:hover {
  background: hsl(var(--danger-dark));
  transform: scale(1.1);
}

/* Old file attachment styles removed - now using preview style */

.file-attachment-remove:hover {
  background: hsl(var(--danger-dark));
  transform: scale(1.1);
}

/* Responsive */
@media (max-width: 768px) {
  .messages-layout {
    grid-template-columns: 1fr;
    height: auto;
  }
  
  .manufacturers-panel {
    height: 300px;
  }
  
  .messages-wrapper {
    padding: 12px;
  }
  
  .manufacturer-stats {
    flex-direction: column;
    gap: 4px;
  }
  
  .chat-actions {
    flex-direction: column;
    align-items: stretch;
  }
  
  .image-attachment-preview {
    width: 60px;
    height: 60px;
  }
  
  .file-attachment-preview {
    width: 60px;
    height: 60px;
  }
  
  .file-preview-icon {
    font-size: 20px;
  }
}
</style>

<!-- Main Content - Chat Layout Style -->
<main class="admin-main b2b-messages-container">
  <div class="admin-content">
         <!-- Professional Telegram-Style Chat Layout -->
     <div class="section-bg animate-fade-in" style="margin-top: 24px;">
       <div class="telegram-chat-layout">
         
         <!-- Telegram-Style Conversations Sidebar -->
         <div class="conversations-sidebar">
           
           <!-- Sidebar Header -->
           <div class="sidebar-header">
             <h3 class="text-heading">
               <i class="fas fa-comments text-main"></i>
               Suhbatlar
             </h3>
           </div>
           
           <!-- Search (disabled for now) -->
           <div class="sidebar-search">
             <div class="search-wrapper">
               <i class="fas fa-search"></i>
               <input type="text" 
                      class="search-input"
                      placeholder="Avval yozishma qilgan manufacturerni qidirish..." 
                      id="conversationSearchInput">
             </div>
           </div>
          
                               <!-- Conversations List -->
          <div class="conversations-list">
            <!-- Conversations will be loaded dynamically from API -->
          </div>
        </div>
        
                 <!-- Main Chat Area -->
         <div class="chat-main-area">
           
           <!-- Enhanced Chat Header with Manufacturer Info -->
           <div class="chat-header-enhanced">
             <div class="chat-header-content">
               <div class="chat-header-left">
                 <div class="chat-header-avatar" style="display: none;">
                   <!-- Avatar will be shown when manufacturer is selected -->
                 </div>
                 <div class="chat-header-text">
                   <h3 class="text-heading chat-header-title">Biznes Xabarlari</h3>
                   <div class="chat-header-meta">
                     <span class="chat-subtitle">Professional B2B muloqot platformasi</span>
                   </div>
                 </div>
               </div>
               
               <div class="chat-header-actions" style="display: none;">
                 <!-- Actions will be shown when manufacturer is selected -->
               </div>
             </div>
           </div>
          
                     <!-- Messages Container -->
           <div class="messages-container">
             <!-- Welcome State - shown when no manufacturer selected -->
             <div class="welcome-state">
               <div class="welcome-icon">
                 <i class="fas fa-comments text-main"></i>
               </div>
               <h3 class="text-heading welcome-title">Xabar almashish</h3>
               <p class="welcome-description">Professional B2B muloqot uchun manufacturerni tanlang</p>
               
               <!-- Quick Actions - only shown when manufacturer selected -->
               <div class="quick-actions-grid" style="display: none;">
                                 <button onclick="startConversationWithTemplate('greeting')" class="quick-action-btn secondary">
                   <div class="quick-action-content">
                     <div class="quick-action-icon secondary">
                       <i class="fas fa-wave-square"></i>
                     </div>
                     <h5 class="quick-action-title secondary">Salomlashish</h5>
                   </div>
                   <p class="quick-action-description secondary">Professional salomlashish va tanishish xabari yuborish</p>
                 </button>
                 
                 <button onclick="startConversationWithTemplate('price_inquiry')" class="quick-action-btn secondary">
                   <div class="quick-action-content">
                     <div class="quick-action-icon secondary">
                       <i class="fas fa-file-invoice-dollar text-main"></i>
                     </div>
                     <h5 class="quick-action-title secondary">Narx so'rovi</h5>
                   </div>
                   <p class="quick-action-description secondary">Mahsulot narxlari va shartlar haqida so'rov yuborish</p>
                 </button>
                 
                 <button onclick="startConversationWithTemplate('sample_request')" class="quick-action-btn tertiary">
                   <div class="quick-action-content">
                     <div class="quick-action-icon tertiary">
                       <i class="fas fa-cube text-main"></i>
                     </div>
                     <h5 class="quick-action-title tertiary">Namuna so'rovi</h5>
                   </div>
                   <p class="quick-action-description tertiary">Mahsulot namunalari va katalog so'rash</p>
                 </button>
                 
                 <button onclick="startConversationWithTemplate('order_inquiry')" class="quick-action-btn tertiary">
                   <div class="quick-action-content">
                     <div class="quick-action-icon tertiary">
                       <i class="fas fa-shopping-cart text-main"></i>
                     </div>
                     <h5 class="quick-action-title tertiary">Buyurtma so'rovi</h5>
                   </div>
                   <p class="quick-action-description tertiary">Buyurtma berish va yetkazib berish haqida</p>
                 </button>
              </div>
            </div>
          </div>
          
                     <!-- Telegram-Style Message Input Area - Hidden by default -->
           <div class="b2b-message-input-area" style="display: none;">
             <div class="b2b-input-container">
               <!-- Telegram-Style Message Form -->
               <form class="b2b-message-input-form" id="messageForm">
                 
                 <div class="b2b-input-wrapper">
                   <!-- Attachments Preview Container (Absolute Position) -->
                   <div id="attachmentsPreviewContainer" class="attachments-preview-container">
                     <!-- Image Attachments Preview -->
                     <div id="imageAttachmentsPreview" class="image-attachments-preview"></div>
                     
                     <!-- File Attachments Preview -->
                     <div id="fileAttachmentsPreview" class="file-attachments-preview"></div>
                   </div>
                   
                   <div class="message-input-container">
                     <textarea id="messageInput" 
                               class="b2b-message-input"
                               placeholder="Xabar yozing yoki fayl tanlang (textsiz ham mumkin)..."
                               rows="1"
                               maxlength="10000"
                               onkeydown="handleProfessionalKeyPress(event)"
                               oninput="handleProfessionalInputChange()"></textarea>
                   </div>
                   
                   <!-- Attachment and Send Buttons -->
                   <div class="input-actions">
                     <div class="telegram-attachment-wrapper">
                       <button type="button" class="telegram-attachment-btn" id="attachmentBtn" title="Biriktirishlar">
                         <i class="fas fa-paperclip"></i>
                       </button>
                       
                       <!-- Telegram-Style Dropdown Menu -->
                       <div class="telegram-attachment-menu" id="attachmentMenu">
                         <button type="button" class="telegram-menu-item" onclick="window.professionalBuyerMessages.triggerFileInput('file')">
                           <div class="menu-item-icon file">
                             <i class="fas fa-file-alt"></i>
                           </div>
                           <span>Fayl</span>
                         </button>
                         <button type="button" class="telegram-menu-item" onclick="window.professionalBuyerMessages.triggerFileInput('image')">
                           <div class="menu-item-icon image">
                             <i class="fas fa-image"></i>
                           </div>
                           <span>Rasm</span>
                         </button>
                         <button type="button" class="telegram-menu-item" onclick="insertEmoji()">
                           <div class="menu-item-icon emoji">
                             <i class="fas fa-smile"></i>
                           </div>
                           <span>Emoji</span>
                         </button>
                       </div>
                     </div>
                     
                     <button type="button" class="b2b-send-button" id="sendButton" disabled>
                       <i class="fas fa-paper-plane"></i>
                     </button>
                   </div>
                 </div>
                 
                 <!-- Input Footer with Character Counter -->
                 <div class="b2b-input-footer">
                   <div class="b2b-char-counter">
                     <i class="fas fa-keyboard"></i>
                     <span id="charCount">0</span>/10,000
                   </div>
                   <div class="b2b-input-hints">
                     <span><kbd class="hint-kbd">Enter</kbd> yuborish</span>
                     <span><kbd class="hint-kbd">Shift+Enter</kbd> yangi qator</span>
                   </div>
                 </div>
                 
                 <!-- Hidden file inputs -->
                  <input type="file" id="fileInput" style="display: none;" accept="*/*" multiple onchange="handleFileSelect(event)">
                  <input type="file" id="imageInput" style="display: none;" accept="image/*" multiple onchange="handleImageSelect(event)">
               </form>
             </div>
           </div>
        </div>
      </div>
    </div>

  </div>
</main>
<!-- Professional B2B Messaging JavaScript -->
<script>
class ProfessionalBuyerMessages {
  constructor() {
    this.currentOrderId = null;
    this.currentManufacturerId = null;
    this.currentConversationId = null;
    this.conversations = [];
    this.messages = [];
    this.manufacturerDetails = null;
    this.isSending = false; // Prevent duplicate message sending
    this.attachments = []; // Store selected files
    this.maxFileSize = 10 * 1024 * 1024; // 10MB
    this.maxImageCount = 5; // Maximum 5 images
    this.maxFileCount = 1; // Maximum 1 file
    this.allowedFileTypes = {
      image: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
      document: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'],
      spreadsheet: ['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'],
      archive: ['application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed']
    };
    this.searchQuery = '';
    this.searchTimeout = null;
    this.init();
  }

  init() {
    this.messageInput = document.getElementById('messageInput');
    this.sendButton = document.getElementById('sendButton');
    this.charCount = document.getElementById('charCount');
    this.attachmentBtn = document.getElementById('attachmentBtn');
    this.attachmentMenu = document.getElementById('attachmentMenu');
    
    if (this.messageInput) {
      this.messageInput.addEventListener('input', () => this.updateSendButton());
      this.messageInput.addEventListener('keydown', (e) => this.handleKeyPress(e));
    }
    
    // Send button click event
    if (this.sendButton) {
      this.sendButton.addEventListener('click', (e) => {
        e.preventDefault();
        this.sendMessage();
      });
    }
    
    // Attachment menu toggle
    if (this.attachmentBtn) {
      this.attachmentBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleAttachmentMenu();
      });
    }
    
    // File input event listeners
    this.setupFileInputs();
    
    // Search input event listener
    this.setupSearchInput();
    
    // Close attachment menu when clicking outside
    document.addEventListener('click', (e) => {
      if (this.attachmentMenu && !this.attachmentMenu.contains(e.target) && !this.attachmentBtn.contains(e.target)) {
        this.hideAttachmentMenu();
      }
    });

    // Check for URL parameters and load appropriate content
    this.checkUrlParameters();
  }

  // Check URL parameters for manufacturer ID
  checkUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    const manufacturerId = urlParams.get('manufacturer');
    
    if (manufacturerId) {
      this.currentManufacturerId = manufacturerId;
      this.loadManufacturerConversation(manufacturerId);
    } else {
      this.loadConversations();
    }
  }

  // Debounced search to avoid too many API calls
  debouncedSearch() {
    if (this.searchTimeout) {
      clearTimeout(this.searchTimeout);
    }
    
    this.searchTimeout = setTimeout(() => {
      this.performSearch();
    }, 300); // 300ms delay
  }

  // Perform search with API integration
  async performSearch() {
    try {
      if (!this.searchQuery) {
        // If no search query, load all conversations
        await this.loadConversations();
        return;
      }
      
      this.showLoadingState('conversations');
      
      // Search conversations by company name using new API
      const currentManufacturerId = this.getCurrentManufacturerId();
      const url = currentManufacturerId ? 
        `/buyer/api/conversations-with-current?search=${encodeURIComponent(this.searchQuery)}&manufacturer=${currentManufacturerId}` : 
        `/buyer/api/conversations?search=${encodeURIComponent(this.searchQuery)}`;
      
      const response = await fetch(url);
      
      if (!response.ok) {
        console.warn(`Search API error: ${response.status}`);
        return;
      }
      
      const data = await response.json();
      
      if (data.success) {
        this.conversations = data.data.conversations;
        this.renderConversations();
        
        if (this.conversations.length === 0) {
          this.showNoSearchResults();
        }
      }
      
    } catch (error) {
      console.error('❌ Search error:', error);
      this.showErrorMessage('Qidiruvda xatolik yuz berdi');
    } finally {
      this.hideLoadingState('conversations');
    }
  }

  // Load conversations from API with professional error handling
  async loadConversations() {
    try {
      this.showLoadingState('conversations');
      
      // Use new API endpoint that includes current manufacturer at top
      const currentManufacturerId = this.getCurrentManufacturerId();
      const url = currentManufacturerId ? 
        `/buyer/api/conversations-with-current?manufacturer=${currentManufacturerId}` : 
        '/buyer/api/conversations';
      
      console.log('🔍 Loading conversations with URL:', url);
      console.log('🔍 Current Manufacturer ID:', currentManufacturerId);
      
      const response = await fetch(url);
      
      if (!response.ok) {
        console.warn(`API endpoint not available: ${response.status}`);
        // Silently handle API unavailability - show empty state
        this.conversations = [];
        this.renderEmptyConversations();
        this.showDefaultChatHeader();
        this.showWelcomeState();
        return;
      }
      
      const data = await response.json();
      console.log('🔍 API Response:', data);
      
      if (data.success) {
        this.conversations = data.data.conversations;
        console.log('🔍 Conversations loaded:', this.conversations);
        this.renderConversations();
        
        // Show default chat header when showing all conversations
        this.showDefaultChatHeader();
        
        // Show welcome state if no conversations
        if (this.conversations.length === 0) {
          this.showWelcomeState();
        }
      } else {
        // Handle API error gracefully
        this.conversations = [];
        this.renderEmptyConversations();
        this.showDefaultChatHeader();
        this.showWelcomeState();
      }
    } catch (error) {
      console.warn('Conversations API not available:', error);
      // Silently handle connection errors - show empty state
      this.conversations = [];
      this.renderEmptyConversations();
      this.showDefaultChatHeader();
      this.showWelcomeState();
    }
  }

  // Get current manufacturer ID from URL
  getCurrentManufacturerId() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('manufacturer');
  }

  // Format last message content for sidebar display
  formatLastMessageContent(lastMessage) {
    if (!lastMessage || !lastMessage.content) {
      // Handle different message types when content is null
      switch (lastMessage?.type) {
        case 'image':
          return '🖼️ Rasm';
        case 'file':
          return '📎 Fayl';
        case 'system':
          return 'ℹ️ Tizim xabari';
        case 'order_update':
          return '📋 Buyurtma yangilandi';
        default:
          return '💬 Xabar';
      }
    }
    
    // If content exists, return it
    return lastMessage.content;
  }

  // Load manufacturer conversation with professional error handling
  async loadManufacturerConversation(manufacturerId) {
    try {
      this.showLoadingState('conversations');
      this.showLoadingState('messages');
      
      // Get manufacturer details and conversation
      const [detailsResponse, conversationResponse] = await Promise.all([
        fetch(`/buyer/api/manufacturer/${manufacturerId}/details`),
        fetch(`/buyer/api/manufacturer/${manufacturerId}/conversation`)
      ]);
      
      if (!detailsResponse.ok || !conversationResponse.ok) {
        throw new Error('Failed to load manufacturer data');
      }
      
      const detailsData = await detailsResponse.json();
      const conversationData = await conversationResponse.json();
      
      if (detailsData.success && conversationData.success) {
        this.manufacturerDetails = detailsData.data.manufacturer;
        this.currentOrderId = conversationData.data.orderId;
        this.messages = conversationData.data.messages;
        
        // Set current conversation ID for active state
        this.currentConversationId = conversationData.data.orderId.toString();
        
        console.log('✅ Manufacturer conversation loaded:');
        console.log('🏭 Manufacturer Details:', this.manufacturerDetails);
        console.log('🆔 Order ID:', this.currentOrderId);
        console.log('🆔 Order ID Type:', typeof this.currentOrderId);
        console.log('📝 Messages Count:', this.messages.length);
        console.log('📊 Conversation Data:', conversationData.data);
        
        // Ensure currentOrderId is properly set
        if (!this.currentOrderId) {
          console.error('❌ Failed to set currentOrderId from conversation data');
          console.log('🔍 Conversation data structure:', conversationData.data);
          throw new Error('Order ID not found in conversation data');
        }
        
        // Convert ObjectId to string if needed
        if (typeof this.currentOrderId === 'object' && this.currentOrderId._id) {
          this.currentOrderId = this.currentOrderId._id.toString();
        } else if (typeof this.currentOrderId === 'object') {
          this.currentOrderId = this.currentOrderId.toString();
        }
        
        console.log('🔄 Final Order ID:', this.currentOrderId);
        console.log('🔄 Final Order ID Type:', typeof this.currentOrderId);
        
        // Load all conversations including current manufacturer
        await this.loadConversations();
        
        // If loadConversations failed or returned empty, create single conversation for sidebar
        if (this.conversations.length === 0) {
          this.conversations = [{
            id: conversationData.data.orderId.toString(),
            orderId: conversationData.data.orderId,
            orderNumber: conversationData.data.orderNumber,
            supplier: {
              id: this.manufacturerDetails.id,
              name: this.manufacturerDetails.companyName,
              email: this.manufacturerDetails.email,
              companyLogo: this.manufacturerDetails.companyLogo,
              phone: this.manufacturerDetails.phone
            },
            lastMessage: {
              content: this.messages.length > 0 ? 
                this.messages[this.messages.length - 1].content : 
                'Suhbatni boshlang',
              timestamp: this.messages.length > 0 ? 
                this.messages[this.messages.length - 1].createdAt : 
                new Date(),
              sender: 'System',
              type: 'system'
            },
            unreadCount: conversationData.data.unreadCount,
            isOnline: this.manufacturerDetails.isOnline,
            orderStatus: conversationData.data.orderStatus,
            orderValue: 0,
            currency: 'USD'
          }];
        }
        
        // renderConversations() is already called in loadConversations(), so no need to call it again
        this.renderMessages();
        this.updateChatHeader();
        
        // Show manufacturer welcome and quick actions if no messages exist
        if (this.messages.length === 0) {
          this.showManufacturerWelcome(this.manufacturerDetails);
        }
        
        // Mark first conversation as active
        setTimeout(() => {
          const firstConversation = document.querySelector('.conversation-item');
          if (firstConversation) {
            firstConversation.classList.add('active');
          }
        }, 100);
        
      } else {
        this.showErrorState('conversations', 'Manufacturer ma\'lumotlarini yuklashda xatolik');
        this.showErrorState('messages', 'Suhbat ma\'lumotlarini yuklashda xatolik');
      }
    } catch (error) {
      console.error('Error loading manufacturer conversation:', error);
      this.showErrorState('conversations', 'Manufacturer bilan bog\'lanishda xatolik');
      this.showErrorState('messages', 'Xabarlarni yuklashda xatolik');
    }
  }

  // Update chat header - Show manufacturer details when selected, default state otherwise
  updateChatHeader(manufacturerData = null) {
    const chatHeader = document.querySelector('.chat-header-enhanced');
    const avatar = document.querySelector('.chat-header-avatar');
    const title = document.querySelector('.chat-header-title');
    const meta = document.querySelector('.chat-header-meta');
    const actions = document.querySelector('.chat-header-actions');
    
    if (!chatHeader) return;
    
    // If no manufacturer data, show default state
    if (!manufacturerData && !this.manufacturerDetails) {
      this.showDefaultChatHeader();
      return;
    }
    
    const manufacturer = manufacturerData || this.manufacturerDetails;
    
    // Show manufacturer-specific header
    if (avatar) {
      avatar.style.display = 'block';
      
      // Use product details page approach for company logo
      if (manufacturer.companyLogo && manufacturer.companyLogo.url) {
      avatar.innerHTML = `
          <img src="${manufacturer.companyLogo.url}" alt="${manufacturer.companyName}" onerror="handleLogoError(this)">
          <div class="chat-header-status ${manufacturer.isOnline ? 'online' : 'offline'}"></div>
        `;
      } else {
        avatar.innerHTML = `
          <div class="logo-placeholder">
            <i class="fas fa-building"></i>
          </div>
        <div class="chat-header-status ${manufacturer.isOnline ? 'online' : 'offline'}"></div>
      `;
      }
    }
    
    if (title) {
      title.textContent = manufacturer.companyName;
    }
    
    if (meta) {
      meta.innerHTML = `
        <span>
          <div class="online-indicator ${manufacturer.isOnline ? 'online' : 'offline'}"></div>
          ${manufacturer.isOnline ? 'Onlayn' : 'Oflayn'}
        </span>
        ${manufacturer.email ? `
        <span>
          <i class="fas fa-envelope"></i>
          ${manufacturer.email}
        </span>
        ` : ''}
        ${manufacturer.phone ? `
        <span>
          <i class="fas fa-phone"></i>
          ${manufacturer.phone}
        </span>
        ` : ''}
      `;
    }
    
    if (actions) {
      actions.style.display = 'flex';
      actions.innerHTML = `
        ${manufacturer.phone ? `
        <button onclick="window.location.href='tel:${manufacturer.phone}'" class="chat-action-btn">
          <i class="fas fa-phone"></i>
          <span>Qo'ng'iroq</span>
        </button>
        ` : ''}
        <button onclick="window.location.href='/supplier/${manufacturer.id}'" class="chat-action-btn">
          <i class="fas fa-building"></i>
          <span>Profil</span>
        </button>
      `;
    }
    
    // Show input area and quick actions when manufacturer is selected
    const inputArea = document.querySelector('.b2b-message-input-area');
    const quickActions = document.querySelector('.quick-actions-grid');
    if (inputArea) inputArea.style.display = 'block';
    if (quickActions) quickActions.style.display = 'grid';
  }

  // Show default chat header state
  showDefaultChatHeader() {
    const avatar = document.querySelector('.chat-header-avatar');
    const title = document.querySelector('.chat-header-title');
    const meta = document.querySelector('.chat-header-meta');
    const actions = document.querySelector('.chat-header-actions');
    
    if (avatar) avatar.style.display = 'none';
    if (title) title.textContent = 'Biznes Xabarlari';
    if (meta) {
      meta.innerHTML = '<span class="chat-subtitle">Professional B2B muloqot platformasi</span>';
    }
    if (actions) actions.style.display = 'none';
  }

  // Render conversations in sidebar
  renderConversations() {
    const conversationsList = document.querySelector('.conversations-list');
    if (!conversationsList) return;

    console.log('🔍 Rendering conversations:', this.conversations);
    console.log('🔍 Conversations length:', this.conversations.length);
    console.log('🔍 Unique conversations length:', uniqueConversations.length);
    console.log('🔍 Duplicates removed:', this.conversations.length - uniqueConversations.length);

    if (this.conversations.length === 0) {
      conversationsList.innerHTML = `
        <div class="no-conversations">
          <div class="no-conversations-icon">
            <i class="fas fa-comments"></i>
        </div>
          <h4>Hozircha suhbatlar yo'q</h4>
          <p>Buyurtma berganingizdan so'ng ishlab chiqaruvchilar bilan suhbat boshlashingiz mumkin</p>
      </div>
    `;
      return;
    }

    // Remove duplicate conversations by supplier ID (frontend duplicate prevention)
    const uniqueConversations = [];
    const seenSuppliers = new Set();
    
    for (const conv of this.conversations) {
      if (!seenSuppliers.has(conv.supplier.id)) {
        seenSuppliers.add(conv.supplier.id);
        uniqueConversations.push(conv);
      } else {
        // If duplicate found, keep the one with latest message
        const existingIndex = uniqueConversations.findIndex(c => c.supplier.id === conv.supplier.id);
        if (existingIndex !== -1) {
          const existing = uniqueConversations[existingIndex];
          if (new Date(conv.lastMessage.timestamp) > new Date(existing.lastMessage.timestamp)) {
            uniqueConversations[existingIndex] = conv; // Replace with newer one
          }
        }
      }
    }

    // Separate current manufacturer and other conversations
    const currentManufacturerId = this.getCurrentManufacturerId();
    const currentConversation = uniqueConversations.find(conv => conv.supplier.id === currentManufacturerId);
    const otherConversations = uniqueConversations.filter(conv => conv.supplier.id !== currentManufacturerId);

    // Only show current manufacturer at top if it has no messages (new conversation)
    const shouldShowCurrentAtTop = currentConversation && !currentConversation.hasMessages;

    console.log('🔍 Current Manufacturer ID:', currentManufacturerId);
    console.log('🔍 Current Conversation:', currentConversation);
    console.log('🔍 Other Conversations:', otherConversations);
    console.log('🔍 Other Conversations Count:', otherConversations.length);

    let conversationsHTML = '';

    // Show current manufacturer at top only if it has no messages (new conversation)
    if (shouldShowCurrentAtTop) {
      conversationsHTML += `
        <div class="conversation-item current-manufacturer ${currentConversation.id === this.currentConversationId ? 'active' : ''}" 
             data-conversation-id="${currentConversation.id}"
             data-conversation-index="0"
             onclick="this.selectConversation('${currentConversation.id}', '${currentConversation.supplier.id}')">
          <div class="conversation-content">
            <div class="conversation-avatar">
              ${currentConversation.supplier.companyLogo && currentConversation.supplier.companyLogo.url ? 
                `<img src="${currentConversation.supplier.companyLogo.url}" alt="${currentConversation.supplier.name}" class="avatar-img" onerror="handleLogoError(this)">` :
                currentConversation.supplier.avatar && currentConversation.supplier.avatar !== '/assets/images/default-company.svg' ?
                  `<img src="${currentConversation.supplier.avatar}" alt="${currentConversation.supplier.name}" class="avatar-img" onerror="handleLogoError(this)">` :
                  `<div class="logo-placeholder"><i class="fas fa-building"></i></div>`
              }
              <div class="conversation-status ${currentConversation.isOnline ? 'online' : 'offline'}"></div>
            </div>
            <div class="conversation-details">
              <div class="conversation-header">
                <h4 class="conversation-name">${currentConversation.supplier.name} <span class="current-badge">Hozir</span></h4>
                <span class="conversation-time">${this.formatTime(currentConversation.lastMessage.timestamp)}</span>
              </div>
              <div class="conversation-preview">
                <p class="last-message">${this.formatLastMessageContent(currentConversation.lastMessage)}</p>
                ${currentConversation.unreadCount > 0 ? `<span class="unread-badge">${currentConversation.unreadCount}</span>` : ''}
              </div>
              <div class="conversation-meta">
                <span class="order-info">${currentConversation.orderNumber}</span>
                <span class="status-badge ${currentConversation.orderStatus}">${this.formatStatus(currentConversation.orderStatus)}</span>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    // Show other conversations (including current manufacturer if it has messages)
    const conversationsToShow = shouldShowCurrentAtTop ? otherConversations : uniqueConversations;
    conversationsToShow.forEach((conv, index) => {
      const isCurrent = conv.supplier.id === currentManufacturerId;
      conversationsHTML += `
        <div class="conversation-item ${isCurrent ? 'current-manufacturer' : ''} ${conv.id === this.currentConversationId ? 'active' : ''}" 
             data-conversation-id="${conv.id}"
             data-conversation-index="${index}"
             onclick="this.selectConversation('${conv.id}', '${conv.supplier.id}')">
          <div class="conversation-content">
            <div class="conversation-avatar">
              ${conv.supplier.companyLogo && conv.supplier.companyLogo.url ? 
                `<img src="${conv.supplier.companyLogo.url}" alt="${conv.supplier.name}" class="avatar-img" onerror="handleLogoError(this)">` :
                conv.supplier.avatar && conv.supplier.avatar !== '/assets/images/default-company.svg' ?
                  `<img src="${conv.supplier.avatar}" alt="${conv.supplier.name}" class="avatar-img" onerror="handleLogoError(this)">` :
                  `<div class="logo-placeholder"><i class="fas fa-building"></i></div>`
              }
              <div class="conversation-status ${conv.isOnline ? 'online' : 'offline'}"></div>
            </div>
            <div class="conversation-details">
              <div class="conversation-header">
                <h4 class="conversation-name">${conv.supplier.name}${isCurrent ? ' <span class="current-badge">Hozir</span>' : ''}</h4>
                <span class="conversation-time">${this.formatTime(conv.lastMessage.timestamp)}</span>
              </div>
              <div class="conversation-preview">
                <p class="last-message">${this.formatLastMessageContent(conv.lastMessage)}</p>
                ${conv.unreadCount > 0 ? `<span class="last-message-unread-badge">${conv.unreadCount}</span>` : ''}
              </div>
              <div class="conversation-meta">
                <span class="order-info">${conv.orderNumber}</span>
                <span class="status-badge ${conv.orderStatus}">${this.formatStatus(conv.orderStatus)}</span>
              </div>
            </div>
          </div>
        </div>
      `;
    });

    conversationsList.innerHTML = conversationsHTML;
  }

  // Render empty conversations list (when there's an error or no data)
  renderEmptyConversations() {
    const conversationsList = document.querySelector('.conversations-list');
    if (conversationsList) {
      conversationsList.innerHTML = `
        <div class="no-conversations">
          <div class="no-conversations-icon">
            <i class="fas fa-comments"></i>
          </div>
          <h4>Hali suhbatlar yo'q</h4>
          <p>Manufacturer bilan suhbat boshlash uchun product details yoki supplier profile sahifasiga o'ting</p>
        </div>
      `;
    }
  }

  // Show no search results state
  showNoSearchResults() {
    const conversationsList = document.querySelector('.conversations-list');
    if (conversationsList) {
      conversationsList.innerHTML = `
        <div class="no-search-results">
          <div class="no-search-results-icon">
            <i class="fas fa-search"></i>
          </div>
          <h4>Qidiruv natijasi topilmadi</h4>
          <p>"${this.searchQuery}" bo'yicha hech qanday suhbat topilmadi</p>
          <button class="clear-search-btn" onclick="this.clearSearch()">
            <i class="fas fa-times"></i>
            Qidiruvni tozalash
          </button>
        </div>
      `;
    }
  }

  // Clear search and show all conversations
  clearSearch() {
    const searchInput = document.getElementById('conversationSearchInput');
    if (searchInput) {
      searchInput.value = '';
      this.searchQuery = '';
    }
    this.loadConversations();
  }

  // Load messages for specific order with professional error handling
  async loadMessages(orderId) {
    try {
      this.showLoadingState('messages');
      
      const response = await fetch(`/buyer/api/orders/${orderId}/messages`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success) {
        this.messages = data.data.messages;
        this.renderMessages();
      } else {
        this.showErrorState('messages', data.message || 'Failed to load messages');
      }
    } catch (error) {
      console.error('Error loading messages:', error);
      this.showErrorState('messages', 'Xabarlarni yuklashda xatolik yuz berdi');
    }
  }

  // Render messages in chat area with manufacturer chat style
  renderMessages() {
    const messagesContainer = document.querySelector('.messages-container');
    if (!messagesContainer) return;

    if (this.messages.length === 0) {
      // Show welcome state
      this.showWelcomeState();
      return;
    }

    // Group messages by date
    const messagesByDate = this.groupMessagesByDate(this.messages);
    
    messagesContainer.innerHTML = Object.entries(messagesByDate).map(([date, messages]) => `
      <div class="message-date-group">
        <div class="telegram-date-separator">
          <span>${date}</span>
        </div>
        ${messages.map(msg => this.renderMessage(msg)).join('')}
      </div>
    `).join('');
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Render single message with Telegram style
  renderMessage(message) {
    const currentUserId = '<%= user._id %>'; // Get current user ID from EJS
    const isOwn = message.senderId._id === currentUserId;
    
    return `
      <div class="telegram-message ${isOwn ? 'own' : ''}">
        ${!isOwn ? `
          <div class="telegram-message-avatar">
            <img src="${this.manufacturerDetails?.companyLogo?.url || '/assets/images/avatars/default-company.png'}" 
                 alt="${this.manufacturerDetails?.companyName || 'Manufacturer'}"
                 onerror="this.src='/assets/images/avatars/default-company.png'">
        </div>
        ` : ''}
        
        <div class="telegram-message-content">
          <div class="telegram-message-bubble">
            ${message.content ? `
              <div class="telegram-message-text">
                ${message.content.replace(/\n/g, '<br>')}
        </div>
            ` : ''}
            
            ${message.attachments && message.attachments.length > 0 ? `
              <div class="telegram-message-attachments">
                ${message.attachments.map(attachment => this.renderAttachment(attachment)).join('')}
              </div>
            ` : ''}
            
            ${!message.content && message.attachments && message.attachments.length > 0 ? `
              <div class="telegram-message-info">
                <small class="telegram-file-only"></small>
              </div>
            ` : ''}
            
            <div class="telegram-message-footer">
              <div class="telegram-message-time">
                ${this.formatTime(message.createdAt)}
              </div>
              ${isOwn ? `
                <div class="telegram-message-status">
                  ${message.status === 'read' ? 
                    '<i class="fas fa-check-double telegram-status-read" title="O\'qildi"></i>' : 
                    message.status === 'delivered' ? 
                    '<i class="fas fa-check-double telegram-status-delivered" title="Yetkazildi"></i>' : 
                    '<i class="fas fa-check telegram-status-sent" title="Yuborildi"></i>'
                  }
                </div>
              ` : ''}
            </div>
          </div>
        </div>
        
        ${isOwn ? `
          <div class="telegram-message-avatar">
            <img src="<%= user.companyLogo?.url || '/assets/images/avatars/default-company.png' %>" 
                 alt="<%= user.companyName || 'Buyer' %>"
                 onerror="this.src='/assets/images/avatars/default-company.png'">
          </div>
        ` : ''}
      </div>
    `;
  }

  // Render attachment with professional styling
  renderAttachment(attachment) {
    // Check if it's an image based on file extension or mimeType
    const isImage = (attachment.mimeType && attachment.mimeType.startsWith('image/')) || 
                   (attachment.originalName && /\.(jpg|jpeg|png|gif|webp)$/i.test(attachment.originalName));
    
    if (isImage) {
      return `
        <div class="telegram-attachment-image">
          <img src="${attachment.url}" 
               alt="${attachment.originalName || 'Image'}" 
               onclick="openImageModal('${attachment.url}', '${attachment.originalName || 'Image'}')"
               onerror="this.src='/assets/images/no-image.png'; this.onerror=null;">
          <div class="telegram-image-overlay">
            <i class="fas fa-search-plus"></i>
          </div>
        </div>
      `;
    } else {
      return `
        <div class="telegram-attachment-file">
          <div class="telegram-file-icon">
            <i class="fas fa-file-alt"></i>
          </div>
          <div class="telegram-file-details">
            <h6>${attachment.originalName || 'File'}</h6>
            <p>${(attachment.size / 1024).toFixed(1)} KB</p>
          </div>
          <div class="telegram-file-actions">
            <a href="${attachment.url}" download="${attachment.originalName}" class="telegram-file-download" title="Yuklab olish">
              <i class="fas fa-download"></i>
            </a>
          </div>
        </div>
      `;
    }
  }

  // Send message with professional error handling and typing indicator
  async sendMessage(event) {
    // Prevent duplicate submissions
    if (event) {
    event.preventDefault();
    }
    
    // Check if already sending
    if (this.isSending) {
      console.log('🔄 Message already being sent, ignoring duplicate request');
      return;
    }
    
    const messageContent = this.messageInput.value.trim();
    const hasAttachments = this.attachments.length > 0;
    
    // Allow sending if there's text OR attachments
    if ((!messageContent && !hasAttachments) || !this.currentOrderId) {
      if (!messageContent && !hasAttachments) {
        this.showErrorMessage('Xabar matni yoki fayl tanlang');
      }
      return;
    }

    try {
      // Set sending state to prevent duplicates
      this.isSending = true;
      
      // Disable send button during sending
      this.setSendingState(true);
      
      // Show typing indicator
      this.showTypingIndicator();
      
      console.log('📤 Sending message:', messageContent);
      console.log('📎 Attachments:', this.attachments.length);
      console.log('🆔 Current Order ID:', this.currentOrderId);
      console.log('🏭 Current Manufacturer ID:', this.currentManufacturerId);
      
      // Validate currentOrderId
      if (!this.currentOrderId) {
        console.error('❌ No current order ID found');
        this.showErrorMessage('Buyurtma ma\'lumotlari topilmadi. Iltimos, sahifani yangilang');
        return;
      }
      
      // Create FormData for file upload
      const formData = new FormData();
      formData.append('orderId', this.currentOrderId);
      
      // Only append message if user typed something
      if (messageContent && messageContent.trim()) {
        formData.append('message', messageContent.trim());
      }
      
      // Add attachments if any
      this.attachments.forEach((attachment, index) => {
        formData.append('attachments', attachment.file);
      });
      
      // Debug FormData contents
      console.log('📋 FormData contents:');
      for (let [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }
      
      const response = await fetch('/buyer/api/send-message', {
      method: 'POST',
        body: formData // Send as FormData for file upload
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.success) {
        console.log('✅ Message sent successfully');
        
        // Hide typing indicator
        this.hideTypingIndicator();
        
        // Clear input and attachments
        this.messageInput.value = '';
        this.attachments = [];
        this.renderAttachments();
        this.updateSendButton();
        
        // Reload messages
        await this.loadMessages(this.currentOrderId);
        
        // Update conversations list
        await this.loadConversations();
        
        // Show appropriate success message
        if (messageContent && this.attachments.length > 0) {
          this.showSuccessMessage('Xabar va fayllar muvaffaqiyatli yuborildi');
        } else if (this.attachments.length > 0) {
          this.showSuccessMessage('Fayllar muvaffaqiyatli yuborildi');
        } else {
        this.showSuccessMessage('Xabar muvaffaqiyatli yuborildi');
        }
      } else {
        console.log('❌ Message send failed:', data.message);
        this.hideTypingIndicator();
        this.showErrorMessage(data.message || 'Xabar yuborishda xatolik');
      }
    } catch (error) {
      console.error('❌ Error sending message:', error);
      this.hideTypingIndicator();
      this.showErrorMessage('Xabar yuborishda xatolik yuz berdi');
    } finally {
      // Reset sending state
      this.isSending = false;
      this.setSendingState(false);
    }
  }

  // Setup file input event listeners
  setupFileInputs() {
    const fileInput = document.getElementById('fileInput');
    const imageInput = document.getElementById('imageInput');
    
    if (fileInput) {
      fileInput.addEventListener('change', (e) => this.handleFileSelect(e));
    }
    
    if (imageInput) {
      imageInput.addEventListener('change', (e) => this.handleImageSelect(e));
    }
  }

  // Setup search input with debounced search
  setupSearchInput() {
    const searchInput = document.getElementById('conversationSearchInput');
    
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        this.searchQuery = e.target.value.trim();
        this.debouncedSearch();
      });
      
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.performSearch();
        }
      });
    }
  }

  // Handle file selection with validation
  async handleFileSelect(event) {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;
    
    let addedCount = 0;
    for (const file of files) {
      if (this.validateFile(file)) {
        await this.addAttachment(file);
        addedCount++;
      }
    }
    
    if (addedCount > 0) {
      this.showSuccessMessage(`${addedCount} ta fayl muvaffaqiyatli qo'shildi`);
    }
    
    // Clear input for next selection
    event.target.value = '';
    this.hideAttachmentMenu();
  }

  // Handle image selection with validation
  async handleImageSelect(event) {
    const files = Array.from(event.target.files);
    if (files.length === 0) return;
    
    let addedCount = 0;
    for (const file of files) {
      if (this.validateFile(file, 'image')) {
        await this.addAttachment(file);
        addedCount++;
      }
    }
    
    if (addedCount > 0) {
      this.showSuccessMessage(`${addedCount} ta rasm muvaffaqiyatli qo'shildi`);
    }
    
    // Clear input for next selection
    event.target.value = '';
    this.hideAttachmentMenu();
  }

  // Validate file before adding
  validateFile(file, type = null) {
    // Check file size
    if (file.size > this.maxFileSize) {
      this.showErrorMessage(`Fayl hajmi juda katta: ${(file.size / 1024 / 1024).toFixed(1)}MB. Maksimal: 10MB`);
      return false;
    }
    
    // Check file type
    if (type === 'image') {
      if (!this.allowedFileTypes.image.includes(file.type)) {
        this.showErrorMessage(`Rasm formati noto'g'ri: ${file.type}. Faqat: JPEG, PNG, GIF, WebP`);
        return false;
      }
      
      // Check image count limit
      const currentImageCount = this.attachments.filter(att => att.type.startsWith('image/')).length;
      if (currentImageCount >= this.maxImageCount) {
        this.showErrorMessage(`Rasm soni juda ko'p! Maksimal ${this.maxImageCount} ta rasm tanlash mumkin`);
        return false;
      }
    } else {
      const isValidType = Object.values(this.allowedFileTypes).flat().includes(file.type);
      if (!isValidType) {
        this.showErrorMessage(`Fayl formati noto'g'ri: ${file.type}`);
        return false;
      }
      
      // Check file count limit
      const currentFileCount = this.attachments.filter(att => !att.type.startsWith('image/')).length;
      if (currentFileCount >= this.maxFileCount) {
        this.showErrorMessage(`Fayl soni juda ko'p! Maksimal ${this.maxFileCount} ta fayl tanlash mumkin`);
        return false;
      }
    }
    
    return true;
  }

  // Add file to attachments list
  async addAttachment(file) {
    const attachment = {
      id: `att_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      file: file,
      name: file.name,
      size: file.size,
      type: file.type,
      preview: null
    };
    
    // Create preview for images
    if (file.type.startsWith('image/')) {
      attachment.preview = await this.createFilePreview(file);
    }
    
    this.attachments.push(attachment);
    this.renderAttachments();
    this.updateSendButton();
    
    console.log('📎 Attachment added:', attachment.name);
  }

  // Create file preview
  createFilePreview(file) {
    if (file.type.startsWith('image/')) {
      return new Promise((resolve) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.readAsDataURL(file);
      });
    }
    return null;
  }

  // Render attachments list
  renderAttachments() {
    // Render image attachments preview
    this.renderImageAttachments();
    
    // Render file attachments preview
    this.renderFileAttachments();
    
    // Show/hide attachments preview container
    this.toggleAttachmentsPreview();
  }

  // Render image attachments preview (above input)
  renderImageAttachments() {
    const imageContainer = document.getElementById('imageAttachmentsPreview');
    if (!imageContainer) return;
    
    const imageAttachments = this.attachments.filter(att => att.type.startsWith('image/'));
    
    if (imageAttachments.length === 0) {
      imageContainer.innerHTML = '';
      return;
    }
    
    const imagesHTML = imageAttachments.map(attachment => `
      <div class="image-attachment-preview" data-id="${attachment.id}">
        <img src="${attachment.preview}" alt="${attachment.name}" class="preview-image">
        <div class="image-remove-overlay">
          <button class="image-remove-btn" onclick="window.professionalBuyerMessages.removeAttachment('${attachment.id}')">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
    `).join('');
    
    imageContainer.innerHTML = imagesHTML;
  }

  // Render file attachments preview (above input)
  renderFileAttachments() {
    const fileContainer = document.getElementById('fileAttachmentsPreview');
    if (!fileContainer) return;
    
    const fileAttachments = this.attachments.filter(att => !att.type.startsWith('image/'));
    
    if (fileAttachments.length === 0) {
      fileContainer.innerHTML = '';
      return;
    }
    
    const filesHTML = fileAttachments.map(attachment => `
      <div class="file-attachment-preview" data-id="${attachment.id}">
        <div class="file-preview-icon">
          <i class="fas fa-${this.getFileIcon(attachment.type)}"></i>
        </div>
        <div class="file-remove-overlay">
          <button class="file-remove-btn" onclick="window.professionalBuyerMessages.removeAttachment('${attachment.id}')">
            <i class="fas fa-times"></i>
          </button>
        </div>
      </div>
    `).join('');
    
    fileContainer.innerHTML = filesHTML;
  }

  // Toggle attachments preview container visibility
  toggleAttachmentsPreview() {
    const container = document.getElementById('attachmentsPreviewContainer');
    if (!container) return;
    
    if (this.attachments.length > 0) {
      container.classList.add('has-attachments');
    } else {
      container.classList.remove('has-attachments');
    }
    
    // Update attachment count display
    this.updateAttachmentCount();
  }

  // Update attachment count display
  updateAttachmentCount() {
    const imageCount = this.attachments.filter(att => att.type.startsWith('image/')).length;
    const fileCount = this.attachments.filter(att => !att.type.startsWith('image/')).length;
    
    // Update attachment button text to show count
    if (this.attachmentBtn) {
      let countText = '';
      if (imageCount > 0 || fileCount > 0) {
        countText = ` (${imageCount + fileCount})`;
      }
      this.attachmentBtn.title = `Biriktirishlar${countText}`;
    }
    
    // Show limit warnings if needed
    if (imageCount >= this.maxImageCount) {
      this.showWarningMessage(`Rasm limitiga yetdingiz! Maksimal ${this.maxImageCount} ta rasm`);
    }
    
    if (fileCount >= this.maxFileCount) {
      this.showWarningMessage(`Fayl limitiga yetdingiz! Maksimal ${this.maxFileCount} ta fayl`);
    }
  }

  // Get file icon based on type
  getFileIcon(mimeType) {
    if (mimeType.startsWith('image/')) return 'image';
    if (mimeType.includes('pdf')) return 'file-pdf';
    if (mimeType.includes('word') || mimeType.includes('document')) return 'file-word';
    if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'file-excel';
    if (mimeType.includes('zip') || mimeType.includes('rar') || mimeType.includes('7z')) return 'file-archive';
    return 'file-alt';
  }

  // Remove attachment
  removeAttachment(attachmentId) {
    const index = this.attachments.findIndex(att => att.id === attachmentId);
    if (index > -1) {
      this.attachments.splice(index, 1);
      this.renderAttachments();
      this.updateSendButton();
      console.log('🗑️ Attachment removed:', attachmentId);
    }
  }

  // Trigger file input based on type
  triggerFileInput(type) {
    const inputId = type === 'image' ? 'imageInput' : 'fileInput';
    const input = document.getElementById(inputId);
    
    if (input) {
      input.click();
    } else {
      console.error(`❌ File input not found: ${inputId}`);
    }
    
    this.hideAttachmentMenu();
  }

  // Show welcome state when no manufacturer selected
  showWelcomeState() {
    const messagesContainer = document.querySelector('.messages-container');
    const welcomeState = document.querySelector('.welcome-state');
    const quickActions = document.querySelector('.quick-actions-grid');
    const inputArea = document.querySelector('.b2b-message-input-area');
    
    // Show existing welcome state and hide input/actions
    if (welcomeState) {
      welcomeState.style.display = 'block';
    }
    if (quickActions) quickActions.style.display = 'none';
    if (inputArea) inputArea.style.display = 'none';
    
    // Clear messages and show welcome
    if (messagesContainer && !welcomeState) {
      messagesContainer.innerHTML = `
        <div class="welcome-state">
          <div class="welcome-icon">
            <i class="fas fa-comments text-main"></i>
          </div>
          <h3 class="welcome-title text-heading">Xabar almashish</h3>
          <p class="welcome-description">Professional B2B muloqot uchun manufacturerni tanlang</p>
        </div>
      `;
    }
  }

  // Show manufacturer-specific welcome state with quick actions
  showManufacturerWelcome(manufacturer) {
    const messagesContainer = document.querySelector('.messages-container');
    const quickActions = document.querySelector('.quick-actions-grid');
    const inputArea = document.querySelector('.b2b-message-input-area');
    
    // Show quick actions and input for manufacturer chat
    if (quickActions) quickActions.style.display = 'grid';
    if (inputArea) inputArea.style.display = 'block';
    
    if (messagesContainer) {
      messagesContainer.innerHTML = `
        <div class="welcome-state">
          <div class="welcome-icon">
            <i class="fas fa-handshake text-main"></i>
          </div>
          <h3 class="welcome-title text-heading">${manufacturer.companyName} bilan suhbat</h3>
          <p class="welcome-description">Professional B2B aloqa tizimi orqali ishlab chiqaruvchi bilan bevosita muloqot qiling</p>
          
          <div class="quick-actions-grid">
          <button onclick="startConversationWithTemplate('greeting')" class="quick-action-btn secondary">
            <div class="quick-action-content">
              <div class="quick-action-icon secondary">
                <i class="fas fa-wave-square"></i>
              </div>
              <h5 class="quick-action-title secondary">Salomlashish</h5>
            </div>
            <p class="quick-action-description secondary">Professional salomlashish va tanishish xabari yuborish</p>
          </button>
          
          <button onclick="startConversationWithTemplate('inquiry')" class="quick-action-btn tertiary">
            <div class="quick-action-content">
              <div class="quick-action-icon tertiary">
                <i class="fas fa-question-circle"></i>
              </div>
              <h5 class="quick-action-title tertiary">So'rov yuborish</h5>
            </div>
            <p class="quick-action-description tertiary">Mahsulot haqida savol va so'rovlar yuborish</p>
          </button>
          
          <button onclick="startConversationWithTemplate('order_status')" class="quick-action-btn tertiary">
            <div class="quick-action-content">
              <div class="quick-action-icon tertiary">
                <i class="fas fa-truck"></i>
              </div>
              <h5 class="quick-action-title tertiary">Buyurtma holati</h5>
            </div>
            <p class="quick-action-description tertiary">Buyurtma holati haqida ma'lumot so'rash</p>
          </button>
        </div>
      </div>
    `;
    }
  }

  // Show typing indicator
  showTypingIndicator() {
    const messagesContainer = document.querySelector('.messages-container');
    if (messagesContainer) {
      const typingIndicator = document.createElement('div');
      typingIndicator.className = 'telegram-typing-indicator';
      typingIndicator.innerHTML = `
        <div class="telegram-message-avatar">
          <img src="${this.manufacturerDetails?.companyLogo?.url || '/assets/images/avatars/default-company.png'}" 
               alt="${this.manufacturerDetails?.companyName || 'Manufacturer'}"
               onerror="this.src='/assets/images/avatars/default-company.png'">
        </div>
        <div class="telegram-message-content">
          <div class="telegram-message-bubble">
            <div class="typing-dots">
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
              <div class="typing-dot"></div>
            </div>
          </div>
        </div>
      `;
      messagesContainer.appendChild(typingIndicator);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
  }

  // Hide typing indicator
  hideTypingIndicator() {
    const typingIndicator = document.querySelector('.telegram-typing-indicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }

  // Utility methods
  formatTime(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return 'hozir';
    if (diffMins < 60) return `${diffMins} daqiqa oldin`;
    if (diffHours < 24) return `${diffHours} soat oldin`;
    if (diffDays < 7) return `${diffDays} kun oldin`;
    return date.toLocaleDateString('uz-UZ');
  }

  formatStatus(status) {
    const statusMap = {
      'pending': 'Kutilmoqda',
      'confirmed': 'Tasdiqlangan',
      'in_production': 'Ishlab chiqarilmoqda',
      'shipped': 'Yuborilgan',
      'delivered': 'Yetkazilgan',
      'cancelled': 'Bekor qilingan'
    };
    return statusMap[status] || status;
  }

  groupMessagesByDate(messages) {
    const groups = {};
    messages.forEach(msg => {
      const date = new Date(msg.createdAt).toLocaleDateString('uz-UZ');
      if (!groups[date]) groups[date] = [];
      groups[date].push(msg);
    });
    return groups;
  }

  updateSendButton() {
    const text = this.messageInput ? this.messageInput.value.trim() : '';
    const charLength = text.length;
    const hasAttachments = this.attachments.length > 0;
    
    // Update character count
    if (this.charCount) {
      this.charCount.textContent = charLength;
    }
    
    // Enable/disable send button (allow sending if text OR attachments exist)
    if (this.sendButton) {
      const canSend = (charLength > 0 || hasAttachments) && charLength <= 10000;
      this.sendButton.disabled = !canSend;
      this.sendButton.style.opacity = this.sendButton.disabled ? '0.5' : '1';
      
      // Update send button text based on content
      if (this.sendButton.querySelector('i')) {
        if (hasAttachments && charLength === 0) {
          // Only attachments, no text
          this.sendButton.querySelector('i').className = 'fas fa-paper-plane';
          this.sendButton.title = 'Fayllarni yuborish';
        } else if (charLength > 0 && hasAttachments) {
          // Both text and attachments
          this.sendButton.querySelector('i').className = 'fas fa-paper-plane';
          this.sendButton.title = 'Xabar va fayllarni yuborish';
        } else if (charLength > 0) {
          // Only text
          this.sendButton.querySelector('i').className = 'fas fa-paper-plane';
          this.sendButton.title = 'Xabarni yuborish';
        } else {
          // Nothing to send
          this.sendButton.querySelector('i').className = 'fas fa-paper-plane';
          this.sendButton.title = 'Xabar yoki fayl tanlang';
        }
      }
    }
    
    // Auto-resize textarea
    if (this.messageInput) {
    this.messageInput.style.height = 'auto';
    this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';
    }
  }

  handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      this.sendMessage();
    }
  }

  // Missing image and file render methods
  renderImageMessage(message) {
    return `<div class="message-image">
      <img src="${message.attachments[0]?.url || ''}" alt="Shared image" onclick="openImageModal(this.src)">
    </div>`;
  }

  renderFileMessage(message) {
    const file = message.attachments[0];
    return `<div class="message-file">
      <div class="file-icon"><i class="fas fa-file"></i></div>
      <div class="file-info">
        <div class="file-name">${file?.originalName || 'File'}</div>
        <div class="file-size">${this.formatFileSize(file?.size || 0)}</div>
      </div>
      <a href="${file?.url || '#'}" download class="file-download">
        <i class="fas fa-download"></i>
      </a>
    </div>`;
  }

  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // Select conversation by index (redirects to manufacturer chat)
  selectConversationByIndex(index) {
    try {
      const conversation = this.conversations[index];
      if (!conversation) {
        console.error('Conversation not found at index:', index);
        return;
      }
      
      // Redirect to manufacturer chat page
      const redirectUrl = `/buyer/messages?manufacturer=${conversation.supplier.id}`;
      console.log('🔄 Redirecting to:', redirectUrl);
      window.location.href = redirectUrl;
      
    } catch (error) {
      console.error('Error selecting conversation:', error);
    }
  }

  // Select conversation and update UI
  selectConversation(orderId, supplierId) {
    try {
      // Update current conversation ID
      this.currentConversationId = orderId;
      
      // Update active conversation in sidebar
      document.querySelectorAll('.conversation-item').forEach(item => {
        item.classList.remove('active');
      });
      
      // Find and activate the clicked conversation
      const clickedConversation = document.querySelector(`[data-conversation-id="${orderId}"]`);
      if (clickedConversation) {
        clickedConversation.classList.add('active');
      }
      
      // Redirect to manufacturer conversation
      const redirectUrl = `/buyer/messages?manufacturer=${supplierId}`;
      console.log('🔄 Redirecting to:', redirectUrl);
      window.location.href = redirectUrl;
      
    } catch (error) {
      console.error('Error selecting conversation:', error);
    }
  }

  // Professional UI state management
  showLoadingState(area) {
    const container = area === 'conversations' ? 
      document.querySelector('.conversations-list') : 
      document.querySelector('.messages-container');
    
    if (container) {
      container.innerHTML = `
        <div class="loading-state">
          <div class="loading-spinner">
            <i class="fas fa-spinner fa-spin"></i>
          </div>
          <p>Yuklanmoqda...</p>
        </div>
      `;
    }
  }

  showErrorState(area, message) {
    const container = area === 'conversations' ? 
      document.querySelector('.conversations-list') : 
      document.querySelector('.messages-container');
    
    if (container) {
      container.innerHTML = `
        <div class="error-state">
          <div class="error-icon">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <h4>Xatolik</h4>
          <p>${message}</p>
          <button onclick="window.location.reload()" class="retry-btn">
            <i class="fas fa-redo"></i>
            Qayta urinish
          </button>
        </div>
      `;
    }
  }

  setSendingState(isSending) {
    if (this.sendButton) {
      this.sendButton.disabled = isSending;
      this.sendButton.innerHTML = isSending ? 
        '<i class="fas fa-spinner fa-spin"></i>' : 
        '<i class="fas fa-paper-plane"></i>';
    }
  }

  showSuccessMessage(message) {
    this.showToast(message, 'success');
  }

  showErrorMessage(message) {
    this.showToast(message, 'error');
  }

  showWarningMessage(message) {
    this.showToast(message, 'warning');
  }

  showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    let icon = 'exclamation-circle';
    if (type === 'success') icon = 'check-circle';
    else if (type === 'warning') icon = 'exclamation-triangle';
    
    toast.innerHTML = `
      <div class="toast-content">
        <i class="fas fa-${icon}"></i>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.classList.add('show');
    }, 100);
    
    setTimeout(() => {
      toast.classList.remove('show');
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 300);
    }, 3000);
  }

  toggleAttachmentMenu() {
    if (this.attachmentMenu) {
      this.attachmentMenu.classList.toggle('show');
    }
  }

  showAttachmentMenu() {
    if (this.attachmentMenu) {
      this.attachmentMenu.classList.add('show');
    }
  }

  hideAttachmentMenu() {
    if (this.attachmentMenu) {
      this.attachmentMenu.classList.remove('show');
    }
  }
}

// ============================================
// GLOBAL FUNCTIONS - Outside of Class Scope
// ============================================

// Handle logo error for both chat header and sidebar
function handleLogoError(imgElement) {
  imgElement.parentElement.innerHTML = '<div class="logo-placeholder"><i class="fas fa-building"></i></div>';
}

// Conversation selection
function selectConversation(manufacturerId) {
  // Remove active class from all conversations
  const conversations = document.querySelectorAll('.conversation-item');
  conversations.forEach(conv => conv.classList.remove('active'));
  
  // Add active class to selected conversation
  const selectedConv = document.querySelector(`.conversation-item[onclick="selectConversation('${manufacturerId}')"]`);
  if (selectedConv) {
    selectedConv.classList.add('active');
  }
  
  console.log('Selected conversation:', manufacturerId);
  // Here you would load the conversation messages
}

// Template functions with conversation starter
function startConversationWithTemplate(type) {
  const templates = {
    greeting: "Assalomu alaykum! Men sizning kompaniyangiz bilan hamkorlik qilishdan manfaatdorman. Iltimos, mahsulotlaringiz va xizmatlaringiz haqida ko'proq ma'lumot bering.",
    price_inquiry: "Sizning katalogingizdan quyidagi mahsulotlar uchun narx so'rovini yubormoqchiman:\n\n- Mahsulot nomi: Paxta ko'ylaklar\n- Miqdor: 1,000 dona\n- Xususiyatlar: Yuqori sifat, turli ranglar\n\nIltimos, eng yaxshi narxlaringizni va yetkazib berish shartlarini taklif qiling.",
    sample_request: "Sizning mahsulotlaringizdan namunalar olishni istardim. Quyidagi mahsulotlar bo'yicha:\n\n- Mahsulot turlari\n- Sifat sertifikatlari\n- Yetkazib berish muddat va narxlari\n\nIltimos, ma'lumot bering.",
    order_inquiry: "Sizdan katta hajmli buyurtma berish bo'yicha quyidagi ma'lumotlarni bilishni istardim:\n\n- Minimal buyurtma miqdori\n- Yetkazib berish muddatlari\n- To'lov shartlari\n- Sifat kafolati\n\nRahmat!"
  };
  
  const messageInput = document.getElementById('messageInput');
  if (messageInput && templates[type]) {
    messageInput.value = templates[type];
  messageInput.focus();
    
    // Trigger input event to update send button
    const event = new Event('input', { bubbles: true });
    messageInput.dispatchEvent(event);
    
    // Scroll to message input
    messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
}

// Focus message input
function focusMessageInput() {
  const messageInput = document.getElementById('messageInput');
  if (messageInput) {
    messageInput.focus();
    messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
}

// File attachment functions - DEPRECATED, use class methods instead
function attachFile() {
  console.warn('⚠️ attachFile is deprecated, use class methods instead');
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.hideAttachmentMenu();
  }
}

function attachImage() {
  console.warn('⚠️ attachImage is deprecated, use class methods instead');
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.hideAttachmentMenu();
  }
}

function insertEmoji() {
  // Simple emoji insertion - you can expand this with a proper emoji picker
  const messageInput = document.getElementById('messageInput');
  if (messageInput) {
    const emojis = ['😊', '👍', '🤝', '💼', '📦', '🚚', '💰', '✅', '❓', '📞'];
    const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
    
    const currentValue = messageInput.value;
    const cursorPosition = messageInput.selectionStart;
    const newValue = currentValue.slice(0, cursorPosition) + randomEmoji + currentValue.slice(cursorPosition);
    
    messageInput.value = newValue;
    messageInput.setSelectionRange(cursorPosition + randomEmoji.length, cursorPosition + randomEmoji.length);
    messageInput.focus();
    
    // Trigger input event to update send button
    const event = new Event('input', { bubbles: true });
    messageInput.dispatchEvent(event);
  }
  
  // Hide attachment menu
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.hideAttachmentMenu();
  }
}

function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
    console.log('Selected file:', file.name, file.size, file.type);
    // This function is deprecated, use class methods instead
  }
}

function handleImageSelect(event) {
  const file = event.target.files[0];
  if (file) {
    console.log('Selected image:', file.name, file.size, file.type);
    // This function is deprecated, use class methods instead
  }
}

// Professional message form submission - DEPRECATED, use button click instead
function sendProfessionalMessage(event) {
  event.preventDefault();
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.sendMessage();
  }
}

function handleProfessionalKeyPress(event) {
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.handleKeyPress(event);
  }
}

function handleProfessionalInputChange() {
  if (window.professionalBuyerMessages) {
    window.professionalBuyerMessages.updateSendButton();
  }
}

// Action functions
function requestQuoteFromManufacturer() {
  console.log('Requesting quote from manufacturer');
}

function viewManufacturerProfile() {
  console.log('Viewing manufacturer profile');
}

function sendMessage() {
  const messagesClass = window.professionalBuyerMessages;
  if (messagesClass) {
    messagesClass.sendMessage();
  }
}

function requestNewQuote() {
  console.log('Requesting new quote');
}

function requestSample() {
  console.log('Requesting sample');
}

function downloadCatalog() {
  console.log('Downloading catalog');
}

function callManufacturer() {
  console.log('Calling manufacturer');
}

function emailManufacturer() {
  console.log('Emailing manufacturer');
}

function viewQuoteDetails() {
  console.log('Viewing quote details');
}

function viewProfile() {
  console.log('Viewing manufacturer profile');
}

// Image Modal Functions
function openImageModal(imageUrl, imageTitle) {
  const modal = document.getElementById('imageModal');
  const modalImage = document.getElementById('modalImage');
  const modalTitle = document.getElementById('modalImageTitle');
  
  modalImage.src = imageUrl;
  modalTitle.textContent = imageTitle || 'Image';
  modal.style.display = 'flex';
  
  // Store current image URL for download
  window.currentModalImageUrl = imageUrl;
  window.currentModalImageName = imageTitle || 'image';
}

function closeImageModal() {
  const modal = document.getElementById('imageModal');
  modal.style.display = 'none';
  
  // Clear stored data
  window.currentModalImageUrl = null;
  window.currentModalImageName = null;
}

function downloadModalImage() {
  if (window.currentModalImageUrl) {
    const link = document.createElement('a');
    link.href = window.currentModalImageUrl;
    link.download = window.currentModalImageName || 'image';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

// Close modal when clicking outside
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('imageModal');
  if (modal) {
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeImageModal();
      }
    });
  }
});

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  window.professionalBuyerMessages = new ProfessionalBuyerMessages();
  
  // Add hover effects to quick action buttons
  const quickActionBtns = document.querySelectorAll('.quick-action-btn');
  quickActionBtns.forEach(btn => {
    btn.addEventListener('mouseenter', function() {
      if (!this.style.background.includes('hsl(var(--main))')) {
        this.style.borderColor = 'hsl(var(--main))';
        this.style.background = 'hsl(var(--main-l-50))';
      }
    });
    
    btn.addEventListener('mouseleave', function() {
      if (!this.style.background.includes('hsl(var(--main))')) {
        this.style.borderColor = 'hsl(var(--border-color))';
        this.style.background = 'hsl(var(--white))';
    }
  });
});

  // Add hover effects to action buttons
  const actionButtons = document.querySelectorAll('button[onclick]');
  actionButtons.forEach(button => {
    if (!button.id || button.id !== 'sendButton') {
      button.addEventListener('mouseenter', function() {
        if (!this.disabled) {
          this.style.transform = 'translateY(-1px)';
        }
      });
      
      button.addEventListener('mouseleave', function() {
        this.style.transform = 'translateY(0)';
      });
    }
  });
});
</script>

<!-- Image Modal -->
<div id="imageModal" class="telegram-image-modal">
  <div class="telegram-modal-content">
    <div class="telegram-modal-header">
      <h3 id="modalImageTitle">Image</h3>
      <button class="telegram-modal-close" onclick="closeImageModal()">
        <i class="fas fa-times"></i>
                </button>
              </div>
    <div class="telegram-modal-body">
      <img id="modalImage" src="" alt="Modal Image">
            </div>
    <div class="telegram-modal-footer">
      <button class="telegram-modal-download" onclick="downloadModalImage()">
        <i class="fas fa-download"></i>
        Yuklab olish
                </button>
        </div>
        </div>
    </div>

<%- include('../partials/footer') %>
