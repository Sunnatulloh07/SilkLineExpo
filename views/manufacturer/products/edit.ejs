<%- include('../partials/header', { title: title, lng: lng, user: user, t: t, currentUrl: currentUrl }) %>
<%- include('../partials/sidebar', { user: user, currentPage: 'products', t: t }) %>

<!-- Enhanced CSS Imports - Product Edit Page -->
<link rel="stylesheet" href="/css/manufacturer-dashboard.css">
<link rel="stylesheet" href="/css/manufacturer-cards.css">
<link rel="stylesheet" href="/css/manufacturer-fixes.css">
<link rel="stylesheet" href="/css/b2b-marketplace-cards.css">
<link rel="stylesheet" href="/css/products-table-view.css">
<link rel="stylesheet" href="/css/toast-notifications.css">
<link rel="stylesheet" href="/css/modal-system.css">

<!-- Main Content -->
<main class="admin-main">
  <div class="admin-content">
    
    <!-- Product Edit Header -->
    <div class="product-header animate-fade-in">
      <div class="header-content">
        <div class="header-title-section">
          <h1 class="page-title">
            <i class="fas fa-edit"></i>
            <%= t('manufacturer.products.edit.pageTitle') %>
          </h1>
          <p class="page-subtitle"><%= t('manufacturer.products.edit.pageSubtitle') %></p>
        </div>
      </div>
    </div>

    <!-- Error Message Alert -->
    <% if (locals.errorMessage) { %>
      <div class="alert alert-warning animate-fade-in" style="margin: 1rem 0; padding: 1rem; background: #fff3cd; border: 1px solid #ffecb5; border-radius: 8px; color: #856404;">
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <i class="fas fa-exclamation-triangle" style="color: #f0ad4e;"></i>
          <strong><%= t('manufacturer.products.edit.alerts.attention') %></strong> <%= errorMessage %>
        </div>
      </div>
    <% } %>

    <div class="product-edit-container">
      <!-- Left Side: Form -->
      <div class="form-container">
        
        <!-- Multi-step Form -->
        <form id="productEditForm" class="multi-step-form" novalidate>
          <input type="hidden" name="productId" value="<%= product._id %>">
          
          <!-- Progress Indicator -->
          <div class="form-progress animate-fade-in">
            <div class="progress-steps">
              <div class="step active" data-step="1">
                <div class="step-number">1</div>
                <div class="step-label"><%= t('manufacturer.products.edit.steps.basicInfo') %></div>
              </div>
              <div class="step" data-step="2">
                <div class="step-number">2</div>
                <div class="step-label"><%= t('manufacturer.products.edit.steps.pricingAndMOQ') %></div>
              </div>
              <div class="step" data-step="3">
                <div class="step-number">3</div>
                <div class="step-label"><%= t('manufacturer.products.edit.steps.specifications') %></div>
              </div>
              <div class="step" data-step="4">
                <div class="step-number">4</div>
                <div class="step-label"><%= t('manufacturer.products.edit.steps.images') %></div>
              </div>
              <div class="step" data-step="5">
                <div class="step-number">5</div>
                <div class="step-label"><%= t('manufacturer.products.edit.steps.shipping') %></div>
              </div>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" style="width: 20%;"></div>
            </div>
          </div>

          <!-- Step 1: Basic Information -->
          <div class="form-step active" data-step="1">
            <div class="step-header">
              <h3><%= t('manufacturer.products.edit.steps.basicInfo') %></h3>
              <p class="step-description"><%= t('manufacturer.products.edit.steps.basicInfoDescription') %></p>
            </div>
            
            <div class="form-grid">
              <div class="form-group full-width">
                <label for="productName" class="form-label required">
                  <i class="fas fa-tag"></i>
                  <%= t('manufacturer.products.edit.form.productName') %>
                </label>
                <input 
                  type="text" 
                  id="productName" 
                  name="name" 
                  class="form-input" 
                  value="<%= product.name || '' %>"
                  placeholder="<%= t('manufacturer.products.edit.form.productNamePlaceholder') %>" 
                  required
                  maxlength="200"
                >
                <div class="form-hint"><%= t('manufacturer.products.edit.form.productNameHint') %></div>
                <div class="validation-message"></div>
              </div>
              
              <div class="form-group">
                <label for="category" class="form-label required">
                  <i class="fas fa-th-large"></i>
                  <%= t('manufacturer.products.edit.form.category') %>
                </label>
                <select id="category" name="category" class="form-select" required>
                  <option value=""><%= t('manufacturer.products.edit.form.selectCategory') %></option>
                  <% categories.forEach(function(cat) { %>
                    <%
                      let isSelected = false;
                      if (product.category) {
                        if (typeof product.category === 'object' && product.category._id) {
                          isSelected = product.category._id.toString() === cat._id.toString();
                        } else if (typeof product.category === 'string') {
                          isSelected = product.category.toString() === cat._id.toString();
                        } else {
                          isSelected = product.category.toString() === cat._id.toString();
                        }
                      }
                      
                      const isDisabled = !cat.canAddProducts && !isSelected;
                      const statusBadge = cat.status === 'inactive' ? t('manufacturer.products.edit.form.categoryTooltips.statusBadges.inactive') : 
                                            cat.status === 'draft' ? t('manufacturer.products.edit.form.categoryTooltips.statusBadges.draft') : '';
                      const tooltipText = isDisabled ? 
                        (cat.status === 'inactive' ? t('manufacturer.products.edit.form.categoryTooltips.inactive') : 
                         cat.status === 'draft' ? t('manufacturer.products.edit.form.categoryTooltips.draft') : 
                         t('manufacturer.products.edit.form.categoryTooltips.notAllowed')) :
                        cat.description || '';
                    %>
                    <option value="<%= cat._id %>" 
                            <%= isSelected ? 'selected' : '' %>
                            <%= isDisabled ? 'disabled' : '' %>
                            data-level="<%= cat.level || 0 %>"
                            data-status="<%= cat.status %>"
                            data-can-add-products="<%= cat.canAddProducts %>"
                            data-category-name="<%= cat.displayName || cat.name %>"
                            <% if (tooltipText) { %>title="<%= tooltipText %>"<% } %>>
                      <%= cat.name %><%= statusBadge %><%= isSelected && isDisabled ? ' (' + t('manufacturer.products.edit.form.currentCategory') + ')' : '' %>
                    </option>
                  <% }) %>
                </select>
                <div class="validation-message"></div>
                <small class="form-hint">
                  <i class="fas fa-info-circle"></i>
                  <%= t('manufacturer.products.edit.form.categoryEditHint') %>
                </small>
              </div>
              
              <div class="form-group">
                <label for="productStatus" class="form-label">
                  <i class="fas fa-toggle-on"></i>
                  <%= t('manufacturer.products.edit.form.productStatus') %>
                </label>
                <select id="productStatus" name="status" class="form-select">
                  <option value="active" <%= (product.status === 'active') ? 'selected' : '' %>><%= t('manufacturer.products.status.active') %></option>
                  <option value="inactive" <%= (product.status === 'inactive') ? 'selected' : '' %>><%= t('manufacturer.products.status.inactive') %></option>
                  <option value="draft" <%= (product.status === 'draft') ? 'selected' : '' %>><%= t('manufacturer.products.status.draft') %></option>
                </select>
              </div>
              
              <div class="form-group full-width">
                <label for="shortDescription" class="form-label">
                  <i class="fas fa-align-left"></i>
                  <%= t('manufacturer.products.edit.form.shortDescription') %>
                </label>
                <textarea 
                  id="shortDescription" 
                  name="shortDescription" 
                  class="form-textarea" 
                  rows="3" 
                  placeholder="<%= t('manufacturer.products.edit.form.shortDescriptionPlaceholder') %>"
                  maxlength="500"
                ><%= product.shortDescription || '' %></textarea>
                <div class="form-hint"><%= t('manufacturer.products.edit.form.shortDescriptionHint') %></div>
              </div>
              
              <div class="form-group full-width">
                <label for="description" class="form-label required">
                  <i class="fas fa-file-text"></i>
                  <%= t('manufacturer.products.edit.form.description') %>
                </label>
                <textarea 
                  id="description" 
                  name="description" 
                  class="form-textarea rich-editor" 
                  rows="6" 
                  placeholder="<%= t('manufacturer.products.edit.form.descriptionPlaceholder') %>"
                  required
                  maxlength="2000"
                ><%= product.description || '' %></textarea>
                <div class="form-hint"><%= t('manufacturer.products.edit.form.descriptionHint') %></div>
                <div class="validation-message"></div>
              </div>
            </div>
          </div>

          <!-- Step 2: Pricing & MOQ -->
          <div class="form-step" data-step="2">
            <div class="step-header">
              <h3><%= t('manufacturer.products.edit.steps.pricingAndMOQ') %></h3>
              <p class="step-description"><%= t('manufacturer.products.edit.steps.pricingAndMOQDescription') %></p>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label for="basePrice" class="form-label required">
                  <i class="fas fa-dollar-sign"></i>
                  <%= t('manufacturer.products.edit.form.basePrice') %>
                </label>
                <div class="price-input-wrapper">
                  <span class="price-currency">$</span>
                  <input 
                    type="number" 
                    id="basePrice" 
                    name="pricing.basePrice" 
                    class="form-input price-input" 
                    step="0.01" 
                    min="0"
                    value="<%= product.pricing?.basePrice || '' %>"
                    placeholder="0.00"
                    required
                  >
                </div>
                <div class="validation-message"></div>
              </div>
              
              <div class="form-group">
                <label for="priceType" class="form-label">
                  <i class="fas fa-hand-holding-usd"></i>
                  <%= t('manufacturer.products.edit.form.priceType') %>
                </label>
                <select id="priceType" name="pricing.priceType" class="form-select">
                  <option value="fixed" <%= (product.pricing?.priceType === 'fixed') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.priceTypeFixed') %></option>
                  <option value="negotiable" <%= (product.pricing?.priceType === 'negotiable') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.priceTypeNegotiable') %></option>
                  <option value="quote_based" <%= (product.pricing?.priceType === 'quote_based') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.priceTypeQuoteBased') %></option>
                </select>
              </div>
              
              <div class="form-group">
                <label for="minOrderQty" class="form-label required">
                  <i class="fas fa-sort-numeric-up"></i>
                  <%= t('manufacturer.products.edit.form.minOrderQty') %>
                </label>
                <input 
                  type="number" 
                  id="minOrderQty" 
                  name="pricing.minimumOrderQuantity" 
                  class="form-input" 
                  min="1"
                  value="<%= product.pricing?.minimumOrderQuantity || '' %>"
                  placeholder="<%= t('manufacturer.products.edit.form.minOrderQtyPlaceholder') %>"
                  required
                >
                <div class="form-hint"><%= t('manufacturer.products.edit.form.minOrderQtyHint') %></div>
                <div class="validation-message"></div>
              </div>
              
              <div class="form-group">
                <label for="maxOrderQty" class="form-label">
                  <i class="fas fa-sort-numeric-down"></i>
                  <%= t('manufacturer.products.edit.form.maxOrderQty') %>
                </label>
                <input 
                  type="number" 
                  id="maxOrderQty" 
                  name="pricing.maximumOrderQuantity" 
                  class="form-input" 
                  min="1"
                  value="<%= product.pricing?.maximumOrderQuantity || '' %>"
                  placeholder="<%= t('manufacturer.products.edit.form.maxOrderQtyPlaceholder') %>"
                >
                <div class="form-hint"><%= t('manufacturer.products.edit.form.maxOrderQtyHint') %></div>
              </div>
            </div>
            
            <!-- Bulk Pricing Section -->
            <div class="bulk-pricing-section">
              <div class="section-header">
                <h4>
                  <i class="fas fa-layer-group"></i>
                  <%= t('manufacturer.products.edit.form.bulkPricing') %>
                </h4>
                <button type="button" class="btn-sm btn-outline" id="addBulkPrice">
                  <i class="fas fa-plus"></i>
                  <%= t('manufacturer.products.edit.form.add') %>
                </button>
              </div>
              
              <div class="bulk-pricing-list" id="bulkPricingList">
                <% if (product.pricing && product.pricing.bulkPricing && product.pricing.bulkPricing.length > 0) { %>
                  <% product.pricing.bulkPricing.forEach(function(bulk, index) { %>
                    <div class="bulk-price-item" data-index="<%= index %>">
                      <div class="bulk-inputs">
                        <input 
                          type="number" 
                          name="pricing.bulkPricing[<%= index %>].minQuantity" 
                          placeholder="<%= t('manufacturer.products.edit.form.minQuantity') %>"
                          value="<%= bulk.minQuantity %>"
                          class="form-input small"
                        >
                        <span>-</span>
                        <input 
                          type="number" 
                          name="pricing.bulkPricing[<%= index %>].maxQuantity" 
                          placeholder="<%= t('manufacturer.products.edit.form.maxQuantity') %>"
                          value="<%= bulk.maxQuantity || '' %>"
                          class="form-input small"
                        >
                        <input 
                          type="number" 
                          name="pricing.bulkPricing[<%= index %>].price" 
                          placeholder="<%= t('manufacturer.products.edit.form.price') %>"
                          value="<%= bulk.price %>"
                          step="0.01"
                          class="form-input small"
                        >
                        <input 
                          type="number" 
                          name="pricing.bulkPricing[<%= index %>].discount" 
                          placeholder="<%= t('manufacturer.products.edit.form.discount') %>"
                          value="<%= bulk.discount || '' %>"
                          class="form-input small"
                        >
                      </div>
                      <button type="button" class="btn-sm btn-ghost remove-bulk-price">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  <% }) %>
                <% } %>
              </div>
            </div>
          </div>

          <!-- Step 3: Technical Specifications -->
          <div class="form-step" data-step="3">
            <div class="step-header">
              <h3><%= t('manufacturer.products.edit.steps.specifications') %></h3>
              <p class="step-description"><%= t('manufacturer.products.edit.steps.specificationsDescription') %></p>
            </div>
            
            <div class="specifications-section">
              <div class="section-header">
                <h4>
                  <i class="fas fa-cogs"></i>
                  <%= t('manufacturer.products.edit.form.productSpecifications') %>
                </h4>
                <button type="button" class="btn-sm btn-outline" id="addSpecification">
                  <i class="fas fa-plus"></i>
                  <%= t('manufacturer.products.edit.form.add') %>
                </button>
              </div>
              
              <div class="specifications-list" id="specificationsList">
                <% if (product.specifications && product.specifications.length > 0) { %>
                  <% product.specifications.forEach(function(spec, index) { %>
                    <div class="specification-item" data-index="<%= index %>">
                      <div class="spec-inputs">
                        <input 
                          type="text" 
                          name="specifications[<%= index %>].name" 
                          placeholder="<%= t('manufacturer.products.edit.form.specNamePlaceholder') %>"
                          value="<%= spec.name %>"
                          class="form-input"
                        >
                        <input 
                          type="text" 
                          name="specifications[<%= index %>].value" 
                          placeholder="<%= t('manufacturer.products.edit.form.specValuePlaceholder') %>"
                          value="<%= spec.value %>"
                          class="form-input"
                        >
                        <input 
                          type="text" 
                          name="specifications[<%= index %>].unit" 
                          placeholder="<%= t('manufacturer.products.edit.form.specUnitPlaceholder') %>"
                          value="<%= spec.unit || '' %>"
                          class="form-input small"
                        >
                      </div>
                      <button type="button" class="btn-sm btn-ghost remove-specification">
                        <i class="fas fa-trash"></i>
                      </button>
                    </div>
                  <% }) %>
                <% } %>
              </div>
            </div>
            
            <!-- Inventory Section -->
            <div class="inventory-section">
              <div class="section-header">
                <h4>
                  <i class="fas fa-warehouse"></i>
                  <%= t('manufacturer.products.edit.form.inventoryData') %>
                </h4>
              </div>
              
              <div class="form-grid">
                <div class="form-group">
                  <label for="stockQuantity" class="form-label">
                    <i class="fas fa-boxes"></i>
                    <%= t('manufacturer.products.edit.form.stockQuantity') %>
                  </label>
                  <input 
                    type="number" 
                    id="stockQuantity" 
                    name="inventory.totalStock" 
                    class="form-input" 
                    min="0"
                    value="<%= product.inventory?.totalStock || '' %>"
                    placeholder="<%= t('manufacturer.products.edit.form.stockQuantityPlaceholder') %>"
                  >
                </div>
                
                <div class="form-group">
                  <label for="lowStockThreshold" class="form-label">
                    <i class="fas fa-exclamation-triangle"></i>
                    <%= t('manufacturer.products.edit.form.lowStockThreshold') %>
                  </label>
                  <input 
                    type="number" 
                    id="lowStockThreshold" 
                    name="inventory.lowStockThreshold" 
                    class="form-input" 
                    min="0"
                    value="<%= product.inventory?.lowStockThreshold || '' %>"
                    placeholder="<%= t('manufacturer.products.edit.form.lowStockThresholdPlaceholder') %>"
                  >
                  <div class="form-hint"><%= t('manufacturer.products.edit.form.lowStockThresholdHint') %></div>
                </div>
                
                <div class="form-group">
                  <label for="inventoryUnit" class="form-label">
                    <i class="fas fa-ruler"></i>
                    <%= t('manufacturer.products.edit.form.inventoryUnit') %>
                  </label>
                  <select 
                    id="inventoryUnit" 
                    name="inventory.unit" 
                    class="form-select"
                  >
                    <option value="pieces" <%= (product.inventory?.unit === 'pieces') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitPieces') %></option>
                    <option value="kg" <%= (product.inventory?.unit === 'kg') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitKg') %></option>
                    <option value="meters" <%= (product.inventory?.unit === 'meters') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitMeters') %></option>
                    <option value="liters" <%= (product.inventory?.unit === 'liters') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitLiters') %></option>
                    <option value="boxes" <%= (product.inventory?.unit === 'boxes') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitBoxes') %></option>
                    <option value="rolls" <%= (product.inventory?.unit === 'rolls') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.unitRolls') %></option>
                  </select>
                  <div class="form-hint"><%= t('manufacturer.products.edit.form.inventoryUnitHint') %></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 4: Images -->
          <div class="form-step" data-step="4">
            <div class="step-header">
              <h3><%= t('manufacturer.products.edit.steps.images') %></h3>
              <p class="step-description"><%= t('manufacturer.products.edit.steps.imagesDescription') %></p>
            </div>
            
            <div class="image-upload-section">
              <!-- Image Counter -->
              <div class="image-counter-section">
                <div class="image-counter" id="imageCounter">
                  <% 
                    const totalImages = product.images ? product.images.length : 0;
                    const imageCounterText = `${totalImages}/10 ${t('manufacturer.products.edit.images.counter')}`;
                  %>
                  <%= imageCounterText %>
                </div>
                <div class="image-status-info">
                  <span class="temp-images-count" id="tempImagesCount">
                    <%= t('manufacturer.products.edit.images.new') %>: 0
                  </span>
                  <span class="existing-images-count" id="existingImagesCount">
                    <%= t('manufacturer.products.edit.images.existing') %>: <%= totalImages %>
                  </span>
                </div>
              </div>
              
              <!-- Image Upload Area -->
              <div class="upload-area" id="imageUploadArea">
                <div class="upload-placeholder">
                  <i class="fas fa-cloud-upload-alt upload-icon"></i>
                  <h4><%= t('manufacturer.products.edit.images.uploadTitle') %></h4>
                  <p><%= t('manufacturer.products.edit.images.uploadDescription') %></p>
                  <p class="upload-requirements">
                    <%= t('manufacturer.products.edit.images.uploadRequirements') %>
                  </p>
                  <p class="upload-note">
                    <i class="fas fa-info-circle"></i>
                    <%= t('manufacturer.products.edit.images.uploadNote') %>
                  </p>
                  <button type="button" class="btn-outline upload-btn">
                    <i class="fas fa-folder-open"></i>
                    <%= t('manufacturer.products.edit.images.selectFiles') %>
                  </button>
                </div>
                <input 
                  type="file" 
                  id="imageUploadInput" 
                  multiple 
                  accept="image/jpeg,image/png,image/webp,image/jpg"
                  style="display: none;"
                >
              </div>
              
              <!-- Current Images -->
              <div class="current-images" id="currentImages">
                <% if (product.images && product.images.length > 0) { %>
                  <div class="images-grid">
                    <% product.images.forEach(function(image, index) { %>
                      <% const imageUrl = (typeof image === 'string') ? image : image.url; %>
                      <% const isPrimary = (typeof image === 'object' && image.isPrimary) || index === 0; %>
                      <div class="image-item" data-image-url="<%= imageUrl %>">
                        <div class="image-wrapper">
                          <img src="<%= imageUrl %>" alt="<%= (typeof image === 'object' && image.alt) ? image.alt : 'Product Image ' + (index + 1) %>" loading="lazy">
                          <div class="image-overlay">
                            <button type="button" class="btn-sm btn-ghost set-primary" title="<%= t('manufacturer.products.edit.images.setPrimary') %>">
                              <i class="fas fa-star"></i>
                            </button>
                            <button type="button" class="btn-sm btn-ghost remove-image" title="<%= t('manufacturer.products.edit.images.remove') %>">
                              <i class="fas fa-trash"></i>
                            </button>
                          </div>
                          <% if (isPrimary) { %>
                            <div class="primary-badge"><%= t('manufacturer.products.edit.images.primary') %></div>
                          <% } %>
                        </div>
                      </div>
                    <% }) %>
                  </div>
                <% } %>
              </div>
              
              <!-- Upload Progress -->
              <div class="upload-progress" id="uploadProgress" style="display: none;">
                <div class="progress-info">
                  <span class="progress-text"><%= t('manufacturer.products.edit.images.uploading') %></span>
                  <span class="progress-percentage">0%</span>
                </div>
                <div class="progress-bar">
                  <div class="progress-fill"></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Step 5: Shipping & Delivery -->
          <div class="form-step" data-step="5">
            <div class="step-header">
              <h3><%= t('manufacturer.products.edit.steps.shipping') %></h3>
              <p class="step-description"><%= t('manufacturer.products.edit.steps.shippingDescription') %></p>
            </div>
            
            <div class="form-grid">
              <div class="form-group">
                <label for="leadTime" class="form-label">
                  <i class="fas fa-clock"></i>
                  <%= t('manufacturer.products.edit.form.leadTime') %>
                </label>
                <select id="leadTime" name="shipping.leadTime" class="form-select">
                  <% 
                    let currentLeadTime = '3-7'; // Default value
                    if (product.shipping && product.shipping.leadTime && typeof product.shipping.leadTime === 'object') {
                      const lt = product.shipping.leadTime;
                      if (lt.min === 1 && lt.max === 3) currentLeadTime = '1-3';
                      else if (lt.min === 3 && lt.max === 7) currentLeadTime = '3-7';
                      else if (lt.min === 7 && lt.max === 15) currentLeadTime = '7-15';
                      else if (lt.min === 15 && lt.max === 30) currentLeadTime = '15-30';
                      else currentLeadTime = 'custom';
                    } else if (typeof product.shipping?.leadTime === 'string') {
                      currentLeadTime = product.shipping.leadTime;
                    }
                  %>
                  <option value="1-3" <%= (currentLeadTime === '1-3') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.leadTime1_3') %></option>
                  <option value="3-7" <%= (currentLeadTime === '3-7') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.leadTime3_7') %></option>
                  <option value="7-15" <%= (currentLeadTime === '7-15') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.leadTime7_15') %></option>
                  <option value="15-30" <%= (currentLeadTime === '15-30') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.leadTime15_30') %></option>
                  <option value="custom" <%= (currentLeadTime === 'custom') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.leadTimeCustom') %></option>
                </select>
              </div>
              
              <div class="form-group">
                <label for="shippingWeight" class="form-label">
                  <i class="fas fa-weight"></i>
                  <%= t('manufacturer.products.edit.form.shippingWeight') %>
                </label>
                <input 
                  type="number" 
                  id="shippingWeight" 
                  name="shipping.weight" 
                  class="form-input" 
                  step="0.1" 
                  min="0"
                  value="<%= product.shipping?.weight || '' %>"
                  placeholder="<%= t('manufacturer.products.edit.form.shippingWeightPlaceholder') %>"
                >
              </div>
              
              <div class="form-group">
                <label class="form-label">
                  <i class="fas fa-cube"></i>
                  <%= t('manufacturer.products.edit.form.dimensions') %>
                </label>
                <div class="dimensions-inputs">
                  <input 
                    type="number" 
                    name="shipping.dimensions.length" 
                    class="form-input small" 
                    placeholder="<%= t('manufacturer.products.edit.form.dimensionLength') %>"
                    value="<%= product.shipping?.dimensions?.length || '' %>"
                  >
                  <span>×</span>
                  <input 
                    type="number" 
                    name="shipping.dimensions.width" 
                    class="form-input small" 
                    placeholder="<%= t('manufacturer.products.edit.form.dimensionWidth') %>"
                    value="<%= product.shipping?.dimensions?.width || '' %>"
                  >
                  <span>×</span>
                  <input 
                    type="number" 
                    name="shipping.dimensions.height" 
                    class="form-input small" 
                    placeholder="<%= t('manufacturer.products.edit.form.dimensionHeight') %>"
                    value="<%= product.shipping?.dimensions?.height || '' %>"
                  >
                  <select 
                    name="shipping.dimensions.unit" 
                    class="form-select small"
                    style="max-width: 70px; margin-left: 8px;"
                  >
                    <option value="cm" <%= (product.shipping?.dimensions?.unit === 'cm' || !product.shipping?.dimensions?.unit) ? 'selected' : '' %>>cm</option>
                    <option value="inch" <%= (product.shipping?.dimensions?.unit === 'inch') ? 'selected' : '' %>>inch</option>
                  </select>
                </div>
              </div>
              
              <!-- PROFESSIONAL FIX: Adding missing packagingType field -->
              <div class="form-group">
                <label for="packagingType" class="form-label">
                  <i class="fas fa-box"></i>
                  <%= t('manufacturer.products.edit.form.packagingType') %>
                </label>
                <select id="packagingType" name="shipping.packagingType" class="form-select">
                  <option value=""><%= t('manufacturer.products.edit.form.select') %></option>
                  <option value="Box" <%= (product.shipping?.packagingType === 'Box') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingBox') %></option>
                  <option value="Bag" <%= (product.shipping?.packagingType === 'Bag') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingBag') %></option>
                  <option value="Carton" <%= (product.shipping?.packagingType === 'Carton') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingCarton') %></option>
                  <option value="Pallet" <%= (product.shipping?.packagingType === 'Pallet') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingPallet') %></option>
                  <option value="Roll" <%= (product.shipping?.packagingType === 'Roll') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingRoll') %></option>
                  <option value="Bundle" <%= (product.shipping?.packagingType === 'Bundle') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingBundle') %></option>
                  <option value="Custom" <%= (product.shipping?.packagingType === 'Custom') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.packagingCustom') %></option>
                </select>
              </div>
              
              <!-- PROFESSIONAL FIX: Adding missing shippingClass field -->
              <div class="form-group">
                <label for="shippingClass" class="form-label">
                  <i class="fas fa-shipping-fast"></i>
                  <%= t('manufacturer.products.edit.form.shippingClass') %>
                </label>
                <select id="shippingClass" name="shipping.shippingClass" class="form-select">
                  <option value=""><%= t('manufacturer.products.edit.form.select') %></option>
                  <option value="standard" <%= (product.shipping?.shippingClass === 'standard') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.shippingStandard') %></option>
                  <option value="fragile" <%= (product.shipping?.shippingClass === 'fragile') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.shippingFragile') %></option>
                  <option value="hazardous" <%= (product.shipping?.shippingClass === 'hazardous') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.shippingHazardous') %></option>
                  <option value="perishable" <%= (product.shipping?.shippingClass === 'perishable') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.shippingPerishable') %></option>
                  <option value="oversized" <%= (product.shipping?.shippingClass === 'oversized') ? 'selected' : '' %>><%= t('manufacturer.products.edit.form.shippingOversized') %></option>
                </select>
              </div>
              
              <div class="form-group full-width">
                <label class="form-label">
                  <i class="fas fa-shipping-fast"></i>
                  <%= t('manufacturer.products.edit.form.shippingMethods') %>
                </label>
                <div class="shipping-methods">
                  <% const shippingMethods = product.shipping?.methods || []; %>
                  <label class="checkbox-label">
                    <input 
                      type="checkbox" 
                      name="shipping.methods" 
                      value="standard"
                      <%= (Array.isArray(shippingMethods) && shippingMethods.includes('standard')) ? 'checked' : '' %>
                    >
                    <span class="checkmark"></span>
                    <%= t('manufacturer.products.edit.form.shippingMethodStandard') %>
                  </label>
                  <label class="checkbox-label">
                    <input 
                      type="checkbox" 
                      name="shipping.methods" 
                      value="express"
                      <%= (Array.isArray(shippingMethods) && shippingMethods.includes('express')) ? 'checked' : '' %>
                    >
                    <span class="checkmark"></span>
                    <%= t('manufacturer.products.edit.form.shippingMethodExpress') %>
                  </label>
                  <label class="checkbox-label">
                    <input 
                      type="checkbox" 
                      name="shipping.methods" 
                      value="pickup"
                      <%= (Array.isArray(shippingMethods) && shippingMethods.includes('pickup')) ? 'checked' : '' %>
                    >
                    <span class="checkmark"></span>
                    <%= t('manufacturer.products.edit.form.shippingMethodPickup') %>
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- Form Navigation -->
          <div class="form-navigation">
            <button type="button" class="btn-outline prev-step" id="prevStep" style="display: none;">
              <i class="fas fa-arrow-left"></i>
              <%= t('manufacturer.products.edit.navigation.back') %>
            </button>
            <div class="nav-info">
              <span class="current-step">1</span> / <span class="total-steps">5</span>
            </div>
            <button type="button" class="btn-primary" id="nextStep">
              <%= t('manufacturer.products.edit.navigation.next') %>
              <i class="fas fa-arrow-right"></i>
            </button>
            <button type="submit" class="btn-success" id="submitForm" style="display: none;">
              <i class="fas fa-save"></i>
              <%= t('manufacturer.products.edit.navigation.save') %>
            </button>
          </div>
        </form>
      </div>

      <!-- Right Side: Product Preview & Analytics -->
      <div class="sidebar-container">
        <!-- Product Analytics -->
        <div class="analytics-card animate-fade-in">
          <div class="card-header">
            <h4>
              <i class="fas fa-chart-line"></i>
              <%= t('manufacturer.products.edit.analytics.title') %>
            </h4>
          </div>
          <div class="card-body">
            <div class="analytics-grid">
              <div class="analytics-item">
                <div class="analytics-icon views">
                  <i class="fas fa-eye"></i>
                </div>
                <div class="analytics-info">
                  <div class="analytics-value"><%= productAnalytics.views?.total || 0 %></div>
                  <div class="analytics-label"><%= t('manufacturer.products.edit.analytics.views') %></div>
                </div>
              </div>
              <div class="analytics-item">
                <div class="analytics-icon orders">
                  <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="analytics-info">
                  <div class="analytics-value"><%= productAnalytics.orders?.total || 0 %></div>
                  <div class="analytics-label"><%= t('manufacturer.products.edit.analytics.orders') %></div>
                </div>
              </div>
              <div class="analytics-item">
                <div class="analytics-icon revenue">
                  <i class="fas fa-dollar-sign"></i>
                </div>
                <div class="analytics-info">
                  <div class="analytics-value">$<%= (productAnalytics.revenue?.total || 0).toLocaleString() %></div>
                  <div class="analytics-label"><%= t('manufacturer.products.edit.analytics.revenue') %></div>
                </div>
              </div>
              <div class="analytics-item">
                <div class="analytics-icon conversion">
                  <i class="fas fa-percent"></i>
                </div>
                <div class="analytics-info">
                  <div class="analytics-value"><%= (productAnalytics.conversion?.rate || 0).toFixed(2) %>%</div>
                  <div class="analytics-label"><%= t('manufacturer.products.edit.analytics.conversion') %></div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions-card animate-fade-in">
          <div class="card-header">
            <h4>
              <i class="fas fa-bolt"></i>
              <%= t('manufacturer.products.edit.quickActions.title') %>
            </h4>
          </div>
          <div class="card-body">
            <div class="action-buttons">
              <button class="action-btn" id="duplicateProductBtn">
                <i class="fas fa-copy"></i>
                <span><%= t('manufacturer.products.edit.quickActions.duplicate') %></span>
              </button>
              <button class="action-btn" id="viewAnalyticsBtn">
                <i class="fas fa-chart-area"></i>
                <span><%= t('manufacturer.products.edit.quickActions.viewAnalytics') %></span>
              </button>
              <button class="action-btn" id="shareProductBtn">
                <i class="fas fa-share-alt"></i>
                <span><%= t('manufacturer.products.edit.quickActions.share') %></span>
              </button>
              <button class="action-btn danger" id="deleteProductBtn">
                <i class="fas fa-trash"></i>
                <span><%= t('manufacturer.products.edit.quickActions.delete') %></span>
              </button>
            </div>
          </div>
        </div>

        <!-- Status & Visibility -->
        <div class="status-card animate-fade-in">
          <div class="card-header">
            <h4>
              <i class="fas fa-toggle-on"></i>
              <%= t('manufacturer.products.edit.status.title') %>
            </h4>
          </div>
          <div class="card-body">
            <div class="status-controls">
              <div class="control-item">
                <label class="toggle-switch">
                  <input 
                    type="checkbox" 
                    id="isFeatured" 
                    name="isFeatured"
                    <%= (product.isFeatured) ? 'checked' : '' %>
                  >
                  <span class="toggle-slider"></span>
                </label>
                <div class="control-info">
                  <div class="control-label"><%= t('manufacturer.products.edit.status.featured') %></div>
                  <div class="control-description"><%= t('manufacturer.products.edit.status.featuredDescription') %></div>
                </div>
              </div>
              
              <div class="control-item">
                <label class="toggle-switch">
                  <input 
                    type="checkbox" 
                    id="isPromoted" 
                    name="isPromoted"
                    <%= (product.isPromoted) ? 'checked' : '' %>
                  >
                  <span class="toggle-slider"></span>
                </label>
                <div class="control-info">
                  <div class="control-label"><%= t('manufacturer.products.edit.status.promoted') %></div>
                  <div class="control-description"><%= t('manufacturer.products.edit.status.promotedDescription') %></div>
                </div>
              </div>
              
              <div class="stock-status">
                <div class="status-indicator <%= product.stockStatus || 'in_stock' %>">
                  <% if (product.stockStatus === 'out_of_stock') { %>
                    <i class="fas fa-times-circle"></i>
                    <%= t('manufacturer.products.edit.status.outOfStock') %>
                  <% } else if (product.stockStatus === 'low_stock') { %>
                    <i class="fas fa-exclamation-triangle"></i>
                    <%= t('manufacturer.products.edit.status.lowStock') %>
                  <% } else { %>
                    <i class="fas fa-check-circle"></i>
                    <%= t('manufacturer.products.edit.status.inStock') %>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Enhanced CSS for Professional Image Management -->
<style>
/* Image Counter Section */
.image-counter-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding: 0.75rem 1rem;
    background: #334155;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
}

.image-counter {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-secondary);
}

.image-status-info {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
}

.temp-images-count {
    color: #059669;
    font-weight: 500;
}

.existing-images-count {
    color: #3b82f6;
    font-weight: 500;
}

/* Upload Note */
.upload-note {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: #6b7280;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #334155;
    border-radius: 6px;
    border-left: 3px solid #0ea5e9;
}

.upload-note i {
    color: #0ea5e9;
}

/* Enhanced Image Item */
.image-item {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    background: white;
    border: 2px solid transparent;
}

.image-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 15px -3px rgba(0, 0, 0, 0.1);
    border-color: #3b82f6;
}

.image-wrapper {
    position: relative;
    width: 100%;
    height: 180px;
    overflow: hidden;
}

.image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.7);
    opacity: 0;
    transition: opacity 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.image-item:hover .image-overlay {
    opacity: 1;
}

.image-controls {
    display: flex;
    gap: 0.5rem;
}

.image-controls .btn-sm {
    padding: 0.5rem;
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.9);
    color: #374151;
    border: none;
    transition: all 0.2s ease;
    cursor: pointer;
}

.image-controls .btn-sm:hover {
    background: white;
    transform: scale(1.1);
}

.set-primary .fa-star {
    color: #f59e0b;
}

.replace-image .fa-sync-alt {
    color: #3b82f6;
}

.remove-image .fa-trash {
    color: #ef4444;
}

/* Badges */
.primary-badge, .temp-badge {
    position: absolute;
    top: 0.5rem;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
    text-transform: uppercase;
    letter-spacing: 0.025em;
}

.primary-badge {
    right: 0.5rem;
    background: linear-gradient(135deg, #f59e0b, #d97706);
    box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);
}

.temp-badge {
    left: 0.5rem;
    background: linear-gradient(135deg, #10b981, #059669);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);
}

/* Image Info */
.image-info {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 0.75rem;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    font-size: 0.75rem;
}

.image-filename {
    font-weight: 500;
    margin-bottom: 0.25rem;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.image-size {
    opacity: 0.8;
}

/* Upload Progress Enhancement */
.upload-progress {
    margin: 1rem 0;
    padding: 1rem;
    background: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-radius: 8px;
    text-align: center;
}

.progress-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #e2e8f0;
    border-top: 2px solid #0ea5e9;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.progress-text {
    color: #0369a1;
    font-weight: 500;
}

/* Empty Images State */
.empty-images-state {
    grid-column: 1 / -1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem 2rem;
    text-align: center;
    background: #f8fafc;
    border: 2px dashed #e2e8f0;
    border-radius: 12px;
    margin: 1rem 0;
}

.empty-state-content {
    max-width: 300px;
}

.empty-state-content i {
    font-size: 3rem;
    color: #94a3b8;
    margin-bottom: 1rem;
}

.empty-state-content h4 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #374151;
    margin: 0 0 0.5rem 0;
}

.empty-state-content p {
    color: #6b7280;
    margin: 0;
    font-size: 0.875rem;
}

/* Enhanced Toast Notifications */
.toast-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    min-width: 320px;
    max-width: 400px;
    padding: 1rem;
    border-radius: 12px;
    color: white;
    z-index: 10000;
    font-size: 0.875rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    animation: slideInRight 0.3s ease-out;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 0.75rem;
}

.toast-success {
    background: linear-gradient(135deg, #10b981, #059669);
}

.toast-error {
    background: linear-gradient(135deg, #ef4444, #dc2626);
}

.toast-info {
    background: linear-gradient(135deg, #3b82f6, #2563eb);
}

.toast-content {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
}

.toast-close {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

.toast-close:hover {
    background: rgba(255, 255, 255, 0.2);
}

@keyframes slideInRight {
    from {
        transform: translateX(100%);
        opacity: 0;
    }
    to {
        transform: translateX(0);
        opacity: 1;
    }
}

@keyframes slideOutRight {
    from {
        transform: translateX(0);
        opacity: 1;
    }
    to {
        transform: translateX(100%);
        opacity: 0;
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .image-counter-section {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .image-status-info {
        justify-content: center;
    }
    
    .toast-notification {
        left: 10px;
        right: 10px;
        max-width: none;
    }
    
    .image-controls {
        flex-direction: column;
    }
}
</style>

<!-- Server Data for JavaScript -->
<script type="application/json" id="product-edit-data">
<%- JSON.stringify({
  product: product,
  categories: categories,
  productAnalytics: productAnalytics,
  user: {
    id: user._id || '',
    name: user.name || 'Manufacturer',
    companyName: user.companyName || 'Manufacturing Company'
  },
  apiEndpoints: {
    updateProduct: '/manufacturer/api/products/' + product._id,
    uploadImages: '/manufacturer/api/products/upload-images',
    deleteProduct: '/manufacturer/api/products/' + product._id
  }
}) %>
</script>

<!-- Core JavaScript Dependencies -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="/assets/js/jquery-3.7.1.min.js"></script>
<script src="/assets/js/boostrap.bundle.min.js"></script>


<script src="/js/manufacturer/dashboard-init.js"></script>

<!-- Professional Unified Header Management -->
<script src="/js/manufacturer/manufacturer-header.js"></script>

<!-- Complete Manufacturer Dashboard Functionality -->
<script src="/js/manufacturer/manufacturer-dashboard.js"></script>

<!-- Product Edit JavaScript -->
<script>
// Get server data
const productEditData = JSON.parse(document.getElementById('product-edit-data').textContent);

/**
 * Professional B2B Product Edit Manager
 * Senior Software Engineer implementation with advanced features
 */
class ProductEditManager {
    constructor() {
        this.currentStep = 1;
        this.totalSteps = 5;
        this.product = productEditData?.product || {};
        this.isDirty = false;
        this.autoSaveEnabled = true;
        this.autoSaveInterval = null;
        this.validationRules = this.setupValidationRules();
        this.uploadedImages = [];
        
        // Validate essential data
        if (!this.product._id) {
            console.warn('⚠️ Product ID missing - form may not save properly');
        }
        
        this.init();
    }

    init() {
         
        try {
            this.setupFormNavigation();
            
            this.setupFormValidation();
            this.setupImageUpload();
            this.setupDynamicSections();
            this.setupAutoSave();
            this.setupKeyboardShortcuts();
            this.setupFormChangeTracking();
            // Initialize form with product data verification
            this.verifyFormData();
        
        } catch (error) {
            console.error('❌ Product Edit Manager initialization failed:', error);
            throw error;
        }
    }
    
    verifyFormData() {
        const form = document.getElementById('productEditForm');
        if (!form) {
            return;
        }
        
        // Verify key fields are populated
        const nameField = form.querySelector('input[name="name"]');
        const priceField = form.querySelector('input[name="pricing.basePrice"]');
        const stockField = form.querySelector('input[name="inventory.totalStock"]');
       
        if (!nameField?.value) {
            console.warn('⚠️ Product name field is empty');
        }
    }

    setupFormNavigation() {
        const nextBtn = document.getElementById('nextStep');
        const prevBtn = document.getElementById('prevStep');
        const submitBtn = document.getElementById('submitForm');

        nextBtn?.addEventListener('click', () => this.nextStep());
        prevBtn?.addEventListener('click', () => this.prevStep());
        submitBtn?.addEventListener('click', (e) => this.submitForm(e));

        // Step indicators
        document.querySelectorAll('.step[data-step]').forEach(step => {
            step.addEventListener('click', (e) => {
                const stepNum = parseInt(e.currentTarget.dataset.step);
                this.goToStep(stepNum);
            });
        });
        
        // Draft/Publish Button Event Listeners - Professional Implementation
        this.setupDraftPublishButtons();
    }
    
    /**
     * Setup Draft/Publish functionality - Senior Software Engineer Implementation
     */
    setupDraftPublishButtons() {
        const saveAsDraftBtn = document.getElementById('saveAsDraftBtn');
        const publishBtn = document.getElementById('publishBtn');
        
        // Save as Draft functionality
        saveAsDraftBtn?.addEventListener('click', async (e) => {
            e.preventDefault();
            await this.saveAsDraft();
        });
        
        // Publish functionality
        publishBtn?.addEventListener('click', async (e) => {
            e.preventDefault();
            await this.publishProduct();
        });
        
        // Update button states based on current product status
        this.updateButtonStates();
    }
    
    /**
     * Update button states based on product status
     */
    updateButtonStates() {
        const saveAsDraftBtn = document.getElementById('saveAsDraftBtn');
        const publishBtn = document.getElementById('publishBtn');
        
        if (!saveAsDraftBtn || !publishBtn) return;
        
        const currentStatus = this.product?.status || 'draft';
        
        // Update button text and styling based on status
        if (currentStatus === 'draft') {
            saveAsDraftBtn.innerHTML = '<i class="fas fa-save"></i> ' + (window.t ? window.t('manufacturer.products.edit.actions.saveAsDraft') : 'Qoralama sifatida saqlash');
            publishBtn.innerHTML = '<i class="fas fa-rocket"></i> ' + (window.t ? window.t('manufacturer.products.edit.actions.publish') : 'Chop etish');
            publishBtn.classList.remove('btn-success');
            publishBtn.classList.add('btn-primary');
        } else if (currentStatus === 'active') {
            saveAsDraftBtn.innerHTML = '<i class="fas fa-edit"></i> ' + (window.t ? window.t('manufacturer.products.edit.actions.revertToDraft') : 'Qoralamaga qaytarish');
            publishBtn.innerHTML = '<i class="fas fa-check-circle"></i> ' + (window.t ? window.t('manufacturer.products.edit.actions.published') : 'Chop etilgan');
            publishBtn.classList.remove('btn-primary');
            publishBtn.classList.add('btn-success');
        }
    }
    
    /**
     * Save product as draft - Professional implementation
     */
    async saveAsDraft() {
        try {
            
            const saveAsDraftBtn = document.getElementById('saveAsDraftBtn');
            
            // Show loading state
            this.setButtonLoading(saveAsDraftBtn, window.t ? window.t('manufacturer.products.edit.loading.saving') : 'Saqlanmoqda...');
            
            // Collect current form data
            const formData = this.collectFormData();
            
            // Send API request
            const response = await fetch(`/manufacturer/api/products/${this.product._id}/save-draft`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Update product status
                this.product.status = 'draft';
                this.updateButtonStates();
                this.isDirty = false;
                
                // Show success message
                this.showSuccessToast(window.t?.('manufacturer.products.edit.messages.savedAsDraft') || 'Mahsulot qoralama sifatida saqlandi');
                
            } else {
                this.showErrorToast(result.message || (window.t?.('manufacturer.products.edit.errors.saveDraftError') || 'Qoralama saqlashda xatolik yuz berdi'));
                console.error('❌ Save as draft failed:', result.message);
            }
            
        } catch (error) {
            console.error('❌ Save as draft error:', error);
            this.showErrorToast(window.t?.('manufacturer.products.edit.errors.saveDraftError') || 'Qoralama saqlashda xatolik yuz berdi');
        } finally {
            // Reset button state
            const saveAsDraftBtn = document.getElementById('saveAsDraftBtn');
            this.resetButtonLoading(saveAsDraftBtn, '<i class="fas fa-save"></i> ' + (window.t?.('manufacturer.products.edit.actions.saveAsDraft') || 'Qoralama sifatida saqlash'));
        }
    }
    
    /**
     * Publish product - Professional implementation with validation
     */
    async publishProduct() {
        try {
           
            
            const publishBtn = document.getElementById('publishBtn');
            
            // Show loading state
            this.setButtonLoading(publishBtn, 'Chop etilmoqda...');
            
            // Collect current form data
            const formData = this.collectFormData();
            
            // Validate form before publishing
            const validationResult = this.validateFormForPublishing(formData);
            
            if (!validationResult.isValid) {
                this.showValidationErrors(validationResult.errors);
                return;
            }
            
            // Send API request
            const response = await fetch(`/manufacturer/api/products/${this.product._id}/publish`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                // Update product status
                this.product.status = 'active';
                this.updateButtonStates();
                this.isDirty = false;
                
                // Show success message with marketplace link
                this.showPublishSuccessMessage(result.data);
                
            } else {
                if (result.errors && result.errors.length > 0) {
                    this.showValidationErrors(result.errors);
                } else {
                    this.showErrorToast(result.message || (window.t?.('manufacturer.products.edit.errors.publishError') || 'Chop etishda xatolik yuz berdi'));
                }
                console.error('❌ Publish failed:', result.message);
            }
            
        } catch (error) {
         
            this.showErrorToast(window.t ? window.t('manufacturer.products.edit.errors.publishError') : 'Chop etishda xatolik yuz berdi');
        } finally {
            // Reset button state
            const publishBtn = document.getElementById('publishBtn');
            this.resetButtonLoading(publishBtn, '<i class="fas fa-rocket"></i> ' + (window.t?.('manufacturer.products.edit.actions.publish') || 'Chop etish'));
        }
    }
    
    /**
     * Validate form data for publishing
     */
    validateFormForPublishing(formData) {
        const errors = [];
        
        // Required field validations
        if (!formData.name || formData.name.trim().length < 3) {
            errors.push(window.t?.('manufacturer.products.edit.validation.productNameMinLength') || 'Mahsulot nomi kamida 3 ta belgidan iborat bo\'lishi kerak');
        }
        
        if (!formData.description || formData.description.trim().length < 20) {
            errors.push(window.t?.('manufacturer.products.edit.validation.descriptionMinLength') || 'Mahsulot ta\'rif kamida 20 ta belgidan iborat bo\'lishi kerak');
        }
        
        if (!formData.category) {
            errors.push(window.t ? window.t('manufacturer.products.edit.validation.categoryRequired') : 'Kategoriya tanlanishi shart');
        }
        
        if (!formData.pricing?.basePrice || formData.pricing.basePrice <= 0) {
            errors.push(window.t ? window.t('manufacturer.products.edit.validation.basePriceRequired') : 'Asosiy narx 0 dan katta bo\'lishi kerak');
        }
        
        if (!formData.pricing?.minimumOrderQuantity || formData.pricing.minimumOrderQuantity <= 0) {
            errors.push(window.t ? window.t('manufacturer.products.edit.validation.minOrderQtyRequired') : 'Eng kam buyurtma miqdori 0 dan katta bo\'lishi kerak');
        }
        
        if (!formData.inventory?.totalStock || formData.inventory.totalStock <= 0) {
            errors.push(window.t ? window.t('manufacturer.products.edit.validation.totalStockRequired') : 'Umumiy ombor miqdori 0 dan katta bo\'lishi kerak');
        }
        
        if (!formData.inventory?.unit) {
            errors.push(window.t ? window.t('manufacturer.products.edit.validation.unitRequired') : 'O\'lchov birligi tanlanishi shart');
        }
        
        // Check for uploaded images with proper validation
        const totalImages = (this.temporaryImages?.length || 0) + (this.existingImages?.length || 0);
        
        if (totalImages === 0) {
            errors.push(window.t?.('manufacturer.products.edit.validation.imagesRequired') || 'Kamida bitta mahsulot rasmi yuklash shart');
        } else if (totalImages > 10) {
            errors.push(window.t?.('manufacturer.products.edit.validation.tooManyImages') || 'Maksimal 10 ta rasm yuklash mumkin');
        }
        
        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }
    
    /**
     * Show validation errors in a professional modal
     */
    showValidationErrors(errors) {
        const errorsList = errors.map(error => `<li>${error}</li>`).join('');
        
        const errorHtml = `
            <div class="validation-errors-modal">
                <div class="error-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3><%= t('manufacturer.products.edit.validationErrors.header') %></h3>
                </div>
                <ul class="error-list">
                    ${errorsList}
                </ul>
                <div class="error-actions">
                    <button class="btn btn-primary" onclick="this.parentElement.parentElement.remove()">
                        <%= t('manufacturer.products.edit.validationErrors.button') %>
                    </button>
                </div>
            </div>
        `;
        
        // Create and show error modal
        const errorDiv = document.createElement('div');
        errorDiv.className = 'validation-error-overlay';
        errorDiv.innerHTML = errorHtml;
        document.body.appendChild(errorDiv);
        
        // Auto remove after 10 seconds
        setTimeout(() => {
            if (errorDiv && errorDiv.parentElement) {
                errorDiv.remove();
            }
        }, 10000);
    }
    
    /**
     * Show publish success message with marketplace link
     */
    showPublishSuccessMessage(data) {
        const successHtml = `
            <div class="publish-success-modal">
                <div class="success-header">
                    <i class="fas fa-check-circle"></i>
                    <h3>${window.t?.('manufacturer.products.edit.success.publishedTitle') || 'Mahsulot muvaffaqiyatli chop etildi!'}</h3>
                </div>
                <div class="success-content">
                    <p>${window.t?.('manufacturer.products.edit.success.publishedDescription') || 'Sizning mahsulotingiz endi marketplace da ko\'rinadi va xaridorlar uni topishi mumkin.'}</p>
                    ${data.marketplaceUrl ? 
                        `<a href="${data.marketplaceUrl}" class="btn btn-outline" target="_blank">
                            <i class="fas fa-external-link-alt"></i> ${window.t?.('manufacturer.products.edit.success.viewInMarketplace') || 'Marketplace da ko\'rish'}
                        </a>` : ''
                    }
                </div>
                <div class="success-actions">
                    <button class="btn btn-success" onclick="this.parentElement.parentElement.parentElement.remove()">
                        ${window.t ? window.t('manufacturer.products.edit.success.great') : 'Ajoyib!'}
                    </button>
                </div>
            </div>
        `;
        
        // Create and show success modal
        const successDiv = document.createElement('div');
        successDiv.className = 'publish-success-overlay';
        successDiv.innerHTML = successHtml;
        document.body.appendChild(successDiv);
        
        // Auto remove after 8 seconds
        setTimeout(() => {
            if (successDiv && successDiv.parentElement) {
                successDiv.remove();
            }
        }, 8000);
    }
    
    /**
     * Set button loading state
     */
    setButtonLoading(button, text) {
        if (!button) return;
        
        button.disabled = true;
        button.classList.add('loading');
        button.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${text}`;
    }
    
    /**
     * Reset button loading state
     */
    resetButtonLoading(button, originalText) {
        if (!button) return;
        
        button.disabled = false;
        button.classList.remove('loading');
        button.innerHTML = originalText;
    }
    
    /**
     * Show success toast notification
     */
    showSuccessToast(message) {
        this.showToast(message, 'success');
    }
    
    /**
     * Show error toast notification
     */
    showErrorToast(message) {
        this.showToast(message, 'error');
    }
    
    /**
     * Generic toast notification
     */
    showToast(message, type = 'info') {
        const toastClass = type === 'success' ? 'toast-success' : 
                          type === 'error' ? 'toast-error' : 'toast-info';
        
        const toastIcon = type === 'success' ? 'check-circle' : 
                         type === 'error' ? 'exclamation-circle' : 'info-circle';
        
        const toast = document.createElement('div');
        toast.className = `toast ${toastClass}`;
        toast.innerHTML = `
            <i class="fas fa-${toastIcon}"></i>
            <span>${message}</span>
        `;
        
        // Add to page
        document.body.appendChild(toast);
        
        // Animate in
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Auto remove
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 4000);
    }

    setupFormValidation() {
        const form = document.getElementById('productEditForm');
        
        // Real-time validation
        form.querySelectorAll('input, textarea, select').forEach(field => {
            field.addEventListener('blur', () => this.validateField(field));
            field.addEventListener('input', () => this.clearFieldError(field));
        });
    }

    setupImageUpload() {
        // Initialize temporary image storage with proper validation
        this.temporaryImages = [];
        this.existingImages = [];
        this.deletedImages = []; // Track deleted existing images
        
        // Load existing images to temporary storage
        this.loadExistingImages();
        
        // Initial image counter update
        this.updateImageCounter();
        
        const uploadArea = document.getElementById('imageUploadArea');
        const uploadInput = document.getElementById('imageUploadInput');
        const uploadBtn = document.querySelector('.upload-btn');

        // Click to upload
        uploadBtn?.addEventListener('click', () => uploadInput?.click());
        uploadArea?.addEventListener('click', () => uploadInput?.click());

        // File input change - NEW: Base64 processing
        uploadInput?.addEventListener('change', (e) => {
            this.handleImageFilesAdvanced(e.target.files);
            e.target.value = ''; // Clear input for reuse
        });

        // Drag and drop - NEW: Base64 processing
        uploadArea?.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('drag-over');
        });

        uploadArea?.addEventListener('dragleave', () => {
            uploadArea.classList.remove('drag-over');
        });

        uploadArea?.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('drag-over');
            this.handleImageFilesAdvanced(e.dataTransfer.files);
        });

        }

    setupDynamicSections() {
        // Bulk pricing
        document.getElementById('addBulkPrice')?.addEventListener('click', () => {
            this.addBulkPriceRow();
        });

        // Specifications
        document.getElementById('addSpecification')?.addEventListener('click', () => {
            this.addSpecificationRow();
        });

        // Setup removal handlers
        this.setupRemovalHandlers();
    }

    setupAutoSave() {
        if (this.autoSaveEnabled) {
            this.autoSaveInterval = setInterval(() => {
                if (this.isDirty) {
                    this.autoSaveData();
                }
            }, 30000); // Auto-save every 30 seconds
        }
    }

    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch (e.key) {
                    case 's':
                        e.preventDefault();
                        this.submitForm();
                        break;
                    case 'ArrowRight':
                        if (e.altKey) {
                            e.preventDefault();
                            this.nextStep();
                        }
                        break;
                    case 'ArrowLeft':
                        if (e.altKey) {
                            e.preventDefault();
                            this.prevStep();
                        }
                        break;
                }
            }
        });
    }

    setupFormChangeTracking() {
        const form = document.getElementById('productEditForm');
        form?.addEventListener('input', () => {
            this.isDirty = true;
            this.updateSaveIndicator();
        });

        // Warn before leaving if unsaved changes
        window.addEventListener('beforeunload', (e) => {
            if (this.isDirty) {
                e.preventDefault();
                e.returnValue = 'Saqlanmagan o\'zgarishlar bor. Sahifani tark etishni xohlaysizmi?';
            }
        });
    }

    nextStep() {
        if (this.validateCurrentStep()) {
            if (this.currentStep < this.totalSteps) {
                this.goToStep(this.currentStep + 1);
            }
        }
    }

    prevStep() {
        if (this.currentStep > 1) {
            this.goToStep(this.currentStep - 1);
        }
    }

    goToStep(stepNumber) {
        if (stepNumber < 1 || stepNumber > this.totalSteps) return;

        // Hide current step
        document.querySelector(`.form-step[data-step="${this.currentStep}"]`)?.classList.remove('active');
        document.querySelector(`.step[data-step="${this.currentStep}"]`)?.classList.remove('active');

        // Show new step
        document.querySelector(`.form-step[data-step="${stepNumber}"]`)?.classList.add('active');
        document.querySelector(`.step[data-step="${stepNumber}"]`)?.classList.add('active');

        this.currentStep = stepNumber;

        // Update navigation
        this.updateNavigation();
        this.updateProgressBar();

        // Update step info
        document.querySelector('.current-step').textContent = this.currentStep;
    }

    updateNavigation() {
        const prevBtn = document.getElementById('prevStep');
        const nextBtn = document.getElementById('nextStep');
        const submitBtn = document.getElementById('submitForm');

        if (this.currentStep === 1) {
            prevBtn.style.display = 'none';
        } else {
            prevBtn.style.display = 'block';
        }

        if (this.currentStep === this.totalSteps) {
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'block';
        } else {
            nextBtn.style.display = 'block';
            submitBtn.style.display = 'none';
        }
    }

    updateProgressBar() {
        const progressBar = document.querySelector('.progress-fill');
        const percentage = (this.currentStep / this.totalSteps) * 100;
        progressBar.style.width = `${percentage}%`;
    }

    validateCurrentStep() {
        const currentStepElement = document.querySelector(`.form-step[data-step="${this.currentStep}"]`);
        const requiredFields = currentStepElement.querySelectorAll('[required]');
        let isValid = true;

        requiredFields.forEach(field => {
            if (!this.validateField(field)) {
                isValid = false;
            }
        });

        return isValid;
    }

    validateField(field) {
        const value = field.value.trim();
        const fieldName = field.name;
        const rules = this.validationRules[fieldName];

        if (!rules) return true;

        let isValid = true;
        let errorMessage = '';

        // Required validation
        if (rules.required && !value) {
            isValid = false;
            errorMessage = 'Bu maydon to\'ldirilishi shart';
        }

        // Length validation
        if (value && rules.minLength && value.length < rules.minLength) {
            isValid = false;
            errorMessage = `Kamida ${rules.minLength} ta belgi kiriting`;
        }

        if (value && rules.maxLength && value.length > rules.maxLength) {
            isValid = false;
            errorMessage = `Maksimal ${rules.maxLength} ta belgi`;
        }

        // Pattern validation
        if (value && rules.pattern && !rules.pattern.test(value)) {
            isValid = false;
            errorMessage = rules.patternMessage || 'Noto\'g\'ri format';
        }

        // Custom validators
        if (value && rules.custom) {
            const customResult = rules.custom(value);
            if (customResult !== true) {
                isValid = false;
                errorMessage = customResult;
            }
        }

        this.displayFieldValidation(field, isValid, errorMessage);
        return isValid;
    }

    displayFieldValidation(field, isValid, errorMessage) {
        const wrapper = field.closest('.form-group');
        const errorElement = wrapper?.querySelector('.validation-message');

        if (!wrapper || !errorElement) return;

        if (isValid) {
            wrapper.classList.remove('error');
            wrapper.classList.add('valid');
            errorElement.textContent = '';
        } else {
            wrapper.classList.remove('valid');
            wrapper.classList.add('error');
            errorElement.textContent = errorMessage;
        }
    }

    clearFieldError(field) {
        const wrapper = field.closest('.form-group');
        wrapper?.classList.remove('error');
    }

    setupValidationRules() {
        return {
            'name': {
                required: true,
                minLength: 3,
                maxLength: 200
            },
            'description': {
                required: true,
                minLength: 10,
                maxLength: 2000
            },
            'pricing.basePrice': {
                required: true,
                custom: (value) => {
                    const num = parseFloat(value);
                    if (isNaN(num) || num <= 0) {
                        return 'Musbat son kiriting';
                    }
                    return true;
                }
            },
            'pricing.minimumOrderQuantity': {
                required: true,
                custom: (value) => {
                    const num = parseInt(value);
                    if (isNaN(num) || num < 1) {
                        return 'Kamida 1 bo\'lishi kerak';
                    }
                    return true;
                }
            }
        };
    }

    /**
     * PROFESSIONAL Image Files Handler - Base64 Temporary Storage
     * No immediate upload - files converted to base64 and stored temporarily
     */
    async handleImageFilesAdvanced(files) {
        
        const maxFiles = 10;
        const maxSize = 5 * 1024 * 1024; // 5MB
        const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/jpg'];

        // Validate files
        const validFiles = Array.from(files).filter(file => {
            if (!allowedTypes.includes(file.type)) {
                this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.wrongFileType', { fileName: file.name }) : `Noto'g'ri fayl turi: ${file.name}`);
                return false;
            }
            if (file.size > maxSize) {
                this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.fileTooLarge', { fileName: file.name, fileSize: (file.size / 1024 / 1024).toFixed(1) }) : `Fayl juda katta: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);
                return false;
            }
            return true;
        });

        if (validFiles.length === 0) return;

        // Check total image count with proper validation
        const currentTotalImages = (this.temporaryImages?.length || 0) + (this.existingImages?.length || 0);
        const newTotalImages = currentTotalImages + validFiles.length;
        
        if (newTotalImages > maxFiles) {
            const errorMessage = window.t ? 
                window.t('manufacturer.products.edit.images.maxImagesReached', { 
                    maxFiles: maxFiles, 
                    currentTotal: currentTotalImages,
                    tryingToAdd: validFiles.length
                }) : 
                `${window.t?.('manufacturer.products.edit.images.maxImagesReached', {max: maxFiles, current: currentTotalImages, trying: validFiles.length}) || `Maksimal ${maxFiles} ta rasm yuklash mumkin. Hozir ${currentTotalImages} ta mavjud, ${validFiles.length} ta qo'shishga harakat qilmoqdasiz.`}`;
            
            this.showErrorToast(errorMessage);
            return;
        }

        try {
            // this.showProcessingState(true, window.t ? window.t('manufacturer.products.edit.images.processing') : 'Rasmlar qayta ishlanmoqda...'); // DISABLED - No processing modal
            
            // Convert files to base64 and add to temporary storage
            for (const file of validFiles) {
                await this.addImageToTemporaryStorage(file);
            }
            
            // Refresh UI
            this.refreshImageGrid();
            // this.showProcessingState(false); // DISABLED - No processing modal
            this.showSuccessToast(window.t?.('manufacturer.products.edit.images.addedSuccessfully', { count: validFiles.length }) || `${validFiles.length} ta rasm qo'shildi`);
            
            this.isDirty = true;
            
        } catch (error) {
            console.error('❌ Image processing error:', error);
            // this.showProcessingState(false); // DISABLED - No processing modal
            this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.processingError') : 'Rasmlarni qayta ishfashda xatolik: ' + error.message);
        }
    }

    /**
     * Load existing product images to temporary storage - ENHANCED & FIXED
     */
    loadExistingImages() {
        try {
            // Initialize existing images array
            this.existingImages = [];
            
            if (this.product?.images && Array.isArray(this.product.images) && this.product.images.length > 0) {
                this.existingImages = this.product.images.map((img, index) => {
                    // Handle both string and object image formats
                    const imageUrl = (typeof img === 'string') ? img : (img.url || img.src || '');
                    const isPrimary = (typeof img === 'object' && img.isPrimary) || index === 0;
                    const alt = (typeof img === 'object' && img.alt) ? img.alt : `Product Image ${index + 1}`;
                    
                    // Validate image URL
                    if (!imageUrl) {
                        console.warn(`⚠️ Invalid image URL at index ${index}:`, img);
                        return null;
                    }
                    
                    return {
                        id: `existing_${Date.now()}_${index}`,
                        type: 'existing',
                        url: imageUrl,
                        alt: alt,
                        isPrimary: isPrimary,
                        originalData: img,
                        index: index
                    };
                }).filter(img => img !== null); // Remove null entries
                
                console.log(`✅ Loaded ${this.existingImages.length} existing images`);
            } else {
                console.log('ℹ️ No existing images found for this product');
            }
            
            // Update image counter after loading
            this.updateImageCounter();
            
        } catch (error) {
            console.error('❌ Error loading existing images:', error);
            this.existingImages = [];
            this.showErrorToast(window.t?.('manufacturer.products.edit.images.loadError') || 'Mavjud rasmlarni yuklashda xatolik');
        }
    }

    /**
     * Add file to temporary storage as base64
     */
    async addImageToTemporaryStorage(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const tempImage = {
                        id: `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        type: 'temporary',
                        file: file,
                        base64: e.target.result,
                        filename: file.name,
                        size: file.size,
                        mimeType: file.type,
                        isPrimary: this.temporaryImages.length === 0 && this.existingImages.length === 0,
                        alt: `${file.name.split('.')[0]}`
                    };
                    
                    this.temporaryImages.push(tempImage);
                    resolve(tempImage);
                    
                } catch (error) {
                    console.error('❌ Error creating temporary image:', error);
                    reject(error);
                }
            };
            
            reader.onerror = (error) => {
                console.error('❌ FileReader error:', error);
                reject(error);
            };
            
            reader.readAsDataURL(file);
        });
    }

    async uploadImages(files) {
        const formData = new FormData();
        files.forEach(file => formData.append('images', file));

        const response = await fetch(productEditData.apiEndpoints.uploadImages, {
            method: 'POST',
            body: formData,
            credentials: 'same-origin'
        });

        const result = await response.json();
        if (!result.success) {
            throw new Error(result.message || 'Upload failed');
        }

        return result.data.urls;
    }

    /**
     * PROFESSIONAL UI Image Grid Refresh - ENHANCED & FIXED
     * Displays both existing and temporary images with proper validation
     */
    refreshImageGrid() {
        try {
            const currentImages = document.getElementById('currentImages');
            if (!currentImages) {
                console.error('❌ currentImages container not found');
                return;
            }
            
            let imagesGrid = currentImages.querySelector('.images-grid');
            
            if (!imagesGrid) {
                imagesGrid = document.createElement('div');
                imagesGrid.className = 'images-grid';
                currentImages.appendChild(imagesGrid);
            }

            // Clear existing grid
            imagesGrid.innerHTML = '';
            
            // Combine all images with validation
            const allImages = [...this.existingImages, ...this.temporaryImages].filter(img => {
                // Validate image data
                if (!img || !img.id) {
                    console.warn('⚠️ Invalid image data found:', img);
                    return false;
                }
                return true;
            });
            
            console.log(`🔄 Refreshing image grid with ${allImages.length} images (${this.existingImages.length} existing, ${this.temporaryImages.length} temporary)`);
            
            // Sort by primary status and then by creation order
            allImages.sort((a, b) => {
                if (a.isPrimary && !b.isPrimary) return -1;
                if (!a.isPrimary && b.isPrimary) return 1;
                return 0;
            });
            
            // Create image previews
            allImages.forEach((image, index) => {
                try {
                    const imageItem = this.createAdvancedImagePreview(image);
                    if (imageItem) {
                        imagesGrid.appendChild(imageItem);
                    }
                } catch (error) {
                    console.error(`❌ Error creating image preview for image ${index}:`, error);
                }
            });

            // Setup event handlers
            this.setupAdvancedImageHandlers();
            
            // Update image counter
            this.updateImageCounter();
            
            // Show empty state if no images
            if (allImages.length === 0) {
                this.showEmptyImageState(imagesGrid);
            }
            
        } catch (error) {
            console.error('❌ Error refreshing image grid:', error);
            this.showErrorToast(window.t ? 
                window.t('manufacturer.products.edit.images.refreshError') :
                'Rasm ro\'yxatini yangilashda xatolik'
            );
        }
    }
    
    /**
     * Show empty state when no images are present
     */
    showEmptyImageState(imagesGrid) {
        const emptyState = document.createElement('div');
        emptyState.className = 'empty-images-state';
        emptyState.innerHTML = `
            <div class="empty-state-content">
                <i class="fas fa-images"></i>
                <h4>${window.t?.('manufacturer.products.edit.images.noImages') || 'Hech qanday rasm yo\'q'}</h4>
                <p>${window.t?.('manufacturer.products.edit.images.uploadFirst') || 'Mahsulot uchun rasm yuklang'}</p>
            </div>
        `;
        imagesGrid.appendChild(emptyState);
    }

    /**
     * Create advanced image preview with enhanced controls
     */
    createAdvancedImagePreview(imageData) {
        const imageItem = document.createElement('div');
        imageItem.className = 'image-item';
        imageItem.dataset.imageId = imageData.id;
        imageItem.dataset.imageType = imageData.type;

        const imageSource = imageData.type === 'temporary' ? imageData.base64 : imageData.url;
        const isTemporary = imageData.type === 'temporary';
        
        imageItem.innerHTML = `
            <div class="image-wrapper">
                <img src="${imageSource}" alt="${imageData.alt || 'Product Image'}" loading="lazy" 
                     style="width: 100%; height: 150px; object-fit: cover; border-radius: 8px;">
                
                <div class="image-overlay">
                    <div class="image-controls">
                        <button type="button" class="btn-sm btn-ghost set-primary" 
                                title="${window.t?.('manufacturer.products.edit.images.setPrimaryTitle') || 'Asosiy qilish'}" data-image-id="${imageData.id}">
                            <i class="fas fa-star"></i>
                        </button>
                        <button type="button" class="btn-sm btn-ghost replace-image" 
                                title="Almashtirish" data-image-id="${imageData.id}">
                            <i class="fas fa-sync-alt"></i>
                        </button>
                        <button type="button" class="btn-sm btn-ghost remove-image" 
                                title="${window.t?.('manufacturer.products.edit.images.removeTitle') || 'O\'chirish'}" data-image-id="${imageData.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                ${imageData.isPrimary ? `<div class="primary-badge">${window.t?.('manufacturer.products.edit.images.primary') || 'Asosiy'}</div>` : ''}
                ${isTemporary ? `<div class="temp-badge">${window.t?.('manufacturer.products.edit.images.new') || 'Yangi'}</div>` : ''}
                
                <div class="image-info">
                    <div class="image-filename">${isTemporary ? imageData.filename : (window.t?.('manufacturer.products.edit.images.existingImage') || 'Mavjud rasm')}</div>
                    ${isTemporary ? `<div class="image-size">${(imageData.size / 1024).toFixed(0)} KB</div>` : ''}
                </div>
            </div>
        `;

        return imageItem;
    }

    /**
     * Enhanced image event handlers
     */
    setupAdvancedImageHandlers() {
        // Remove image handlers
        document.querySelectorAll('.remove-image').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const imageId = e.target.closest('.remove-image').dataset.imageId;
                this.removeImageAdvanced(imageId);
            });
        });

        // Set primary handlers
        document.querySelectorAll('.set-primary').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const imageId = e.target.closest('.set-primary').dataset.imageId;
                this.setPrimaryImageAdvanced(imageId);
            });
        });

        // Replace image handlers
        document.querySelectorAll('.replace-image').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const imageId = e.target.closest('.replace-image').dataset.imageId;
                this.replaceImageAdvanced(imageId);
            });
        });
    }

    /**
     * Remove image from storage
     */
    removeImageAdvanced(imageId) {
        if (!confirm(window.t?.('manufacturer.products.edit.images.confirmDelete') || 'Rasmni o\'chirishni xohlaysizmi?')) return;
        
        
        // Remove from temporary images
        const tempIndex = this.temporaryImages.findIndex(img => img.id === imageId);
        if (tempIndex !== -1) {
            this.temporaryImages.splice(tempIndex, 1);
        }
        
        // Remove from existing images and track for deletion
        const existingIndex = this.existingImages.findIndex(img => img.id === imageId);
        if (existingIndex !== -1) {
            const removedImage = this.existingImages.splice(existingIndex, 1)[0];
            this.deletedImages.push(removedImage);
        }
        
        // If primary image was removed, set new primary
        const allImages = [...this.existingImages, ...this.temporaryImages];
        const hasPrimary = allImages.some(img => img.isPrimary);
        
        if (!hasPrimary && allImages.length > 0) {
            allImages[0].isPrimary = true;
        }
        
        this.refreshImageGrid();
        this.isDirty = true;
        this.showSuccessToast(window.t?.('manufacturer.products.edit.images.imageRemoved') || 'Rasm o\'chirildi');
    }

    /**
     * Set primary image
     */
    setPrimaryImageAdvanced(imageId) {
        
        // Clear all primary flags
        this.temporaryImages.forEach(img => img.isPrimary = false);
        this.existingImages.forEach(img => img.isPrimary = false);
        
        // Set new primary
        const tempImage = this.temporaryImages.find(img => img.id === imageId);
        const existingImage = this.existingImages.find(img => img.id === imageId);
        
        if (tempImage) {
            tempImage.isPrimary = true;
        } else if (existingImage) {
            existingImage.isPrimary = true;
        }
        
        this.refreshImageGrid();
        this.isDirty = true;
        this.showSuccessToast(window.t?.('manufacturer.products.edit.images.primaryChanged') || 'Asosiy rasm o\'zgartirildi');
    }

    /**
     * Replace image
     */
    replaceImageAdvanced(imageId) {
        
        // Store the image ID for replacement
        this.replacingImageId = imageId;
        
        // Trigger file input
        const uploadInput = document.getElementById('imageUploadInput');
        uploadInput.addEventListener('change', this.handleImageReplacement.bind(this), { once: true });
        uploadInput.click();
    }

    /**
     * Handle image replacement - FIXED BUG
     */
    async handleImageReplacement(e) {
        const files = e.target.files;
        if (!files || files.length === 0) {
            this.replacingImageId = null;
            return;
        }
        
        const file = files[0];
        const maxSize = 5 * 1024 * 1024; // 5MB
        const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/jpg'];
        
        // Validate file
        if (!allowedTypes.includes(file.type)) {
            this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.wrongFileType', { fileName: file.name }) : `Noto'g'ri fayl turi: ${file.name}`);
            this.replacingImageId = null;
            return;
        }
        
        if (file.size > maxSize) {
            this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.fileTooLarge', { fileName: file.name, fileSize: (file.size / 1024 / 1024).toFixed(1) }) : `Fayl juda katta: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);
            this.replacingImageId = null;
            return;
        }
        
        if (!this.replacingImageId) {
            console.warn('⚠️ No replacing image ID found');
            return;
        }
        
        try {
            // this.showProcessingState(true, window.t ? window.t('manufacturer.products.edit.images.replacing') : 'Rasm almashtirilmoqda...'); // DISABLED - No processing modal
            
            
            // Find the image being replaced
            const tempIndex = this.temporaryImages.findIndex(img => img.id === this.replacingImageId);
            const existingIndex = this.existingImages.findIndex(img => img.id === this.replacingImageId);
            
            if (tempIndex !== -1) {
                // Replace temporary image - FIXED: Direct replacement without addImageToTemporaryStorage
                const oldImage = this.temporaryImages[tempIndex];
                
                // Create new image data manually
                const newImageData = await this.createImageDataFromFile(file);
                newImageData.isPrimary = oldImage.isPrimary;
                
                // Replace at exact same position
                this.temporaryImages[tempIndex] = newImageData;
                
                
            } else if (existingIndex !== -1) {
                // Replace existing image - FIXED: Don't use addImageToTemporaryStorage
                const oldImage = this.existingImages[existingIndex];
                
                // Create new image data manually  
                const newImageData = await this.createImageDataFromFile(file);
                newImageData.isPrimary = oldImage.isPrimary;
                
                // Remove from existing and add to deleted
                const removed = this.existingImages.splice(existingIndex, 1)[0];
                this.deletedImages.push(removed);
                
                // Add new image to temporaryImages (this is correct behavior)
                this.temporaryImages.push(newImageData);
                
                
            } else {
                console.error(`❌ Image not found for replacement: ${this.replacingImageId}`);
                this.showErrorToast(window.t?.('manufacturer.products.edit.images.imageNotFound') || 'Almashtirilayotgan rasm topilmadi');
                return;
            }
            
            this.refreshImageGrid();
            // this.showProcessingState(false); // DISABLED - No processing modal
            this.showSuccessToast(window.t ? window.t('manufacturer.products.edit.images.replacedSuccessfully') : 'Rasm muvaffaqiyatli almashtirildi');
            this.isDirty = true;
            
        } catch (error) {
            console.error('❌ Image replacement error:', error);
            // this.showProcessingState(false); // DISABLED - No processing modal
            this.showErrorToast(window.t ? window.t('manufacturer.products.edit.images.replaceError') : 'Rasm almashtirishda xatolik');
        }
        
        // Clear replacement ID
        this.replacingImageId = null;
        e.target.value = '';
    }

    /**
     * Create image data from file - Helper method
     */
    async createImageDataFromFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const imageData = {
                        id: `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                        type: 'temporary',
                        file: file,
                        base64: e.target.result,
                        filename: file.name,
                        size: file.size,
                        mimeType: file.type,
                        isPrimary: false, // Will be set by caller
                        alt: file.name.split('.')[0]
                    };
                    
                    resolve(imageData);
                    
                } catch (error) {
                    reject(error);
                }
            };
            
            reader.onerror = (error) => {
                reject(error);
            };
            
            reader.readAsDataURL(file);
        });
    }

    /**
     * Update image counter display - ENHANCED & FIXED
     */
    updateImageCounter() {
        const totalImages = this.temporaryImages.length + this.existingImages.length;
        const tempCount = this.temporaryImages.length;
        const existingCount = this.existingImages.length;
        
        // Update main counter with proper ID selector
        const counterElement = document.getElementById('imageCounter');
        if (counterElement) {
            const counterText = window.t?.('manufacturer.products.edit.images.counter', { count: totalImages, max: 10 }) || `${totalImages}/10 rasm`;
            counterElement.textContent = counterText;
            
            // Add visual indication if limit is approaching
            if (totalImages >= 8) {
                counterElement.style.color = '#dc2626';
            } else if (totalImages >= 6) {
                counterElement.style.color = '#d97706';
            } 
        }
        
        // Update detailed counters with proper ID selectors
        const tempCountElement = document.getElementById('tempImagesCount');
        const existingCountElement = document.getElementById('existingImagesCount');
        
        if (tempCountElement) {
            const tempText = window.t ? 
                window.t('manufacturer.products.edit.images.new') + `: ${tempCount}` :
                `Yangi: ${tempCount}`;
            tempCountElement.textContent = tempText;
        }
        
        if (existingCountElement) {
            const existingText = window.t ? 
                window.t('manufacturer.products.edit.images.existing') + `: ${existingCount}` :
                `Mavjud: ${existingCount}`;
            existingCountElement.textContent = existingText;
        }
        
        // Update upload area visibility based on image count
        this.updateUploadAreaVisibility(totalImages);
    }
    
    /**
     * Update upload area visibility based on image count
     */
    updateUploadAreaVisibility(totalImages) {
        const uploadArea = document.getElementById('imageUploadArea');
        if (!uploadArea) return;
        
        if (totalImages >= 10) {
            uploadArea.style.display = 'none';
            this.showInfoToast(window.t?.('manufacturer.products.edit.images.maxImagesReached', { max: 10 }) || 'Maksimal 10 ta rasm yuklash mumkin');
        } else {
            uploadArea.style.display = 'block';
        }
    }

    createImagePreview(imageUrl, isPrimary = false) {
        const imageItem = document.createElement('div');
        imageItem.className = 'image-item';
        imageItem.dataset.imageUrl = imageUrl;

        imageItem.innerHTML = `
            <div class="image-wrapper">
                <img src="${imageUrl}" alt="Product Image" loading="lazy">
                <div class="image-overlay">
                    <button type="button" class="btn-sm btn-ghost set-primary" title="${window.t?.('manufacturer.products.edit.images.setPrimaryTitle') || 'Asosiy qilish'}">
                        <i class="fas fa-star"></i>
                    </button>
                    <button type="button" class="btn-sm btn-ghost remove-image" title="${window.t?.('manufacturer.products.edit.images.removeTitle') || 'O\'chirish'}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
                ${isPrimary ? `<div class="primary-badge">${window.t?.('manufacturer.products.edit.images.primary') || 'Asosiy'}</div>` : ''}
            </div>
        `;

        return imageItem;
    }

    setupImageRemovalHandlers() {
        document.querySelectorAll('.remove-image').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const imageItem = e.target.closest('.image-item');
                this.removeImage(imageItem);
            });
        });

        document.querySelectorAll('.set-primary').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const imageItem = e.target.closest('.image-item');
                this.setPrimaryImage(imageItem);
            });
        });
    }

    removeImage(imageItem) {
        if (confirm(window.t?.('manufacturer.products.edit.images.confirmDelete') || 'Rasmni o\'chirishni xohlaysizmi?')) {
            imageItem.remove();
            this.isDirty = true;
        }
    }

    setPrimaryImage(imageItem) {
        // Remove primary badge from all images
        document.querySelectorAll('.primary-badge').forEach(badge => badge.remove());
        
        // Add primary badge to selected image
        const primaryBadge = document.createElement('div');
        primaryBadge.className = 'primary-badge';
        primaryBadge.textContent = window.t?.('manufacturer.products.edit.images.primary') || 'Asosiy';
        imageItem.querySelector('.image-wrapper').appendChild(primaryBadge);

        // Move to first position
        const imagesGrid = imageItem.closest('.images-grid');
        imagesGrid.insertBefore(imageItem, imagesGrid.firstChild);

        this.isDirty = true;
    }

    showUploadProgress(show) {
        const progressElement = document.getElementById('uploadProgress');
        progressElement.style.display = show ? 'block' : 'none';
    }

    addBulkPriceRow() {
        const list = document.getElementById('bulkPricingList');
        const index = list.children.length;
        
        const row = document.createElement('div');
        row.className = 'bulk-price-item';
        row.dataset.index = index;
        
        row.innerHTML = `
            <div class="bulk-inputs">
                <input type="number" name="pricing.bulkPricing[${index}].minQuantity" placeholder="${window.t?.('manufacturer.products.edit.form.minQuantity') || 'Min miqdor'}" class="form-input small">
                <span>-</span>
                <input type="number" name="pricing.bulkPricing[${index}].maxQuantity" placeholder="${window.t?.('manufacturer.products.edit.form.maxQuantity') || 'Max miqdor'}" class="form-input small">
                <input type="number" name="pricing.bulkPricing[${index}].price" placeholder="${window.t?.('manufacturer.products.edit.form.price') || 'Narx (USD)'}" step="0.01" class="form-input small">
                <input type="number" name="pricing.bulkPricing[${index}].discount" placeholder="${window.t?.('manufacturer.products.edit.form.discount') || 'Chegirma %'}" class="form-input small">
            </div>
            <button type="button" class="btn-sm btn-ghost remove-bulk-price">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        list.appendChild(row);
        this.setupRemovalHandlers();
    }

    addSpecificationRow() {
        const list = document.getElementById('specificationsList');
        const index = list.children.length;
        
        const row = document.createElement('div');
        row.className = 'specification-item';
        row.dataset.index = index;
        
        row.innerHTML = `
            <div class="spec-inputs">
                <input type="text" name="specifications[${index}].name" placeholder="Xususiyat nomi (Masalan: Material)" class="form-input">
                <input type="text" name="specifications[${index}].value" placeholder="Qiymati (Masalan: 100% Paxta)" class="form-input">
                <input type="text" name="specifications[${index}].unit" placeholder="O'lchov (Masalan: %, kg, m)" class="form-input small">
            </div>
            <button type="button" class="btn-sm btn-ghost remove-specification">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        list.appendChild(row);
        this.setupRemovalHandlers();
    }

    setupRemovalHandlers() {
        document.querySelectorAll('.remove-bulk-price').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.target.closest('.bulk-price-item').remove();
                this.reindexBulkPricing();
            });
        });

        document.querySelectorAll('.remove-specification').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.target.closest('.specification-item').remove();
                this.reindexSpecifications();
            });
        });
    }

    reindexBulkPricing() {
        document.querySelectorAll('.bulk-price-item').forEach((item, index) => {
            item.dataset.index = index;
            item.querySelectorAll('input').forEach(input => {
                const name = input.name.replace(/\[\d+\]/, `[${index}]`);
                input.name = name;
            });
        });
    }

    reindexSpecifications() {
        document.querySelectorAll('.specification-item').forEach((item, index) => {
            item.dataset.index = index;
            item.querySelectorAll('input').forEach(input => {
                const name = input.name.replace(/\[\d+\]/, `[${index}]`);
                input.name = name;
            });
        });
    }

    async submitForm(e) {
        if (e) e.preventDefault();

        if (!this.validateForm()) {
            this.showErrorToast('Formani to\'ldirish paytida xatoliklar bor');
            return;
        }

        try {
            // this.showLoading(true); // DISABLED - No loading modal
            
            const formData = this.collectFormData();
            const response = await this.updateProduct(formData);
            
            // this.showLoading(false); // DISABLED - No loading modal
            this.isDirty = false;
            
            this.showSuccessToast(window.t?.('manufacturer.products.edit.messages.updated') || 'Mahsulot muvaffaqiyatli yangilandi!');
            
            // Redirect after successful update
            setTimeout(() => {
                window.location.href = '/manufacturer/marketplace';
            }, 2000);
            
        } catch (error) {
            // this.showLoading(false); // DISABLED - No loading modal
            console.error('❌ Form submission failed:', error);
            
            // Enhanced error handling with specific messages
            let errorMessage = (window.t?.('manufacturer.products.edit.errors.generalError') || 'Xatolik yuz berdi') + ': ' + error.message;
            
            if (error.message.includes('validation')) {
                errorMessage = 'Ma\'lumotlarni tekshirishda xatolik. Barcha majburiy maydonlarni to\'ldiring va qayta urinib ko\'rinang.';
            } else if (error.message.includes('inventory.availableStock')) {
                errorMessage = 'Inventar ma\'lumotlarida xatolik. Mavjud miqdor ko\'rsatilishi kerak.';
            } else if (error.message.includes('inventory.unit')) {
                errorMessage = 'Inventar o\'lchov birligi ko\'rsatilishi kerak.';
            } else if (error.message.includes('Cast to ObjectId')) {
                errorMessage = 'Kategoriya noto\'g\'ri tanlangan. Iltimos, kategoriyani qayta tanlang.';
            }
            
            this.showErrorToast(errorMessage);
        }
    }

    validateForm() {
        let isValid = true;
        
        for (let step = 1; step <= this.totalSteps; step++) {
            const stepElement = document.querySelector(`.form-step[data-step="${step}"]`);
            const requiredFields = stepElement.querySelectorAll('[required]');
            
            requiredFields.forEach(field => {
                if (!this.validateField(field)) {
                    isValid = false;
                }
            });
        }
        
        return isValid;
    }

    collectFormData() {
        const form = document.getElementById('productEditForm');
        const formData = new FormData(form);
        const data = {};

        // Convert FormData to nested object
        for (let [key, value] of formData.entries()) {
            this.setNestedProperty(data, key, value);
        }

        // Handle ObjectId fields - remove empty strings to prevent cast errors
        ['category', 'subcategory'].forEach(field => {
            if (data[field] === '' || data[field] === null || data[field] === undefined) {
                delete data[field];
            }
        });

        // Ensure inventory fields are complete
        if (data.inventory) {
            // If totalStock is provided but availableStock is missing, calculate it
            if (data.inventory.totalStock && !data.inventory.availableStock) {
                data.inventory.availableStock = data.inventory.totalStock - (data.inventory.reservedStock || 0);
            }
            
            // Ensure unit is set
            if (!data.inventory.unit) {
                data.inventory.unit = 'pieces';
            }
        }

        // Ensure pricing fields are properly typed
        if (data.pricing) {
            // Convert string numbers to proper types
            if (data.pricing.basePrice) {
                data.pricing.basePrice = parseFloat(data.pricing.basePrice) || 0;
            }
            if (data.pricing.minimumOrderQuantity) {
                data.pricing.minimumOrderQuantity = parseInt(data.pricing.minimumOrderQuantity) || 1;
            }
            if (data.pricing.maximumOrderQuantity && data.pricing.maximumOrderQuantity !== '') {
                data.pricing.maximumOrderQuantity = parseInt(data.pricing.maximumOrderQuantity);
            } else {
                delete data.pricing.maximumOrderQuantity;
            }
            
            // Ensure currency is set
            if (!data.pricing.currency) {
                data.pricing.currency = 'USD';
            }
        }

        // OPTIMIZED: Don't send heavy base64 data with form
        // Instead, prepare lightweight image metadata only
        data.imageData = this.prepareOptimizedImageData();

        // Collect shipping methods
        const shippingMethods = Array.from(document.querySelectorAll('input[name="shipping.methods"]:checked'))
            .map(input => input.value);
        if (shippingMethods.length > 0) {
            data.shipping = data.shipping || {};
            data.shipping.methods = shippingMethods;
        }

        return data;
    }

    setNestedProperty(obj, path, value) {
        const keys = path.split(/[\.\[\]]+/).filter(key => key);
        let current = obj;

        for (let i = 0; i < keys.length - 1; i++) {
            const key = keys[i];
            if (!(key in current)) {
                current[key] = isNaN(keys[i + 1]) ? {} : [];
            }
            current = current[key];
        }

        const lastKey = keys[keys.length - 1];
        if (Array.isArray(current)) {
            current[parseInt(lastKey)] = value;
        } else {
            current[lastKey] = value;
        }
    }

    async updateProduct(data) {
        
        try {
            // Step 1: Upload temporary images first if any exist
            let uploadedImageUrls = [];
            if (this.temporaryImages && this.temporaryImages.length > 0) {
                try {
                    uploadedImageUrls = await this.uploadTemporaryImages();
                } catch (uploadError) {
                    console.error('❌ Image upload failed:', uploadError);
                    throw new Error(window.t?.('manufacturer.products.edit.errors.imageUploadError') || 'Rasmlarni yuklashda xatolik. Iltimos, qayta urinib ko\'ring.');
                }
            }
            
            // Step 2: Update image data with uploaded URLs
            if (uploadedImageUrls.length > 0 && data.imageData) {
                // Add uploaded images to existing images
                const newImages = uploadedImageUrls.map((url, index) => {
                    const tempImg = this.temporaryImages[index];
                    return {
                        url: url,
                        alt: tempImg?.alt || '',
                        isPrimary: tempImg?.isPrimary || false,
                        type: 'uploaded'
                    };
                });
                
                data.imageData.existingImages = [
                    ...(data.imageData.existingImages || []),
                    ...newImages
                ];
                
                // Clear temporary images since they're now uploaded
                data.imageData.temporaryImages = [];
            }
            
            // Step 3: Send optimized product update
            const response = await fetch(productEditData.apiEndpoints.updateProduct, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify(data),
                credentials: 'same-origin'
            });

            const result = await response.json();
            
            if (!result.success) {
                // Enhanced error handling for different error types
                if (result.message && result.message.includes('request entity too large')) {
                    throw new Error(window.t?.('manufacturer.products.edit.errors.payloadTooLarge') || 'Ma\'lumot hajmi juda katta. Rasmlar sonini kamaytiring yoki kichik hajmdagi rasmlar ishlating.');
                } else if (result.error && result.error.includes('Cast to ObjectId failed')) {
                    throw new Error(window.t?.('manufacturer.products.edit.errors.castError') || 'Kategoriya maydoni noto\'g\'ri. Iltimos, kategoriyani qayta tanlang.');
                } else if (result.error && result.error.includes('validation')) {
                    throw new Error(window.t?.('manufacturer.products.edit.errors.validationErrorGeneric') || 'Ma\'lumotlarni tekshirishda xatolik. Barcha majburiy maydonlarni to\'ldiring.');
                } else {
                    throw new Error(result.message || (window.t?.('manufacturer.products.edit.errors.updateError') || 'Mahsulotni yangilashda xatolik yuz berdi'));
                }
            }

            // Step 4: Clean up temporary images and update state
            if (uploadedImageUrls.length > 0) {
                // Store temp image data before clearing
                const tempImagesCopy = [...this.temporaryImages];
                
                // Clear temporary images from local state
                this.temporaryImages = [];
                
                // Update existing images with new uploaded ones
                uploadedImageUrls.forEach((url, index) => {
                    const tempImg = tempImagesCopy[index];
                    this.existingImages.push({
                        id: `uploaded_${Date.now()}_${index}`,
                        type: 'existing',
                        url: url,
                        alt: tempImg?.alt || '',
                        isPrimary: tempImg?.isPrimary || false
                    });
                });
                
                // Refresh UI
                this.refreshImageGrid();
                
            }

            return result.data;
            
        } catch (error) {
            console.error('❌ Optimized product update failed:', error);
            
            // Enhanced user-friendly error messages
            if (error.message.includes('PayloadTooLargeError') || error.message.includes('request entity too large')) {
                throw new Error(window.t?.('manufacturer.products.edit.errors.payloadTooLarge') || 'Ma\'lumot hajmi juda katta. Rasmlar sonini kamaytiring yoki kichik rasmlar ishlating.');
            }
            
            throw error;
        }
    }

    async autoSaveData() {
        try {
            const formData = this.collectFormData();
            // Save to localStorage as draft
            localStorage.setItem(`product_draft_${this.product._id}`, JSON.stringify({
                data: formData,
                timestamp: Date.now()
            }));
            
            this.showAutoSaveIndicator();
        } catch (error) {
            console.error('Auto-save failed:', error);
        }
    }

    showAutoSaveIndicator() {
        // Show brief auto-save indicator
        const indicator = document.createElement('div');
        indicator.className = 'auto-save-indicator';
        indicator.textContent = 'Avtomatik saqlandi';
        document.body.appendChild(indicator);
        
        setTimeout(() => indicator.remove(), 2000);
    }

    updateSaveIndicator() {
        // Update UI to show unsaved changes
        const title = document.querySelector('.page-title');
        if (title && !title.textContent.includes('*')) {
            title.textContent += ' *';
        }
    }

    showLoading(show) {
        const submitBtn = document.getElementById('submitForm');
        if (show) {
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + (window.t?.('manufacturer.products.edit.loading.saving') || 'Saqlanmoqda...');
        } else {
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-save"></i> ' + (window.t?.('manufacturer.products.edit.navigation.save') || 'Saqlash');
        }
    }

    showSuccess(message) {
        this.showToast(message, 'success');
    }

    showError(message) {
        this.showToast(message, 'error');
    }

    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        
        Object.assign(toast.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 16px',
            borderRadius: '8px',
            color: 'white',
            zIndex: '9999',
            fontSize: '14px',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            backgroundColor: type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6',
            animation: 'slideInRight 0.3s ease-out'
        });

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.style.animation = 'slideOutRight 0.3s ease-out';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // Cleanup
    destroy() {
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
        }
    }

    /**
     * PROFESSIONAL Image Management Methods
     */

    /**
     * Prepare image data for submission - PROFESSIONAL Implementation
     */
    prepareImageDataForSubmission() {
        const imageData = {
            temporaryImages: this.temporaryImages || [],
            existingImages: this.existingImages || [],
            deletedImages: this.deletedImages || []
        };
       
        
        return imageData;
    }

    /**
     * OPTIMIZED: Prepare lightweight image metadata only
     * No base64 data to reduce payload size
     */
    prepareOptimizedImageData() {
        const optimizedData = {
            // Lightweight metadata for temporary images
            temporaryImages: (this.temporaryImages || []).map(img => ({
                id: img.id,
                filename: img.filename,
                size: img.size,
                mimeType: img.mimeType,
                isPrimary: img.isPrimary,
                alt: img.alt,
                hasFile: !!img.file // Indicates if file exists for upload
            })),
            
            // Existing images metadata  
            existingImages: (this.existingImages || []).map(img => ({
                id: img.id,
                url: img.url,
                alt: img.alt,
                isPrimary: img.isPrimary,
                type: img.type
            })),
            
            // Deleted images for cleanup
            deletedImages: (this.deletedImages || []).map(img => ({
                id: img.id,
                url: img.url,
                type: img.type
            }))
        };
        
        
        
        return optimizedData;
    }

    /**
     * Show processing state
     */
    showProcessingState(show, message = 'Qayta ishlanmoqda...') {
        const uploadProgress = document.getElementById('uploadProgress');
        if (!uploadProgress) {
            // Create progress element if it doesn't exist
            const progressElement = document.createElement('div');
            progressElement.id = 'uploadProgress';
            progressElement.className = 'upload-progress';
            progressElement.innerHTML = `
                <div class="progress-content">
                    <div class="spinner"></div>
                    <span class="progress-text">${message}</span>
                </div>
            `;
            progressElement.style.display = show ? 'block' : 'none';
            
            const uploadArea = document.getElementById('imageUploadArea');
            if (uploadArea) {
                uploadArea.parentNode.insertBefore(progressElement, uploadArea.nextSibling);
            }
        } else {
            const progressText = uploadProgress.querySelector('.progress-text');
            uploadProgress.style.display = show ? 'block' : 'none';
            if (progressText) {
                progressText.textContent = message;
            }
        }
    }

    /**
     * Enhanced toast notifications
     */
    showSuccessToast(message) {
        this.showToast(message, 'success');
    }

    showErrorToast(message) {
        this.showToast(message, 'error');
    }

    showInfoToast(message) {
        this.showToast(message, 'info');
    }

    /**
     * Final image upload when saving product
     */
    async uploadTemporaryImages() {
        if (!this.temporaryImages || this.temporaryImages.length === 0) {
            return [];
        }

        
        try {
            const formData = new FormData();
            
            // Add all temporary image files
            this.temporaryImages.forEach((imgData, index) => {
                formData.append('images', imgData.file);
                formData.append(`imageAlt_${index}`, imgData.alt || '');
                formData.append(`isPrimary_${index}`, imgData.isPrimary ? 'true' : 'false');
            });

            const response = await fetch('/manufacturer/api/products/upload-images-final', {
                method: 'POST',
                body: formData,
                credentials: 'same-origin'
            });

            const result = await response.json();
            
            if (!result.success) {
                throw new Error(result.message || 'Upload failed');
            }

            return result.data.urls;

        } catch (error) {
            console.error('❌ Image upload failed:', error);
            throw error;
        }
    }

    /**
     * Delete unused images from server
     */
    async deleteUnusedImages() {
        if (!this.deletedImages || this.deletedImages.length === 0) {
            return;
        }

        
        try {
            const imageUrls = this.deletedImages.map(img => img.url);
            
            const response = await fetch('/manufacturer/api/products/delete-images', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ imageUrls }),
                credentials: 'same-origin'
            });

            const result = await response.json();
            
            if (result.success) {
            } else {
                console.warn('⚠️ Some images could not be deleted:', result.message);
            }

        } catch (error) {
            console.error('❌ Image deletion failed:', error);
            // Don't throw - deletion failure shouldn't stop the main operation
        }
    }
}

// Professional SVG Placeholder - Industry Standard
const PROFESSIONAL_PLACEHOLDER_SVG = 'data:image/svg+xml;base64,' + btoa(`
<svg width="200" height="200" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="#f3f4f6"/>
  <g fill="#9ca3af" text-anchor="middle" dominant-baseline="middle">
    <text x="50%" y="45%" font-family="Arial, sans-serif" font-size="16" font-weight="500">Product</text>
    <text x="50%" y="60%" font-family="Arial, sans-serif" font-size="14">Image</text>
  </g>
  <circle cx="100" cy="35" r="8" fill="#d1d5db"/>
  <path d="M70 80 L130 80 L110 60 Z" fill="#d1d5db"/>
</svg>
`);

// Professional Mock Image System - Category-Based Images
const PROFESSIONAL_MOCK_IMAGES = {
    // Textile & Cotton Products
    'textiles': [
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><defs><pattern id="fabric" patternUnits="userSpaceOnUse" width="20" height="20"><rect width="20" height="20" fill="#f8fafc"/><circle cx="10" cy="10" r="2" fill="#3b82f6"/></pattern></defs><rect width="300" height="300" fill="url(#fabric)"/><rect x="50" y="50" width="200" height="200" fill="#e2e8f0" stroke="#3b82f6" stroke-width="3"/><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="18" fill="#1e40af" font-weight="bold">TEXTILE</text><text x="150" y="180" text-anchor="middle" font-family="Arial" font-size="14" fill="#64748b">Premium Fabric</text></svg>`),
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#f1f5f9"/><rect x="30" y="80" width="240" height="140" fill="#3b82f6" rx="10"/><rect x="50" y="100" width="200" height="100" fill="#1d4ed8" rx="5"/><text x="150" y="140" text-anchor="middle" font-family="Arial" font-size="16" fill="white" font-weight="bold">COTTON</text><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="12" fill="#bfdbfe">100% Organic</text></svg>`)
    ],
    // Food & Agriculture
    'food': [
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#fef3c7"/><circle cx="150" cy="150" r="80" fill="#f59e0b" opacity="0.2"/><rect x="120" y="120" width="60" height="60" fill="#d97706" rx="5"/><text x="150" y="145" text-anchor="middle" font-family="Arial" font-size="14" fill="white" font-weight="bold">FOOD</text><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="10" fill="white">Premium Quality</text><circle cx="150" cy="80" r="15" fill="#f59e0b"/><circle cx="100" cy="200" r="10" fill="#d97706"/><circle cx="200" cy="220" r="12" fill="#f59e0b"/></svg>`),
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#ecfdf5"/><rect x="50" y="100" width="200" height="100" fill="#10b981" rx="10"/><text x="150" y="140" text-anchor="middle" font-family="Arial" font-size="18" fill="white" font-weight="bold">ORGANIC</text><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="12" fill="#86efac">Fresh & Natural</text><circle cx="80" cy="70" r="8" fill="#059669"/><circle cx="220" cy="230" r="6" fill="#10b981"/></svg>`)
    ],
    // Electronics & Technology
    'electronics': [
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#f8fafc"/><rect x="50" y="80" width="200" height="140" fill="#1e293b" rx="10"/><rect x="70" y="100" width="160" height="100" fill="#0f172a" rx="5"/><circle cx="90" cy="120" r="3" fill="#22d3ee"/><circle cx="110" cy="120" r="3" fill="#ef4444"/><circle cx="130" cy="120" r="3" fill="#10b981"/><rect x="80" y="140" width="140" height="40" fill="#334155" rx="3"/><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="12" fill="#64748b">ELECTRONICS</text></svg>`),
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#fef2f2"/><rect x="80" y="60" width="140" height="180" fill="#dc2626" rx="15"/><rect x="100" y="80" width="100" height="60" fill="#991b1b" rx="5"/><text x="150" y="110" text-anchor="middle" font-family="Arial" font-size="12" fill="white" font-weight="bold">LED PANEL</text><circle cx="150" cy="180" r="20" fill="#fee2e2"/><circle cx="150" cy="180" r="15" fill="#dc2626"/></svg>`)
    ],
    // General/Default Products
    'general': [
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#f1f5f9"/><rect x="75" y="75" width="150" height="150" fill="#e2e8f0" stroke="#64748b" stroke-width="2" rx="10"/><rect x="100" y="100" width="100" height="100" fill="#94a3b8" rx="5"/><text x="150" y="145" text-anchor="middle" font-family="Arial" font-size="14" fill="white" font-weight="bold">PRODUCT</text><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="10" fill="white">B2B Quality</text></svg>`),
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#fafafa"/><polygon points="150,50 250,150 150,250 50,150" fill="#6366f1" opacity="0.8"/><polygon points="150,80 220,150 150,220 80,150" fill="#4f46e5"/><text x="150" y="145" text-anchor="middle" font-family="Arial" font-size="12" fill="white" font-weight="bold">PREMIUM</text><text x="150" y="160" text-anchor="middle" font-family="Arial" font-size="8" fill="#c7d2fe">Manufacturing</text></svg>`)
    ],
    // Machinery & Industrial
    'machinery': [
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#f9fafb"/><rect x="50" y="100" width="200" height="100" fill="#374151" rx="5"/><circle cx="100" cy="150" r="20" fill="#6b7280"/><circle cx="200" cy="150" r="20" fill="#6b7280"/><rect x="120" y="140" width="60" height="20" fill="#9ca3af" rx="3"/><text x="150" y="240" text-anchor="middle" font-family="Arial" font-size="14" fill="#374151" font-weight="bold">MACHINERY</text></svg>`),
        'data:image/svg+xml;base64,' + btoa(`<svg width="300" height="300" viewBox="0 0 300 300" xmlns="http://www.w3.org/2000/svg"><rect width="300" height="300" fill="#f0f9ff"/><rect x="70" y="80" width="160" height="140" fill="#0ea5e9" rx="8"/><rect x="90" y="100" width="120" height="100" fill="#0284c7" rx="5"/><circle cx="110" cy="130" r="8" fill="#7dd3fc"/><circle cx="150" cy="130" r="8" fill="#7dd3fc"/><circle cx="190" cy="130" r="8" fill="#7dd3fc"/><text x="150" y="250" text-anchor="middle" font-family="Arial" font-size="12" fill="#0369a1" font-weight="bold">INDUSTRIAL</text></svg>`)
    ]
};

// Generate mock image based on category and product info
function generateMockImage(category, productId, productName) {
    // Categorize based on product name and category
    let imageCategory = 'general';
    
    if (category) {
        // Handle both string and object categories
        let categoryString = '';
        if (typeof category === 'string') {
            categoryString = category;
        } else if (typeof category === 'object' && category !== null) {
            categoryString = category.name || category._id || String(category);
        } else {
            categoryString = String(category);
        }
        const cat = categoryString.toLowerCase();
        if (cat.includes('textile') || cat.includes('fabric') || cat.includes('cotton') || cat.includes('yarn')) {
            imageCategory = 'textiles';
        } else if (cat.includes('food') || cat.includes('agriculture') || cat.includes('organic') || cat.includes('grain')) {
            imageCategory = 'food';
        } else if (cat.includes('electronic') || cat.includes('led') || cat.includes('display') || cat.includes('tech')) {
            imageCategory = 'electronics';
        } else if (cat.includes('machinery') || cat.includes('industrial') || cat.includes('equipment')) {
            imageCategory = 'machinery';
        }
    }
    
    // Also check product name for better categorization
    if (productName) {
        const name = productName.toLowerCase();
        if (name.includes('cotton') || name.includes('fabric') || name.includes('textile')) {
            imageCategory = 'textiles';
        } else if (name.includes('flour') || name.includes('wheat') || name.includes('food') || name.includes('organic')) {
            imageCategory = 'food';
        } else if (name.includes('led') || name.includes('display') || name.includes('panel') || name.includes('electronic')) {
            imageCategory = 'electronics';
        } else if (name.includes('machine') || name.includes('industrial') || name.includes('equipment')) {
            imageCategory = 'machinery';
        }
    }
    
    // Get images for the category
    const categoryImages = PROFESSIONAL_MOCK_IMAGES[imageCategory] || PROFESSIONAL_MOCK_IMAGES['general'];
    
    // Use product ID to consistently select the same image for the same product
    const imageIndex = productId ? 
        Math.abs(productId.toString().split('').reduce((a, b) => a + b.charCodeAt(0), 0)) % categoryImages.length :
        Math.floor(Math.random() * categoryImages.length);
    
    return categoryImages[imageIndex];
}

// ENHANCED Professional Image Error Handler - Senior Software Engineer Pattern
function handleImageError(img) {
    if (img.dataset.errorHandled) return; // Prevent infinite loop
    
    console.warn('🚨 Image error handler triggered for:', {
        src: img.src,
        className: img.className,
        productName: img.dataset.productName || 'Unknown'
    });
    
    img.dataset.errorHandled = 'true';
    img.onerror = null;
    
    // CASE 1: Real image failed - convert to mock image (including modal real images)
    if (img.classList.contains('product-real-image') || img.classList.contains('modal-real-image')) {
        
        const category = img.dataset.category || 'general';
        const productId = img.dataset.productId || '';
        const productName = img.dataset.productName || '';
        
        // Remove real image class and add mock image class
        img.classList.remove('product-real-image', 'modal-real-image');
        img.classList.add('mock-product-image', 'modal-mock-image', 'converted-from-real');
        
        // Generate mock image
        const mockSrc = generateMockImage(category, productId, productName);
        img.src = mockSrc;
        
        return;
    }
    
    // CASE 2: Mock image failed - use backup mock image (including modal mock images)
    if (img.classList.contains('mock-product-image') || img.classList.contains('modal-mock-image')) {
        
        const category = img.dataset.category || 'general';
        const productId = img.dataset.productId || '';
        const productName = img.dataset.productName || '';
        
        // Try different mock image from the same category
        const categoryImages = PROFESSIONAL_MOCK_IMAGES[category] || PROFESSIONAL_MOCK_IMAGES['general'];
        const backupIndex = (parseInt(productId.slice(-2), 16) || 1) % categoryImages.length;
        const backupSrc = categoryImages[backupIndex];
        
        img.src = backupSrc;
        img.classList.add('backup-mock-image');
        
        return;
    }
    
    // CASE 3: Everything failed - use professional SVG placeholder
    img.src = PROFESSIONAL_PLACEHOLDER_SVG;
    img.classList.add('final-placeholder');
    
    // CASE 4: Even SVG failed - show CSS placeholder
    img.onerror = function() {
        console.error('💥 All image fallbacks failed, using CSS placeholder');
        this.style.display = 'none';
        
        // Create CSS placeholder if it doesn't exist
        let placeholder = this.nextElementSibling;
        if (!placeholder || !placeholder.classList.contains('product-image-placeholder')) {
            placeholder = document.createElement('div');
            placeholder.className = 'product-image-placeholder';
            placeholder.innerHTML = `
                <i class="fas fa-image"></i>
                <span>No Image Available</span>
            `;
            this.parentNode.insertBefore(placeholder, this.nextSibling);
        }
        
        placeholder.style.display = 'flex';
    };
}

/**
 * Product Modal Manager for Edit Page - DISABLED
 * This class was causing initialization errors and modal issues
 * Modal functionality has been removed as it was not working properly
 */
class ProductModalManager {
    constructor() {
        this.modal = null;
        this.modalBody = null;
        this.isInitialized = false;
        this.logger = console;
        console.log('⚠️ ProductModalManager is disabled - modal functionality removed');
    }

    // All methods disabled to prevent errors
    setupEventListeners() {
        console.log('⚠️ Modal event listeners disabled');
        // Preview button functionality - simplified without modal
        const previewBtn = document.getElementById('previewBtn');
        if (previewBtn) {
            previewBtn.addEventListener('click', () => {
                // Simple alert instead of modal
                alert(window.t?.('manufacturer.products.edit.actions.previewDisabled') || 'Mahsulot ko\'rinishi - modal o\'chirilgan');
            });
        }
    }

    getProductIdFromUrl() {
        // Disabled - modal functionality removed
        return null;
    }

    async showProductDetails(productId) {
        // Disabled - modal functionality removed
        console.log('⚠️ showProductDetails disabled - modal functionality removed');
                return;
            }

    // All other modal methods disabled
    init() {
        console.log('⚠️ Modal init disabled');
    }

    closeModal() {
        console.log('⚠️ Modal close disabled');
    }

    showErrorToast(message) {
        console.log('⚠️ Modal error toast disabled:', message);
    }

    generateProductDetailsHTML(product) {
        // Disabled - modal functionality removed
        return '';
    }

    showError(message) {
        console.log('⚠️ Modal showError disabled:', message);
    }
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
    
    try {
        // Validate required data
        if (!productEditData || !productEditData.product) {
            console.error('❌ Product edit data missing!');
            return;
        }
        
        // Initialize header functionality
        if (window.ManufacturerHeader) {
            window.manufacturerHeader = new ManufacturerHeader();
        }
        
        // Initialize dashboard functionality
        if (window.ManufacturerDashboard) {
            const dashboardOptions = {
                userId: productEditData.user.id,
                userName: productEditData.user.name,
                companyName: productEditData.user.companyName,
                currentPage: 'products'
            };
            
            window.manufacturerDashboard = new ManufacturerDashboard(dashboardOptions);
            window.manufacturerDashboard.init().catch(console.warn);
        }
        
        // Initialize product edit manager
            window.productEditManager = new ProductEditManager();
        
        // REMOVED: ProductModalManager initialization - modal was causing issues
        // window.productModalManager = new ProductModalManager();
        // window.productModalManager.init();
        
        console.log('✅ Product Edit Page initialized successfully');
        
    } catch (error) {
        console.error('❌ Product Edit Page initialization failed:', error);
        
        // Only show error message if it's a critical error, not just missing modal
        if (error.message && !error.message.includes('modal')) {
        const errorDiv = document.createElement('div');
            errorDiv.className = 'alert alert-danger';
            errorDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; max-width: 400px;';
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-exclamation-circle"></i>
                    <strong>${window.t?.('manufacturer.products.edit.errors.pageLoadError') || 'Sahifa yuklanishida xatolik!'}</strong>
            </div>
                <p style="margin: 0.5rem 0 0 0; font-size: 0.875rem;">${window.t?.('manufacturer.products.edit.errors.pageReloadHint') || 'Sahifani qayta yuklang yoki administrator bilan bog\'laning.'}</p>
        `;
        document.body.appendChild(errorDiv);
        
            // Auto remove after 10 seconds
            setTimeout(() => errorDiv.remove(), 10000);
        }
    }
});

// Cleanup on page unload
window.addEventListener('beforeunload', () => {
    window.productEditManager?.destroy();
});
</script>

<style>
/* =============================================== */
/* PRODUCT EDIT PAGE STYLES */
/* =============================================== */

/* Product Header */
.product-header {
    background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    color: white;
    padding: 2rem;
    border-radius: 12px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}


.page-title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.page-subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
    margin: 0;
}




.btn-outline {
    background: transparent;
    border: 1px solid rgba(255,255,255,0.5);
    color: white;
}

.btn-outline:hover {
    background: rgba(255,255,255,0.1);
    border-color: white;
}

.btn-secondary {
    background: rgba(255,255,255,0.2);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
}

.btn-secondary:hover {
    background: rgba(255,255,255,0.3);
}

.btn-primary {
    background: rgba(255,255,255,0.2);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
}

.btn-primary:hover {
    background: rgba(255,255,255,0.3);
    transform: translateY(-2px);
}

/* Main Container */
.product-edit-container {
    display: grid;
    grid-template-columns: 1fr 350px;
    gap: 2rem;
    align-items: start;
}

/* Form Container */
.form-container {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
}

/* Multi-step Form */
.multi-step-form {
    position: relative;
}

.form-progress {
    padding: 2rem;
    background: var(--bg-secondary);
    border-bottom: 1px solid var(--border-color);
}

.progress-steps {
    display: flex;
    justify-content: between;
    align-items: center;
    margin-bottom: 1.5rem;
    position: relative;
}

.progress-steps::before {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 2px;
    background: var(--border-color);
    z-index: 1;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    z-index: 2;
    cursor: pointer;
    transition: all 0.3s ease;
    flex: 1;
}

.step-number {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    background: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: 0.875rem;
    color: var(--text-secondary);
    transition: all 0.3s ease;
}

.step-label {
    font-size: 0.75rem;
    color: var(--text-secondary);
    text-align: center;
    line-height: 1.2;
    transition: color 0.3s ease;
}

.step.active .step-number {
    background: var(--primary-color);
    border-color: var(--primary-color);
    color: rgb(34, 170, 255);
}

.step.active .step-label {
    color: rgb(34, 170, 255);
    font-weight: 600;
}

.progress-bar {
    height: 6px;
    background: var(--border-color);
    border-radius: 3px;
    overflow: hidden;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 3px;
    transition: width 0.5s ease;
}

/* Form Steps - Optimized Animation */
.form-step {
    display: none;
    padding: 2rem;
    opacity: 0;
    transform: translateX(20px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.form-step.active {
    display: block;
    opacity: 1 !important;
    transform: translateX(0) !important;
    animation: smoothSlideIn 0.3s ease-out forwards;
}

/* Smooth slide animation */
@keyframes smoothSlideIn {
    0% {
        opacity: 0;
        transform: translateX(15px);
    }
    100% {
        opacity: 1;
        transform: translateX(0);
    }
}

.step-header {
    margin-bottom: 2rem;
    text-align: center;
}

.step-header h3 {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
}

.step-description {
    color: var(--text-secondary);
    margin: 0;
}

/* Form Grid */
.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.form-group.full-width {
    grid-column: 1 / -1;
}

.form-label {
    font-weight: 600;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
}

.form-label.required::after {
    content: '*';
    color: #ef4444;
    margin-left: 0.25rem;
}

.form-input,
.form-textarea,
.form-select {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background: var(--card-bg);
    color: var(--text-primary);
    font-size: 0.875rem;
    transition: all 0.3s ease;
}

.form-input:focus,
.form-textarea:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.form-group.error .form-input,
.form-group.error .form-textarea,
.form-group.error .form-select {
    border-color: #ef4444;
}

.form-group.valid .form-input,
.form-group.valid .form-textarea,
.form-group.valid .form-select {
    border-color: #10b981;
}

.validation-message {
    font-size: 0.75rem;
    color: #ef4444;
    margin-top: 0.25rem;
}

.form-hint {
    font-size: 0.75rem;
    color: var(--text-tertiary);
    margin-top: 0.25rem;
}

/* Special Input Types */
.price-input-wrapper {
    position: relative;
}

.price-currency {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    font-weight: 600;
}

.price-input {
    padding-left: 2rem;
}

.form-input.small {
    padding: 0.5rem;
    font-size: 0.8rem;
}

.dimensions-inputs {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.dimensions-inputs span {
    color: var(--text-secondary);
    font-weight: 600;
}

/* Dynamic Sections */
.bulk-pricing-section,
.specifications-section,
.inventory-section {
    margin-bottom: 2rem;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--border-color);
}

.section-header h4 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-sm {
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
    border-radius: 6px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-sm.btn-outline {
    background: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
}

.btn-sm.btn-outline:hover {
    background: var(--bg-secondary);
    color: var(--text-primary);
    border-color: var(--primary-color);
}

.btn-sm.btn-ghost {
    background: transparent;
    color: var(--text-secondary);
}

.btn-sm.btn-ghost:hover {
    background: var(--bg-secondary);
    color: var(--text-primary);
}

/* Bulk Pricing */
.bulk-price-item,
.specification-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 0.75rem;
}

.bulk-inputs,
.spec-inputs {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex: 1;
}

.bulk-inputs span {
    color: var(--text-secondary);
    font-weight: 600;
}

/* Image Upload */
.image-upload-section {
    margin-bottom: 2rem;
}

.upload-area {
    border: 2px dashed var(--border-color);
    border-radius: 12px;
    padding: 3rem 2rem;
    text-align: center;
    transition: all 0.3s ease;
    cursor: pointer;
    margin-bottom: 2rem;
}

.upload-area:hover,
.upload-area.drag-over {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.05);
}

.upload-icon {
    font-size: 3rem;
    color: var(--text-tertiary);
    margin-bottom: 1rem;
}

.upload-area h4 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 0.5rem 0;
}

.upload-area p {
    color: var(--text-secondary);
    margin: 0 0 1rem 0;
}

.upload-requirements {
    font-size: 0.75rem;
    color: var(--text-tertiary);
    margin-bottom: 1.5rem !important;
}

.upload-btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

.upload-btn:hover {
    background: var(--primary-hover);
    transform: translateY(-2px);
}

/* Current Images */
.images-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 1rem;
}

.image-item {
    position: relative;
    aspect-ratio: 1;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid var(--border-color);
    transition: all 0.3s ease;
}

.image-item:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
    
}

.image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
}

.image-wrapper img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0,0,0,0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.image-item:hover .image-overlay {
    opacity: 1;
}

.image-item:hover i.fa-star {
  color: #f59e0b;
}
.image-item:hover i.fa-trash {
  color: #ef4444;
}

.image-overlay .btn-sm {
    background: rgba(255,255,255,0.9);
    color: var(--text-primary);
    padding: 0.5rem;
    border-radius: 6px;
}

.primary-badge {
    position: absolute;
    top: 0.5rem;
    left: 0.5rem;
    background: #f59e0b;
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 600;
}

/* Upload Progress */
.upload-progress {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
}

.progress-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.progress-text {
    font-size: 0.875rem;
    color: var(--text-primary);
}

.progress-percentage {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--primary-color);
}

/* Shipping Methods */
.shipping-methods {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    color: var(--text-primary);
    font-size: 0.875rem;
}

.checkbox-label input[type="checkbox"] {
    display: none;
}

.checkmark {
    width: 20px;
    height: 20px;
    border: 2px solid var(--border-color);
    border-radius: 4px;
    position: relative;
    transition: all 0.3s ease;
}

.checkbox-label input[type="checkbox"]:checked + .checkmark {
    background: var(--primary-color);
    border-color: var(--primary-color);
}

.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
    content: '✓';
    position: absolute;
    top: -2px;
    left: 3px;
    color: white;
    font-size: 14px;
    font-weight: bold;
}

.checkbox-label.selected {
    background: var(--primary-color-light);
    border-color: var(--primary-color);
}

.checkbox-label:hover {
    background: var(--bg-hover);
}

/* Form Navigation */
.form-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2rem;
    background: var(--bg-secondary);
    border-top: 1px solid var(--border-color);
}

.nav-info {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
}

.current-step {
    color: var(--primary-color);
    font-weight: 700;
}

.btn-success {
    background: #10b981;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-success:hover {
    background: #059669;
    transform: translateY(-2px);
}

/* Sidebar */
.sidebar-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.analytics-card,
.quick-actions-card,
.status-card {
    background: var(--bg-card);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
}

.card-header {
    background: var(--bg-secondary);
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
}

.card-header h4 {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.card-body {
    padding: 1rem;
}

/* Analytics Grid */
.analytics-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
}

.analytics-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: var(--bg-secondary);
    border-radius: 8px;
}

.analytics-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1rem;
}

.analytics-icon.views { background: #3b82f6; }
.analytics-icon.orders { background: #10b981; }
.analytics-icon.revenue { background: #f59e0b; }
.analytics-icon.conversion { background: #8b5cf6; }

.analytics-info {
    flex: 1;
}

.analytics-value {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1;
}

.analytics-label {
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
}

/* Quick Actions */
.action-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.action-btn {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
}

.prev-step{
  padding: 8px;
  border-radius: 5px;
  display: block;
  align-content: center;
}

.action-btn:hover {
    background: var(--bg-secondary);
    border-color: var(--primary-color);
}

.action-btn.danger {
    color: #ef4444;
    border-color: rgba(239, 68, 68, 0.3);
}

.action-btn.danger:hover {
    background: rgba(239, 68, 68, 0.1);
    border-color: #ef4444;
}

/* Status Controls */
.status-controls {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.control-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: var(--bg-secondary);
    border-radius: 8px;
}

/* Professional Toggle Switch Styles - Senior Software Engineer Design */
.toggle-switch {
    position: relative;
    width: 56px;
    height: 32px;
    flex-shrink: 0;
    user-select: none;
}

.toggle-switch input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
    margin: 0;
    pointer-events: none;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
    border: 2px solid #e2e8f0;
    border-radius: 32px;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 
        inset 0 2px 4px rgba(0, 0, 0, 0.1),
        0 2px 8px rgba(0, 0, 0, 0.08);
    overflow: hidden;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 24px;
    width: 24px;
    left: 2px;
    bottom: 2px;
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border: 1px solid rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    box-shadow: 
        0 3px 12px rgba(0, 0, 0, 0.15),
        0 1px 4px rgba(0, 0, 0, 0.1);
    transform: translateX(0) scale(1);
}

.toggle-slider:after {
    content: "";
    position: absolute;
    top: 50%;
    left: 10px;
    width: 3px;
    height: 3px;
    background: #94a3b8;
    border-radius: 50%;
    transform: translateY(-50%);
    transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    opacity: 1;
}

/* Checked State - Professional Green Activation */
.toggle-switch input:checked + .toggle-slider {
    background: linear-gradient(135deg, var(--primary-color, #10b981) 0%, #059669 100%);
    border-color: var(--primary-color, #10b981);
    box-shadow: 
        inset 0 2px 4px rgba(16, 185, 129, 0.3),
        0 0 16px rgba(16, 185, 129, 0.2),
        0 2px 8px rgba(0, 0, 0, 0.1);
}

.toggle-switch input:checked + .toggle-slider:before {
    transform: translateX(24px) scale(1.05);
    background: linear-gradient(135deg, #ffffff 0%, #f0fdf4 100%);
    box-shadow: 
        0 4px 16px rgba(0, 0, 0, 0.2),
        0 2px 6px rgba(0, 0, 0, 0.15);
}

.toggle-switch input:checked + .toggle-slider:after {
    left: auto;
    right: 10px;
    background: rgba(255, 255, 255, 0.9);
    opacity: 1;
    box-shadow: 0 0 6px rgba(255, 255, 255, 0.6);
}

/* Professional Hover Effects */
.toggle-switch:hover .toggle-slider {
    transform: scale(1.02);
    box-shadow: 
        inset 0 2px 4px rgba(0, 0, 0, 0.1),
        0 4px 16px rgba(0, 0, 0, 0.12);
}

.toggle-switch:hover input:checked + .toggle-slider {
    box-shadow: 
        inset 0 2px 4px rgba(16, 185, 129, 0.3),
        0 0 20px rgba(16, 185, 129, 0.3),
        0 4px 16px rgba(0, 0, 0, 0.15);
}

.toggle-switch:hover .toggle-slider:before {
    transform: translateX(0) scale(1.1);
    box-shadow: 
        0 4px 16px rgba(0, 0, 0, 0.2),
        0 2px 6px rgba(0, 0, 0, 0.15);
}

.toggle-switch:hover input:checked + .toggle-slider:before {
    transform: translateX(24px) scale(1.15);
}

/* Focus State for Accessibility */
.toggle-switch input:focus + .toggle-slider {
    outline: 2px solid var(--primary-color, #3b82f6);
    outline-offset: 2px;
}

/* Disabled State */
.toggle-switch input:disabled + .toggle-slider {
    opacity: 0.6;
    cursor: not-allowed;
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border-color: #e2e8f0;
}

.toggle-switch input:disabled + .toggle-slider:before {
    background: #e2e8f0;
    box-shadow: none;
}

/* Dark Mode Professional Styling */
[data-theme="dark"] .toggle-slider {
    background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
    border-color: #4b5563;
    box-shadow: 
        inset 0 2px 4px rgba(0, 0, 0, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.2);
}

[data-theme="dark"] .toggle-slider:before {
    background: linear-gradient(135deg, #f9fafb 0%, #e5e7eb 100%);
    border-color: rgba(255, 255, 255, 0.8);
}

[data-theme="dark"] .toggle-slider:after {
    background: #6b7280;
}

[data-theme="dark"] .toggle-switch input:checked + .toggle-slider {
    background: linear-gradient(135deg, var(--primary-color, #10b981) 0%, #059669 100%);
    box-shadow: 
        inset 0 2px 4px rgba(16, 185, 129, 0.4),
        0 0 16px rgba(16, 185, 129, 0.3),
        0 2px 8px rgba(0, 0, 0, 0.3);
}

[data-theme="dark"] .toggle-switch input:checked + .toggle-slider:before {
    background: linear-gradient(135deg, #ffffff 0%, #f0fdf4 100%);
}

[data-theme="dark"] .toggle-switch input:checked + .toggle-slider:after {
    background: rgba(255, 255, 255, 0.95);
}

/* Professional Animation Keyframes */
@keyframes professional-toggle-on {
    0% {
        transform: translateX(0) scale(1);
    }
    50% {
        transform: translateX(12px) scale(1.15);
    }
    100% {
        transform: translateX(24px) scale(1.05);
    }
}

@keyframes professional-toggle-off {
    0% {
        transform: translateX(24px) scale(1.05);
    }
    50% {
        transform: translateX(12px) scale(1.15);
    }
    100% {
        transform: translateX(0) scale(1);
    }
}

.toggle-switch input:checked + .toggle-slider:before {
    animation: professional-toggle-on 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.toggle-switch input:not(:checked) + .toggle-slider:before {
    animation: professional-toggle-off 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.control-info {
    flex: 1;
}

.control-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
}

.control-description {
    font-size: 0.75rem;
    color: var(--text-secondary);
}

/* Stock Status */
.stock-status {
    text-align: center;
    padding: 0.75rem;
}

.status-indicator {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
}

.status-indicator.in_stock {
    background: rgba(16, 185, 129, 0.1);
    color: #10b981;
}

.status-indicator.low_stock {
    background: rgba(245, 158, 11, 0.1);
    color: #f59e0b;
}

.status-indicator.out_of_stock {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
}

/* Auto-save Indicator */
.auto-save-indicator {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-size: 0.875rem;
    z-index: 9999;
    animation: slideInUp 0.3s ease-out;
}

/* Animations */
@keyframes slideInUp {
    from { transform: translateY(30px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes slideOutRight {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100px); opacity: 0; }
}

/* Responsive Design */
@media (max-width: 1024px) {
    .product-edit-container {
        grid-template-columns: 1fr;
    }
    
    .sidebar-container {
        order: -1;
    }
    
    .analytics-grid {
        grid-template-columns: repeat(4, 1fr);
    }
}

@media (max-width: 768px) {
    
    
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .progress-steps {
        flex-wrap: wrap;
        gap: 1rem;
    }
    
    .step-label {
        display: none;
    }
    
    .analytics-grid {
        grid-template-columns: 1fr 1fr;
    }
    
    .bulk-inputs,
    .spec-inputs {
        flex-direction: column;
        align-items: stretch;
    }
    
    .dimensions-inputs {
        flex-direction: column;
    }
}

@media (max-width: 480px) {
    .product-header {
        padding: 1.5rem;
    }
    
    .form-step {
        padding: 1rem;
    }
    
    .analytics-grid {
        grid-template-columns: 1fr;
    }
    
    .images-grid {
        grid-template-columns: 1fr 1fr;
    }
}

/* Dark Mode Compatibility */
[data-theme="dark"] .product-header {
    background: linear-gradient(135deg, #1e40af, #7c3aed);
}

[data-theme="dark"] .upload-area {
    border-color: var(--border-color);
    background: var(--bg-tertiary);
}

[data-theme="dark"] .upload-area:hover,
[data-theme="dark"] .upload-area.drag-over {
    border-color: var(--primary-color);
    background: rgba(59, 130, 246, 0.1);
}

/* Dark Mode - Form Select & Options */
[data-theme="dark"] .form-select {
    background: var(--bg-secondary, #1f2937);
    border-color: var(--border-color, #374151);
    color: var(--text-primary, #f9fafb);
}

[data-theme="dark"] .form-select:focus {
    border-color: var(--color-primary, #3b82f6);
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    background: var(--bg-secondary, #1f2937);
}

[data-theme="dark"] .form-select option {
    background: var(--bg-secondary, #1f2937);
    color: var(--text-primary, #f9fafb);
    padding: 0.5rem;
}

[data-theme="dark"] .form-select option:hover,
[data-theme="dark"] .form-select option:focus {
    background: var(--color-primary, #3b82f6);
    color: white;
}

[data-theme="dark"] .form-select option:checked {
    background: var(--color-primary, #3b82f6);
    color: white;
    font-weight: 600;
}

/* Professional Toast Notifications - Senior Software Engineer Design */
.toast {
    position: fixed;
    top: 20px;
    right: 20px;
    min-width: 320px;
    max-width: 500px;
    padding: 16px 20px;
    background: white;
    border-radius: 12px;
    box-shadow: 
        0 10px 40px rgba(0, 0, 0, 0.15),
        0 4px 12px rgba(0, 0, 0, 0.1);
    border: 1px solid #e2e8f0;
    display: flex;
    align-items: center;
    gap: 12px;
    z-index: 10000;
    transform: translateX(100%);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 0;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}

.toast.show {
    transform: translateX(0);
    opacity: 1;
}

.toast i {
    font-size: 20px;
    flex-shrink: 0;
}

.toast span {
    flex: 1;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.5;
}

.toast-success {
    background: linear-gradient(135deg, #f0fdf4 0%, #ecfdf5 100%);
    border-color: #10b981;
    color: #065f46;
}

.toast-success i {
    color: #10b981;
}

.toast-error {
    background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
    border-color: #ef4444;
    color: #991b1b;
}

.toast-error i {
    color: #ef4444;
}

.toast-info {
    background: linear-gradient(135deg, #eff6ff 0%, #dbeafe 100%);
    border-color: #3b82f6;
    color: #1e40af;
}

.toast-info i {
    color: #3b82f6;
}

/* Dark Mode Toast Notifications */
[data-theme="dark"] .toast {
    background: #374151;
    border-color: #4b5563;
    color: #f9fafb;
}

[data-theme="dark"] .toast-success {
    background: linear-gradient(135deg, #064e3b 0%, #065f46 100%);
    border-color: #10b981;
    color: #d1fae5;
}

[data-theme="dark"] .toast-error {
    background: linear-gradient(135deg, #7f1d1d 0%, #991b1b 100%);
    border-color: #ef4444;
    color: #fecaca;
}

[data-theme="dark"] .toast-info {
    background: linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%);
    border-color: #3b82f6;
    color: #dbeafe;
}

/* Professional Validation Error Modal */
.validation-error-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10001;
    animation: fadeIn 0.3s ease;
}

.validation-errors-modal {
    background: white;
    border-radius: 16px;
    padding: 32px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 
        0 25px 50px rgba(0, 0, 0, 0.25),
        0 10px 20px rgba(0, 0, 0, 0.1);
    animation: slideInUp 0.3s ease;
}

.error-header {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #fef2f2;
}

.error-header i {
    font-size: 28px;
    color: #ef4444;
}

.error-header h3 {
    color: #991b1b;
    font-size: 20px;
    font-weight: 600;
    margin: 0;
}

.error-list {
    list-style: none;
    padding: 0;
    margin: 0 0 24px 0;
}

.error-list li {
    padding: 12px 16px;
    margin-bottom: 8px;
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 8px;
    color: #991b1b;
    font-weight: 500;
    position: relative;
    padding-left: 40px;
}

.error-list li::before {
    content: "•";
    position: absolute;
    left: 16px;
    color: #ef4444;
    font-weight: bold;
    font-size: 16px;
}

.error-actions {
    display: flex;
    justify-content: flex-end;
    gap: 12px;
}

/* Professional Publish Success Modal */
.publish-success-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10001;
    animation: fadeIn 0.3s ease;
}

.publish-success-modal {
    background: white;
    border-radius: 16px;
    padding: 32px;
    max-width: 500px;
    width: 90%;
    text-align: center;
    box-shadow: 
        0 25px 50px rgba(0, 0, 0, 0.25),
        0 10px 20px rgba(0, 0, 0, 0.1);
    animation: slideInUp 0.3s ease;
}

.success-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #f0fdf4;
}

.success-header i {
    font-size: 48px;
    color: #10b981;
    margin-bottom: 12px;
}

.success-header h3 {
    color: #065f46;
    font-size: 24px;
    font-weight: 600;
    margin: 0;
}

.success-content {
    margin-bottom: 24px;
}

.success-content p {
    color: #374151;
    font-size: 16px;
    line-height: 1.6;
    margin-bottom: 16px;
}

.success-content a {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 16px;
}

.success-actions {
    display: flex;
    justify-content: center;
    gap: 12px;
}

/* Button Loading State */
.btn.loading {
    pointer-events: none;
    opacity: 0.8;
}

.btn.loading i.fa-spinner {
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

/* Modal Animations */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Dark Mode Modal Styles */
[data-theme="dark"] .validation-errors-modal,
[data-theme="dark"] .publish-success-modal {
    background: #1f2937;
    color: #f9fafb;
}

[data-theme="dark"] .error-header {
    border-bottom-color: #374151;
}

[data-theme="dark"] .error-header h3 {
    color: #fecaca;
}

[data-theme="dark"] .error-list li {
    background: #374151;
    border-color: #4b5563;
    color: #fecaca;
}

[data-theme="dark"] .success-header {
    border-bottom-color: #374151;
}

[data-theme="dark"] .success-header h3 {
    color: #d1fae5;
}

[data-theme="dark"] .success-content p {
    color: #d1d5db;
}

/* Responsive Toast Notifications */
@media (max-width: 768px) {
    .toast {
        top: 10px;
        right: 10px;
        left: 10px;
        min-width: auto;
        max-width: none;
    }
    
    .validation-errors-modal,
    .publish-success-modal {
        margin: 20px;
        width: calc(100% - 40px);
        padding: 24px;
    }
    
    .error-header h3,
    .success-header h3 {
        font-size: 18px;
    }
    
    .success-header i {
        font-size: 36px;
    }
}
</style>


<!-- Product Data Script -->
<script id="product-data" type="application/json">
<%- JSON.stringify({
  _id: product._id,
  name: product.name,
  description: product.description,
  shortDescription: product.shortDescription,
  category: product.category,
  subcategory: product.subcategory,
  pricing: product.pricing,
  inventory: product.inventory,
  shipping: product.shipping,
  images: product.images,
  tags: product.tags,
  status: product.status,
  visibility: product.visibility,
  isFeatured: product.isFeatured,
  isPromoted: product.isPromoted
}) %>
</script>

<!-- Analytics Data Script -->
<script id="analytics-data" type="application/json">
<%- JSON.stringify(productAnalytics || {}) %>
</script>

<!-- Product Edit Manager JavaScript -->
<script src="/js/manufacturer/product-edit-manager.js"></script>


</body>
</html>